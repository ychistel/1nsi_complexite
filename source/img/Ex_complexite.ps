%!PS-Adobe-2.0
%%Creator: dvips(k) 2020.1 Copyright 2020 Radical Eye Software
%%Title: Ex_complexite.dvi
%%CreationDate: Thu Feb 03 10:33:37 2022
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: SFBX2488 SFRM2074 SFBX1440 SFTI1095 SFBX1095 SFRM1095
%%+ SFSS1095 CMR10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -o Ex_complexite.ps
%+ Ex_complexite.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2022.02.03:1133
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 4 2020-06-09 08:32:19Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/addCoors { 
  3 -1 roll 		% xA xB yB yA
  add			% xA xB yB+yA
  3 1 roll 		% yB+yA xA xB
  add			% yB+yA xA+xB
  exch                  % xA+xB yA+yB
} def
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (original)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul         %	\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { i dx mul dup xGridOffset add y0 moveto % draw the lines
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  /i x1 def 
  GridDX div ceiling cvi 
  { i dx mul GridDX mul dup xGridOffset add y0 moveto % plot the labels
    b 0 gt 
      { gsave c i GridDX mul a cvs dup stringwidth pop /z2 ED  
        w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse exch GridDX div z2 2 div sub exch 
        rmoveto show grestore } if 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  /i y1 def 
  GridDY div ceiling cvi
  { newpath i dy mul GridDY mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i GridDY mul a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse GridDY div b 2 div sub
      rmoveto show grestore } if 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 4 2020-06-09 08:32:19Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 4 2020-06-09 08:32:19Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-blur.pro 0 0
%%
%% This is file `pst-blur.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% pst-blur.dtx  (with options: `prolog')
%% 
%% IMPORTANT NOTICE:
%% 
%% For the copyright see the source file.
%% 
%% Any modified versions of this file must be renamed
%% with new filenames distinct from pst-blur.pro.
%% 
%% For distribution of the original source see the terms
%% for copying and modification in the file pst-blur.dtx.
%% 
%% This generated file may be distributed as long as the
%% original source files, as listed above, are part of the
%% same distribution. (The sources need not necessarily be
%% in the same archive or directory.)
%% $Id: pst-blur.dtx,v 2.0 2005/09/08 09:48:33 giese Exp $
%%
%% Copyright 1998-2007 Martin Giese, mgiese@risc.uni-linz.ac.at
%%                     Herbert Voss, voss@pstricks.de
%%
%% This file is under the LaTeX Project Public License
%% See CTAN archives in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-blur' is a PSTricks package for blurred shadows
%%
/tx@PstBlurDict 60 dict def
tx@PstBlurDict begin
/Iterate {
  /SegLines ED
  /ThisB ED /ThisG ED /ThisR ED
  /NextB ED /NextG ED /NextR ED
  /W 2.0 BlurRadius mul def
  /WDec W SegLines div def
  /RInc NextR ThisR sub SegLines div def
  /GInc NextG ThisG sub SegLines div def
  /BInc NextB ThisB sub SegLines div def
  /R ThisR def
  /G ThisG def
  /B ThisB def
  SegLines {
    R G B
    sqrt 3 1 roll sqrt 3 1 roll sqrt 3 1 roll
    setrgbcolor
    gsave W setlinewidth
    stroke grestore
    /W W WDec sub def
    /R R RInc add def
    /G G GInc add def
    /B B BInc add def
  } bind repeat
} def
/BlurShadow {
  Shadow
  /BlurSteps ED
  /BlurRadius ED
  dup mul /BEnd ED dup mul /GEnd ED dup mul /REnd ED
  dup mul /BBeg ED dup mul /GBeg ED dup mul /RBeg ED
  RBeg REnd add 0.5 mul /RMid ED
  GBeg GEnd add 0.5 mul /GMid ED
  BBeg BEnd add 0.5 mul /BMid ED
  /OuterSteps BlurSteps 2 div cvi def
  /InnerSteps BlurSteps OuterSteps sub def
  1 setlinejoin
  RMid GMid BMid REnd GEnd BEnd OuterSteps Iterate
  gsave RBeg sqrt GBeg sqrt BBeg sqrt setrgbcolor fill grestore
  clip
  0 setlinejoin
  RMid GMid BMid RBeg GBeg BBeg InnerSteps Iterate
} def
end

%%EndProcSet
%%BeginProcSet: pst-func.pro 0 0
%% $Id: pst-func.pro 861 2018-12-13 20:40:06Z herbert $
%%
%% This is file `pst-func.pro',
%%
%% IMPORTANT NOTICE:
%%
%% Package `pst-func'
%%
%% Herbert Voss <hvoss@tug.org>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-func' is a PSTricks package to plot special math functions
%%
%%
%% version 0.17 / 2018-12-13  Herbert Voss
%
/tx@FuncDict 100 dict def
tx@FuncDict begin
%
/eps1 1.0e-05 def
/eps2 1.0e-04 def
/eps5 1.0e-05 def
/eps8 1.0e-08 def
%
/PiHalf 1.57079632679489661925640 def
/CEuler 0.5772156649 def % Euler-Mascheroni constant
%
/factorial { % n on stack, returns n! 
  dup 32 gt { pop 1e32 } {
    dup 0 eq { 1 }{ 
      dup 1 gt { dup 1 sub factorial mul } if }
    ifelse } ifelse 
} def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/Pascal [
  [                   1                   ] % 0
  [                 1   1                 ] % 1
  [               1   2   1               ] % 2
  [             1   3   3   1             ] % 3
  [           1   4   6   4   1           ] % 4
  [         1   5  10  10   5   1         ] % 5
  [       1   6  15  20  15   6   1       ] % 6
  [     1   7  21  35  35  21   7   1     ] % 7
  [   1   8  28  56  70  56  28  8    1   ] % 8
  [ 1   9  36  84 126 126  84  36  9    1 ] % 9
] def
%
/GetBezierCoor { 				% t on stack
  10 dict begin					% hold all local
  /t ED
  /t1 1 t sub def				% t1=1-t
  /Coeff Pascal BezierType get def		% get the coefficients
    0 0						% initial values for x y
    BezierType -1 0 {				% BezierType,...,2,1,0
      /I ED					% I=BezierType,...,2,1,0
      /J BezierType I sub def			% J=0,1,2,...,BezierType
      /T t I exp Coeff J get mul def		% coeff(J)*t^I
      /T1 t1 J exp def				% t1^J  
      Points I dup add 1 add get		% y(2*I+1)
      T mul T1 mul add				% the y coordinate
      exch					% y x	
      Points I dup add get			% x(2*I)
      T mul T1 mul add				% the x coordinate
      exch					% x y	
    } for					% x y on stack
  end
} def

/BezierCurve { % on stack [ coors psk@plotpoints BezierType
%  10 dict begin
  /BezierType ED                        % 2,3,4,5,6,...
  1 exch div /epsilon ED                % step for Bezier =1/plotpoints
  ]                                     % [ yi xi ... y3 x3 y2 x2 y1 x1 y0 x0]
  ps@ReverseOrderOfPoints               % [y0 x0 y1 x1 ... yi xi]
  /Points ED 				% save Points array
  epsilon GetBezierCoor 		% next Bezier point
  Points 0 get Points 1 get 		% starting point
  ArrowA lineto 
  epsilon epsilon 1 epsilon sub { % on stack is the loop variable
    GetBezierCoor lineto 
  } for 
  1 epsilon sub GetBezierCoor  
  1 GetBezierCoor  
  ArrowB lineto moveto
%  end
} def

/Bernstein { % on stack tStart tEnd plotpoints i n
  12 dict begin				% hold all local
  /envelope ED				% plot envelope?
  /n ED 
  /i ED
  /ni n i sub def  
  /epsilon ED				% step=1/plotpoints
  /tEnd ED
  /tStart ED
%
% B_{i,n}(t)=\binom{n}{i}t^i(1-t)^{n-i}      (Bernstein)
% f_n(x)=\frac{1}{\sqrt{\pi n\cdot x(1-x)}}  (envelope)
%
  n i MoverN /noveri ED			% \binom{n}{i}
  [					% for the array of points
  tStart epsilon tEnd {
    dup dup /t ED			% leave one on stack
    neg 1 add /t1 ED			% t1=1-t
    envelope 
      { t t1 mul 4 mul PiHalf mul n mul sqrt 1 exch Div }	% envelope
      { noveri t i exp mul t1 ni exp mul } ifelse 	% t f(t)
    ScreenCoor				% convert to screen coor
  } for
  end
  false /Lineto /lineto load def Line
} def
%%
/Si { % integral sin from 0 to x (arg on stack)
  10 dict begin				% hold all local
  dup 0 eq 
  { pop 0 } 
  { 
    /arg exch def  % x
    /arg2 arg dup mul def
    /Sum arg def   %
    /sign -1 def   
    /I 3 def
    /Frac arg2 arg mul 6 div def
    { %  a sequence of x - x^3/(3*3!) + x^5/(5*5!) -...+...
      Frac I div sign mul
      dup abs eps5 lt { pop exit } if
      Sum add /Sum exch def
      /sign sign neg def
      /I I 2 add def
      Frac arg2 mul I 1 sub I mul div /Frac ED
%    arg I Power dup abs 1e30 gt { pop exit } if
%    I factorial div I div sign mul 
%    dup abs eps8 lt { pop exit } if 
%    Sum add /Sum exch def
%    /sign sign neg def
%    /I I 2 add def
   } loop
   Sum
  } ifelse
  end
} def
%
/si { % integral sin from x to infty -> si(x)=Si(x)-pi/2
  Si PiHalf sub
} def
%
/Ci { % integral cosin from x to infty (arg on stack)
  10 dict begin				% hold all local
  abs /arg exch def
  arg 0 eq { 0 } { 
    /arg2 arg dup mul def 
    /Sum CEuler arg ln add def
    /sign -1 def
    /I 2 def
    /Frac arg2 2 div def % first fraction
    { Frac I div sign mul
      dup abs eps5 lt { pop exit } if
      Sum add /Sum exch def
     /sign sign neg def
     /I I 2 add def
     Frac arg2 mul I 1 sub I mul div /Frac ED
    } loop
    Sum
  } ifelse
  end
} def
%
/ci { % integral cosin from x to infty -> ci(x)=-Ci(x)+ln(x)+CEuler
  dup Ci neg exch abs ln add CEuler add
} def
%
/MaxIter 255 def
/func { coeff Derivation FuncValue } def
/func' { coeff Derivation 1 add FuncValue } def
/func'' { coeff Derivation 2 add FuncValue } def
%
/NewtonMehrfach {% the start value must be on top of the stack
  /Nx exch def 
  /Iter 0 def
  {
    /Iter Iter 1 add def
    Nx func /F exch def % f(Nx)
    F abs eps2 lt { exit } if
    Nx func' /FS exch def % f'(Nx) 
    FS 0 eq { /FS 1.0e-06 def } if
    Nx func'' /F2S exch def % f''(Nx)
    1.0 1.0 F F2S mul FS dup mul div sub div /J exch def
    J F mul FS div /Diff exch def 
    /Nx Nx Diff sub def
    Diff abs eps1 lt Iter MaxIter gt or { exit } if 
  } loop 
  Nx % the returned value ist the zero point
} def

/Steffensen {% the start value must be on top of the stack
  /y0 exch def % the start value
  /Iter 0 def   /MaxIter 200 def
  { pstack
    y0 func /F exch def
    F abs eps2 lt { exit } if
    y0 F sub /Phi exch def
    Phi func /F2 exch def
    F2 abs eps2 le { exit }{
      Phi y0 sub dup mul Phi F2 sub 2 Phi mul sub y0 add Div /Diff exch def
      y0 Diff sub /y0 exch def
      Diff abs eps1 le { exit } if
    } ifelse
    /Iter Iter 1 add def
    Iter MaxIter gt { exit } if
  } loop
  y0 28 mul % the returned value ist the zero point
  0  
  3 0 360 arc gsave 0 0 1 setrgbcolor fill grestore 1 setlinewidth stroke
} def 
%
/Horner {% x [coeff] must be on top of the stack
  aload length
  dup 2 add -1 roll
  exch 1 sub {
    dup 4 1 roll
    mul add exch
  } repeat
  pop % the y value is on top of the stack
} def
%
/FuncValue {% x [coeff] Derivation must be on top of the stack
  {
    aload 			% a0 a1 a2 ... a(n-1) [array]
    length                      % a0 a1 a2 ... a(n-1) n
    1 sub /grad exch def        % a0 a1 a2 ... a(n-1) 
    grad -1 1 {                 % for n=grad step -1 until 1
      /n exch def               % Laufvariable speichern
      n                         % a0 a1 a2 ... a(n-1) n
      mul                       % a0 a1 a2 ... a(n-1)*n 
      grad 1 add                % a0 a1 a2 ... a(n-1)*n grad+1 
      1 roll                    % an*na0 a1 a2 ... a(n-2)
    } for
    pop                         % loesche a0
    grad array astore           % [ a1 a2 ... a(n-2)]
  } repeat
  Horner
} def
%
/FindZeros { % dxN dxZ must be on top of the stack (x0..x1 the intervall) => []
  12 dict begin 
  /dxZ exch def /dxN exch def
  /pstZeros [] def 
  x0 dxZ x1 { % suche Nullstellen
    /xWert exch def
    xWert NewtonMehrfach 
    %xWert Steffensen 
    /xNull exch def 
    pstZeros aload length /Laenge exch def % now test if value is a new one
    Laenge 0 eq 
      { xNull 1 }
      { /newZero true def
        Laenge {
	  xNull sub abs dxN lt { /newZero false def } if
        } repeat
	pstZeros aload pop
        newZero { xNull Laenge 1 add } { Laenge } ifelse } ifelse
    array astore 
    /pstZeros exch def
  } for
  pstZeros  % the end array is now on the stack
  end
} def
%
/Simpson { % on stack must be a b M useXVal   --- simple version ---
% /SFunc must be defined 
  /useX ED  % for algebraic functions which uses f(x)
  /M ED /b ED /a ED
  /h b a sub M 2 mul div def
  /s1 0 def
  /s2 0 def
  1 1 M {
    /k exch def
    /xVal k 2 mul 1 sub h mul a add def
    /s1 s1 xVal useX { /x exch def } if SFunc add def
  } for
  1 1 M 1 sub {
    /k exch def
    /xVal k 2 mul h mul a add def
    /s2 s2 xVal useX { /x exch def } if SFunc add def
  } for
  /I a useX { /x exch def } if SFunc b useX { /x exch def } if SFunc add s1 4 mul add s2 2 mul add 3 div h mul def
} def
%
%
/LogGamma { 5 dict begin	% z on stack
  /z ED
  /sum 0 def
  /k 1 def
  {
    z k div dup 1 add ln sub dup
    abs eps8 lt { pop exit } if
    sum add /sum exch def
    /k k 1 add def
  } loop
  sum z ln sub CEuler z mul sub
  end 
} def
%
/ChebyshevT { 5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
     /k exch def
     xtmp xtmp mul 1 sub k exp
     xtmp n 2 k mul sub exp mul
     n 2 k mul MoverN mul
     add
  } for
  end
} def
%
/ChebyshevU {5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
    /k exch def
    xtmp xtmp mul 1 sub k exp
    xtmp n 2 k mul sub exp mul
    n 1 add 2 k mul 1 add MoverN mul
    add
  } for
  end
} def
%
/vasicek{           %density=sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  2 dict begin
  /pd where { pop }{ /pd 0.22 def } ifelse    % element of (0,1) probability of default of portfolio  
  /R2 where { pop }{ /R2 0.11 def } ifelse    % element of (0,1) R_Squared of portfolio
  dup                 % x   x
  norminv             % x   norminv(x)
  dup mul             % x   norminv(x)^2
  exch                % norminv(x)2   x
  norminv             % norminv(x)2   norminv(x)
  1 R2 sub sqrt mul   % norminv(x)2   sqrt(1-R2)*norminv(x)
  pd norminv sub      % norminv(x)2   sqrt(1-R2)*norminv(x)-norminv(pd)
  R2 sqrt div         % norminv(x)2   1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd))
  dup mul             % norminv(x)2  (1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  sub                 % norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  2 div               % 1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  ENeperian exch exp  % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  1 R2 sub            % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   1-R2
  R2 div              % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   (1-R2)/R2
  sqrt                % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   sqrt((1-R2)/R2)
  mul                 % sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  end
} def
%end{vasicek density}
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def
%
end

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E70EB3FFE65984ABE6A86792FF4DE619473EC5AF48825E4C87DAF38161758DE4
F5E65365F1997CDC6886A867EB8D4454AA899ECE4676D88F5D394EC66E7E3F29
A38E96B19394F4C9D7F9F6934B3D8EFC23400860FE5D283A981437DA886CCC00
07BD95BBF88379F413BE60C6CA25AE8C2655776177A1F2676225A2291CCC34B4
0D792399EF95781283E70978F788A80AC3CB19AB4DFFF39AE4D2918F2F1BA6CC
E58C533CE73BE753625DD6DDD8816291EE7725531B5FC98C4431CEF86BD83C5C
530FF9E9E77B6982EB4AF5EB38CBA85B58C47B56EF8238FE3F5C88DD7CC296A1
1ADF59C4919F63C78F9B7C2FA998F5BEFF8DFA754C9789DCD73BC1DF740F437D
F5F1B361E2AE938B0C66B3794C043AB6EB1898B8C9507A855F9181906D38260D
23CBFBC986268FE1EDA208C1B92F4183F72438CCC1953B78E7D9D431A1B5A04A
73AF4A83C3AA0D0486B75FE82E88EAA03F65077776C747047E341707F28C5A80
F4BD3C2C515EB5BE01853F7F1EA8A7D9E9700516FD02309FC1FFB29C800A6749
417B4A4E35527FB8826F7F17E5F5D5C98C960B3F7873A164E8CE2C7DD495DAED
FC651D4A939CCBFF875032E159EA05C7F81248FDE0B428EB05FDD26BEEDF3943
D11F3A1A67DB7096EFB1F419D84A061BF099B8FA36670B17429367406B8CE651
196D0884211D48DFB521FD1532611BB620B435C1F8C806B6F2B26C65BEB92B97
EE5D01D445F8F69CA4B90D34988C1C1AE72CE581E82E69F6F88D4AE8A2F23BD0
6ECB8B0516A6F95F40966FC9788DCC638666E9458B2AA416677F8CA940DA3730
F94BF1C6964AD6F4FAEE9F0B6F4A1C9C8FCDA78622A85D749FD63F8E7AAF0EA1
2F5D6E697F344957560EE1130D8664095CB0228A39EAE9A551D00BECD537CD5E
0BBDD255F9AC2808F4CE5DF958627961E9045B58D53E718D89741E0BC712FF68
C5092BE089745D761D2EA51BCD0B044D0F52ACD2F97BAF5BF8149D8D6F32D5F7
6872906CA3DBC95FA301B8B12DD098064C3BCE04556B6A6F2C1A5ED52D65C876
3AA7E453E8BB22FB9586A84A7EEBEB9AC312637F18CE4FBE109B625C9A52B3D8
AC1E8FC160E7EED22BAB3DD49D4B64D4EB625ABEB6BED8DD52787B6E53D53A3D
170218D4ABA1A9CD249C4D6BE413BB4DFB361479E54A539420F507BC3947DCBF
C9B9F81E9F06DA7BC9DBF8350951EBBEA7249D5696CA662DD5E4E73A40516CDD
C449CFB1929C5EA126DC6DE2F10523CD830BF3D97CA40278DDE260E90E13B227
C6B99A008B84C5BC6871254E6776C97D78D63B85270265C1F737F150E8404BBA
3BD550DE0467D10B04792D2E9E84FA4DD17E8E05615B4C4131B6B62C4370ABDB
3A766AE9E877FF83DADDD463BE58DF3F3025192A784B7BF293969F7B479226FA
D6F65D01304AAF9432288B5C09823CE73B858F4017210ABEAF89FEF7C9C573EB
06675712049984E9E97AC3C0EDFB9140DD5D8543F4A7520414E0DB2145BBD9AC
5E42E401401E8475FCFB7F3D846928DB5C3C0AB9BAADFC889F351074633FFF23
E844B29C49174CB77DA9080140DE392C253DA5B5FBF488067CD6D720B6D85FB8
4A54BDE47FFA22BA553DB4FC96FC35EC3376FDEB2DDB91D08AB5E2B64EF811BC
6AA06EB97CAE3BFEA10C933C5D487D12FEADF13CF94B4C0E792498D15D6B0CFE
14239F1FC924FD3CB5F151ABE043924C2DAD2F50BD04B9E57DB4CC3F8CB0DE0B
EE8D9B62D0807F81313702516EF6E85A2BB60BC2BDF240CED33E969F40C04F3D
A7CFD178EF5B192706643A217F7A9C0980EEF27FF33ACBEAE3C274570F864659
3D050B72BA0DDEA64316B1B2003BC8655489C7DBB4A75435F9E901F319FA6A90
0D7177E5B4F88B277DE35044B8C9769441D167138B8CD7624DC7011BF5B7AB72
9794474848B764737609C4927A85B88055EF9722CB1FCE47AB9DD868BFE9B883
4117F83FC7D715D3EBA347AD4B2F6D8F38BCB11F282CE16D79FE61B2C2AD6E60
33FEAA5616BC3C6080E0561E617372ABEF1CA8FF611510C5146C04D321DE34A7
C05AFECC872AAF4CCD1359E9C510CDBC31D948B0E2EF7BE2C62359EE753789C4
8A5811B830FBDB054345ECC10687C262FA0C76D08AB090AB6DF5C86082D09CB4
0A133651353EAA31D5CA228EA44278F69F2FC6A45E5901D7EE35B80F9ED57DF5
4E55A4B589AD749B1CA87AEDA4FE0673443CCA45008ABA9D067D1183D1C19B2E
38710C45AFCB1171E1A56BD847930233762217EB658B4193CC6E13B87084E4D7
43C3FA129F36B295D35147CCE07688E4F19C5A0B298537F8F7589DE70E4CF813
0E3B41FB0C32F6C693538916A6819642CF4D9F5D0D4EECDCA6D68F6EDC66EF96
1EA29D7151A51D7F8F9AF436206C95E3C63FBA36F016358753E3C802B3948C17
F57789EFFF63D1EA0E31917BA8E19DF4385AA52C06B38A0C358C621DB8B1B389
E0DD3BF9DD00092EB8B7F288CCFCF53D920D106461F6C78609412145E272C152
36E798BB456B2368AD694CB55B041CF968373BF2190AB10E422EDEC478164C7F
725096DEC84C57FA130C4FF48D7E2EB58F4361EA07A615D3B9669B4E8AFC1995
7E257EB6BBDFB9CA2FB6424E2853CB4D41A23C898FF168FA0B11F0649FECAAFF
9F3C007FB80C5E43042A516A349B3CC80B59BAF777340409585142FBDE4B1FC2
9FE911CC4F7D768271A99EC10E908712125529592B2B1E1FB3F674920CAE7490
CAC53F3305D68DE2DFAE9C6AE10C1F2808D8EC342CB9D066A04D5C277DE6CB29
E014070CC02658B7FF166C507B496211F827976E3E00E8ABE99393032EC54FE8
4D9E796207CB34CAA0757394C48C8F395000BBF0B9E335251B42323B5AD9B58A
E0FE6E70830901126104D7DB4918BCCF230539A2B3720F3ECF3524164BFB9C3A
681964CA96344B6CEAFB0B42A4FE7E8B6084AD68D68AC60D9ACBDBF6AED5D1AF
1CC46313D8F024F95D66E4AAF79C04681692F63F737447A8F4AF0BC5CEF5AF56
310A7AA895308557176324E3C77C92689C441E14DCEB09663E0EAFECC5C54058
88480951FCB41D485D10D29173C4117359589B0B72AD8B73095C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: SFSS1095
%!FontType1-1.0: SFSS1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecss1095, tcss1095, lass1095, lbss1095, lcss1095, rxss1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Sans Serif) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFSS1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-201 -321 1477 898}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839D875E6595524AE250B4BBCAAF88358
42414E09F7CD675ABDF96AF981110B63C2828AE397AB0AA97C0D36B4316AD714
87FF55BDD36ABB42613BAD3FAE0694C475D86E9E070C777B8A0E30A11C2B2FF9
FC63CFF9DFFA41BE0B97B741567C8D094A56CADF2C0312D7AE73FD1B0A32825A
9D284B11D225DBDBF36B22B7259B2368188D94E48FDE06B9765F0506A3591930
7003FB93745CB604ECF641423E6914B22F4438B899518565AF7FB18ECD248A9A
498B1344691D3A1C3FFC21C48C65A08206F5DAE61C8A5DCFCDC426F0E568F431
092FA359E319B476053EA5F160FABCB987F2B5CB0A3BA1C715596D2AB9947C60
579B980B09DF6E0979FE9608723811E9AE0AFD659308EF2AC9042B9600CBD293
A37F84667E7F3DFEE4CFE9D1A676A5728CAE9FF2FD6AC2E3D46EF000EEE19E10
EAD13C12B347F0C8F656C352CE9E25FD1DB2F1FB9965818541F694C65ADA45EB
805911EC74CECA83AD07803D129189FB1A09532349290F3B994839E260B4F8D7
84169359C4206458E198125D6D90557EAB5F57DF90D3A0322435898FD833873B
18ECAEE64FE29364E8B4204C39EFE2051A24CBEEFE58DA480FD74FD1FD86932A
FC4B969E2A5090480D95036E13BEC4562CE21073D35DE0DEE2C8224EEDF6CE40
9DE86D56344250AD374E336AC4F81F679E8AF6631BC115EBC4ADDBAD860AEC5A
110A46655238ED3FFE536E91DC86FDF892877CEE35E3371BB52FC754CDB848EC
4685E3BAE442108453E7659E3DC40386FD631C951F7BFB0D41CBFEDC645FE4BA
42888615BB8CDC97B40D88E8634AEA50366E0B7A51B6B1FA07AC3A0BC3AFF042
1F459D996A2875EC9CCB79F67B75E3505A11590CF98F73661EFE9566027306C7
86600CF0EFF2FE6BC4DA19DF5F562826CEA8A85C2F8420DB90071C839E07D088
EE8EE5AF8CBEA07ED92D5669FABED5C979A66B12AC17CD4241E7068524199B05
7DAA2492232623355EFED73AF0A20E27F57B03FE1B9315946BEA6E4224FE51C7
D95B148AC5F07DF40666780D14DE79D2D8C6A9E136E8C8FA66E3436B11979C9F
EA50AD68E7D0A3B2B9D9112FA4E69106EC5CFC2C021BE02C1A72F3620436EB77
5D20086824CD71666C718B0685DAA438B379B7920DD79156B0EBCB0D5ABB00DB
8953A529B05FED1E15F783A792C906A7250700ED5CE940444512C85BCFEFB853
36653098CB0025F8E449AA68EA8828FB7DC025FE4166C38B7DDA88E236CA6916
4AC1EEA774D4E491C235FC89C694F5BDA0BC4D5DBFC7B980FAB6AC77AF901113
11025913228B9AF937F9BCC7FE453C4054D0C92277F70BE7A54E790A8A3FDBF8
F1AC23B5410DFC768628E06077049949C2CA227704AB5A1CB71715548F786ED0
3DBC609F4FDAE5600BCFD7E258596999BAD68DC306B3C07408C7AAE52BBA3269
401E1A67DF1DB7F18287659B0A98762196B97E4C41EA1754A222802E54162EED
97434C34771107241DAC1CC3C79A0297F6D41D8FFB894BD68AD0BB35BF36A9CB
BBDD50EEA6F6FCEF0FA787F9B6E6F84EB5E19937C681626A87E271F7CFCFB622
38DC3A115D3F29F665C1F035C9E649899F69948EB7A00B5A38964AD9FC71490A
DD5883548581C8A83B7DE6AD8F3C7E4B3D887E37E407D055C19A7E1ECD23DEC4
0E626069BB3C44CAA1BB6D721284DF66C11CAAF2249F4CCF87C3D56B44779BD6
DC57DBCD792351662372E6AC1684D2C335448B9387B3EAC5F2D1A0ECC2707BEB
48FE99A221505D72EC87D4F0F1991BCFAAD5F22E8DDA1B8D66DD0728FD0D8236
E1A66BF0100681E72DEB346C605D5F8BBCF030CFB2DC8313F060F5CC88725F37
CD58C009D9B296B9201F559528B2F78DB6B7C59AB45310891C6104967DD9157E
3EF1CD22797B7D71DAE6A6EF1D23B50C2B37D2A49203C90749345D09C6AE3E80
A858147BAA36AE5BD3B37A2BAC8A56474AD40B815B4534271525E3678CC52F92
67B340F25066BFD5824E32D0FCA727506D0093E439119194010DB7DA78ACEA70
00319879DB080E9B6A3F3EB3E3186E61A732E925B763883DF07317AE144E4AF8
2559E876CEA6BC2152A52F5531BA7412D4F9C804F44409E7A796C965BE407C85
D3D3F78E713EF90BE637054099C139BFD6E56ACBBE12724660F56C75BEAD533D
5C68C6F43D68281086B9DDB21D604056A76988999D348A1A563DEB401571D506
413F019CF4B22AC7E358159447B6EE1479E4684B9FEFE17FA1A391F80ABE3C64
1A9BDC9C6F276C5A3ED6A7969DFE34921F428273679FE05B9E8434352707B1BA
6A284F47CA05F39276A370CB9F2475C88FC8148767A5C151EFBD3C135A85F1CA
9C7AA11F9C9682AEB720D5FAAB07863F845260D2DE64BCD8AC45374C54D922F5
9B1542EC8FE5549DAF7626FDEC1561421726CE6DFEE21E15FA60A198165D6103
ABD2EFE500BCA93E164AF5E65E9945C1442F303A6A1B1C21705F8B6AC6C253E9
1AB4533E0AE050076B69CF2F4852C673ECC627A067F3EBDBCDC7EB0C77411083
C2EB4CD575D5C89AE01EA6F2B9984D59F8B170CA2C60C50747B072A2F7E6D9C6
45DB2C64954FA8D1AD3C72744D2618007F48236DE883E2D93634978C08979407
171691644B359FF2E785631DAEF9BF9DFCB0E119125BBE95FA4F726703D3D574
FCAAA800D3D25D4F05F076C55FB467E2F3B936847E880C47CE31EB460468C6D0
6CCAFA0D72DC6F4ED70B0DD23E1C4CA17443725C517170C523E257BE63257273
B24DC0A9B2FDF841BAB042998B929D51B9B088BAE5A0115CCF971A5A7AC00997
A6B09D22B1725153A8338ED37F663D8A1857EC42C5963A22432C31A5EA1F66EA
DC3C4724C85F142BD19896E6977CAEC8DB98BF45FF6C7F954E9D3CC543608DEF
3A056165FD31272302B708CAC21ED7BD158382720F2C4FAD37B6DC6D77D0BDB0
6C90D3337BCD4720D28048010F60A9D44BF02CCB17746D0DE7FC2E0CE36F223F
E594F31770033D9C76403AAE6CCD6E54DB5E51C3ED80F954466752BF51B26195
76A07C8D30F73BE1F8FF2BAB87A742F92DDD0859869F6D89D9312AEF4C50F66B
95BBDE9D3B378395A3B34D5C76D32C491CDE2B42701E5A2EEE4EF4BFA24A77F4
4489624F7D704DC777D67E4FECFAC0914E1E65B374C48562A669387A49FD347A
F3BA4F8250E227FB0D6A947DCA58F1538BA5ED8C069127404EDFDF2D995F0949
3002485AAADBCE70EB2905C63428D248C9EBA4262DB036A543B27052C280D174
E3E4A0851EA03255B9ECFB39F9C436AACAF9BFF231546B6C20AFAD9B94D7D19D
DAE97E08179532AE10702A48C722EE4E1C0D54560A8432217301F3C0772DBD30
1003B76D3C7B5C89318F005BC288840D96586EABED6E1E460CBC2ECA045018B6
39B4A708A39CF240990C2BEC2E7B46F86C3BB16BEC02B6E8266DF98772497502
1FE4ED71E4B35A79A739343128AF48D89A52FED016E1C2A13B6B8B899E94D3BA
220365FC41230C033A5FBA960F55AEDD5B17DB055E4F3A8F0205DAB8816B14A3
BA5E41B5BA06E192A3DF281DBA7D07185C4CBCD98E4EA24E4DCE8530A662BA0F
E2DAE8B6CB3A8CAF71B5E476041ABAB38587EF918FAD8DCADBE15242DECA9711
B79D642FB117889F479A2D3726E733C044A87D0F9298FCB9C424707878633DF6
AA1F746B4F19A38CFE860FE1A8789DF247F1B35EB9C623D410939938B4FE9B70
03A1496CA2BD76BF861DCF2ECA6CFE2E2AD209A330CEA0DAF7C5B204EEB92825
6A022DFCD95BF8154784716463616218D2C840540C38EE09CB133786941D682A
B64F0AB4D5C24E0D009760C3F6F7442575753A6DC7638FECA128568AE91DEB4C
3F859B9D4B73980E9901715572A23E8347BF5B6F6AD366EEFB243FA21C801F71
4455E211E67517437C5BC655138672BC538EDAF1128614848792CB6781591BA2
EF6AFCECA423C805F0948949C189E625C7C8BAA7E140BCCDE6A4901EC2AB3E64
0EFDD3B35D8BD6C09F29C84849BCDDEA4F18F5BDEB1FA522F3617561FF8DE43E
D060DBE2D432AA0BD8623ECFAE376C716F18A21411C420772BCDC438FD296F71
08A923BC4439192C8F1040AE138A801146BFA125378C040CE759D2510F27032B
CF2016C1B9E84CB7B60209520914622B0389F68C68175B604519040D05501937
85E2127BB09AD889D6387F5DF8FBA51E499C44F822B076F8A3B9CC633139ED7B
FAD3CABD1ADD6AE3131FC9786647D584035A523CA990485EC652C6F2F2AE4F9C
70AEF0927B00F9FE941EAA80902E3BD33404D241E14CE86FB9F925CEE889E3AF
68F36BC4ADF81328A8C1A603C70C8A72B15CFF9D1820E68CC90B25AD79C03132
1F59C0127D85435A62264030ADADFE6B092C74590F0038A91814B12088F52BC4
EB7DBB4C4178A29B593E6764694F4F43DFD9CA98FADAE7294CC29F9AE6D977A3
39E5BFFEA556E9162C0F34A122D79C8EB0E5F425C51EEE7F3A13DF5E22169DBC
3A57FF86EEB631104E470FFCFFC970874407DD3064C65218664476D32E6D8DE7
2CBDC1D88E8636821479322A29DB6A06A99D34300976287E373F5556618BD1E1
0A52F2744E3BC07E0087418A799AE5E8FEAA8D4CD1A1F6E0DF4814EF7F439A96
ACC0379E64E3F0DBCCAE27A9CA54C677132FD4C5CB85F848B03DFEE967A567DC
7C4A16D1935B17E0AED701C039C111B821C42DF8F2762BB91DBCEECD8E638969
7FFBE5E2369EE765065F07BE89E0881584045E4AA5814897382EE0073DF15B5C
FAEA8A08D3AACE818BFCD4095498FAF5E9129EA14BA8FBEDDFD071262901425A
571256490025E312775BAED77B03F0A58998BF5AC597FB3680EC051E875EABBC
9039068976B26AAB48DED8C3241F0F85CD2E4C2ACBD6A361AC8026558DC3FDD7
744553ECE439CBF8178126E4FA8ABB03A4531335DB9ECEB4B1871880BF5E2B29
81406E5943A4F1D6DD0F02DC5120E7034E1FD6DC21B13593FE6A5DA1DF724402
2CCB56DA6772F746778AADA0979B620F84259EED300A85F180F7D92EF581C3FF
620FD9DDBF7C4C47A35C914610E5A8277A669A201DA419820E0685ABB3E2B005
86F0EF584652EDF28E703AF9D48DCDFC0215AF317E848D429ADEBC3644AD45C9
39308C5510808480E694FDF3ADEE2381E5F6CB5689F1A9FFB71AA4560DA97198
4B2F9C34D68B012A045FF72D5E231ACAE4E12B03013D7B9BFE305B9AA2365D49
E502F7D48121F5EDA252F0C02D7983F208F085D02D4753F758128E2C348C00AD
5B01C1AFE4B1CD5ABAD43EAE696FD1F5ED62AFD991B8C6FDF9FE1DDB1815D29E
4A32925A7F5AF4CDBB5AF4AA4F83D3E585ADDEFF75D9D47BC014ECDED22B5288
06F4D4A9D6AE60282D97FF314F27F38B70C87E5E0C3FA60EB9A37784E071411A
CA7D8C2355ACCF51B2F570EC34BBA052170AB42F95F9386E707290C071F8CB54
C27AE2CB7BCF068CEFC3DC43945208956412EFE0C12ECFC8F1521BD155181FED
2B7B34262CD2F43A07B88D9FAF06F8D889AF6148B60BCC727F96C792F4C74A58
5A0EC8237CE52286E6F7088A3D2C930B87451DA8A1DF363920AE7C7DF08A5810
9179B15292027209A25CB68EBF9A9ABA473C731F10DC6F8BC76EF77C6E7791C7
D9B5413AE6E0F6D34B98E9F793E6C86ECA54144F811B617120ECE5A3997AC78F
4EF709E951E6E688F73F57C77E51E1E4CE2F3517CEA2FBB3EE7D8E614A4F65BF
1A71E94AFD47A70A2E1317354FB80A84B36F75AFC9E992AC72D108AEC784AFFF
CC65011882B7684FEE7FBDC8A428B15198031ABA3E686EC2CBEFCE0C191E92CB
BC6408A9C82705975CE72073D73878ABF61030B5A9733F6B250D9DFD1581F0E5
8182B13D93E84422B61921D197F75ADF310542C1039ED2627058B0866B61923B
778DC73E5D8B037CD1583D9E61B4DA5B1CB833297A176E3E2D24DDE23B33CCB7
B380A6FAC9A2EA4F990890CEF7588EFC8EC3B4CFD2992998F6B9230D2A0CD12D
69FB113BA1CE195F9BC4E9E9942DDA80355E49A94E42A1D87C48D9EBA6DDEF30
EEDC40EA140CDEC195884677488AADC3751ABCE481285CC01BBB314339A66D07
AD72BCC90309F63FC3832F71E50219B844A303BA7AD6F515BA24676339D2F095
D3FC3082F8CE1BA6B916B884A2E2DF2CDCE722264D2DD16793525C3596EDD6E9
74181F3E525875314DF71DFAFD5BE64451F29C31BD529BC9D495C8202E4D3CAD
A56A45413C4FA279E758F20071E3A439D0BF2D1788019A7CF6F4DB1D80F66A13
E86B686A2DB4CC937F0597693B20BC5258423F300E8547E89CC1305E9D47C743
C7AB0E89195463C35BAF0768CA9F8A3AB3321C9FE528F3C88DA1AC2EB8DF53CA
3EBA6328E53CBC575C96C28259232636239BFCE5E12DF0876B03D446EBA8C68A
1C76B8A0EDE43A1CE632A9134E4735863644E0B7B8CB2F80D31825D18ABE5040
41666F09C8F8398A4819834071EAC1559A345A184FF8283F752764C45EFFAB41
30E61EEEDA3DFF2E9F240F2641D8CAB22E00B1CC120A64C829084A2FB0777AC4
7E3E02CFEC9EA4E5E056BBD61A36351CFA99DB19267CE6484AF6EECDD7F6D9F9
1E7CFB5D2C397F9349E3AD8C20D8D9ADA30F2718324EFDBE82D2DE0F80899220
2CCF81D370EA7C0FD58BE26DC9F3D418B7DAE402F493E2F216A079C13C76BDB9
A5B859FCBF2E612499B1FD175755ED672FE5E689F59BBDE3BC4B083F270378D8
17B98ADD11874EE92CADAE26955C7510EA319E90E379AEF23D64DD5218F8DFFB
6670BDBD78D33E55BB557C491E30D11813801BFDFE3A50CAE3E3603BFBFA8E3B
F736363D15A6F51B0FDBE6859E9DD7C64F95217A0845449636798336F7354F09
84D612DBB455D0657BEE5973B49904983D163710FD88E772B497B7530769FCBE
0A5F66F1D4DBC0EAF834D2D2965B9D8C5F424594CCC6E244C61B96A63AF8E396
4F70CB63321D993DF752B5FFF5105BD3385DE4DE26A59813825D8E1D71BE0C40
D079D654E76411949786C2F6D96B8F49D35E461F0B188C8F3623C3C162F116D2
5BBFD167F825B3B984A1A30D94D51640E3F97993626FE71D3AF1B1902A8634AC
0E2540839FAE6F191ADA61A25C0272C7D47439F7D53FA252386B7E2B852D6CB5
B19AF6D55153B5AC761963B9FDF740E1853D4FF06C2C995F09493002485AAADB
CE70EB2906F2124583E203A8A2DA7B07E9148FD403D196D4EE41CBB53D533B33
7A1CCC9FFFBCC769DC0810BC0412FF1AEFEE1F9903195EAE660812D6A78950B9
2F7579132B9C12CB0E0180FE7E392162ED08B429D50DD54B6E65F73A99433888
A3FFD76EF7C273DB1BE1C5399C5061A5137BB4EC002B9159F6EAE77BB0625861
12DFC8F08D7FA9A4C21B389F4269201FB0ADE8AF9C4E3974835F6DD1A7BB0BCE
5A5228776CA6F797F91D8ED3E30004219A12570BC0441E063459A95A384051BD
D4EFD522CFCF267A5A48749587A48B07514C4C577AACC7B6565CFABAD81AE381
9BC361CFF0CF112256778B0EDF7CE218FC01910C4FAE03B50588E9EEC46E9AB8
FA9A5FA2251358C0A49C285C168DF1F6355DBCCFF4D70B43B0D34777D170971C
0E540D537238F67D002C20EAFB8A0CBC0119E6711BA65246ADEC1546E1486024
CEA69F907C93BB608A6358CE1B906F678C78056BFCDAB3C430B0E552076AC10C
C6DA5CF0DA1170FE1A16382DEAF3CB73E3AC7A290AB3E386723DCCA9DBBA03D2
14A8C1A7FED261579C2C59286DC3CE23556BDA8B2C0BA7668D770904D9F2107E
0C901294D960A5E3FB1F54474C2A9527631BF2BB54874F6206780CCDF8104B85
6328CC184145A28F6B05098787D96D89D8772406DCC83B2AC33643804E789DDA
75E0B98F0EDCBF3EC0756C9F6C608B6E3EE05EC3C51AFFC96C2B2FF23E464EEA
52BAC2E5737474C40AB89251CC3227774CC20D0F8EF22CB41923257203116B01
60FFA5A9FCD23DF9DAA06B2DEE25D2EA1844466C7AE7537945535EC08197FB5B
09C7826494441B90185327270A05BD1C3DD1B766C5815698912B84656F5690DE
18A477F2DAD4417254F353F71B24CD52AD1B1D89E5835B0DD4BA0C4F2778AA4A
0EB5F9E4BFE3B43605F4D59C9E497551B7324751F5E3B2AAFD32A72BB190D254
9837A5AD938A6A10BCB91F157AB6EF03905C09DF3782F0A1B69CE8FD6E2ECC72
CA2D5396BD982447922072126C498D64E7209D5CAF060C7937524789E68361DD
C0CEECC5A6CBAF5223591B38C40C1D18D9E74A68FEE5FE0CFEFE3AD924DC9703
0DFC5ECA74EAA9530F278255665E4093F98C7E5EEDDB64B10DCF1BBDBD14877E
CD01B398680F70EF36C3E406C33C037B51DC5267C06B6F5B901F2547C6A9ABE3
9577C0107889C39E3FF0D8830E901BD171838E564A9DA36BDA2CDB31EC1EC79B
AE9EBFE42F0A95B62164BA318462691E7324E788685B9321172307FBB67F546C
1D4B98BE2815F6DABBD281A8CEABE9AD26CA686BB813865BF0135F88489E26BE
2F2EA07E391FCC4EBCC92A6739DDE722AF535EB262494C2ECB5A4CCCC12849C4
D34A37BF405DD6FD94EBFC67F53E41FBE4378EC7C3AA8D9E2F6486BA2AA50692
F7CD08AA4CE1E39B435F9ACC38850D0DC5B407F09B825450490F9E3F752ECC92
C427C9B122D770822813275C39C3E3356C44008826CEE95503217E7E62AC1FE2
C5EBDE08A406689FDE06BDDD566495D7F96AF094BB30AA4ED071E63FED80D8B7
04C68104477D16157AC6DE37663CBC9C9D63634D4F34FF7A163DA0A54CC669F1
6D0BE27687AEAF394C6FF9CE513D0310AFE8132ED9C685CAD58B1521187BBBD5
22006B0B41A47F5CCBF3C4FBA0801BF8FFE06220DE9721A22CEF9E031C95E209
EF563EA4B786B1317280CED7BB444820E590E3ADC4130B48D86EF376DCEFD70C
02A9F65F5349E9B6C5596103DDE693B801E16E016D5FF0F02AE2A047E72A6885
A64A7CE7D7B119E3AAF55B521095AC569CDCEAD00D1F7FA9F0C639D80711898C
C01B4B09C6BF437D9ED0483681575555F69134E00E31450106578EBAB2C2FA3C
F6F0E0E30006F21C40FD6CDA2A129AD99264C093F4AFDC60EA85EC857B2E25B2
3BCE1DE2A8EEDFAEBF692A49B7609F3F4908A3E75F27A0BE4E187AFE3952CF73
0328A2D4603CCC8E110057009FBB145493D94CD456D1EBEBCF8A70F73554CC69
25CEADC40B3C141C28D61EF41E5A13BC7E294C0C2EC3FE0904EE9955094D3790
64005746E7F87329372A4B2F7C2C2F69A09EE5AC4E04895DF3E2D8498A14F733
ED197181FCA4A1642254915B29EF6797586EFA4787660E3D18B0ECA22B5EE31B
9205B57ED5BCA0C647A28C875743AF36252403789777F942FAE3AF5B31CEDF7C
D73A0F0370DE609B9A477DD112FFA16A725DE029A9A00AE1E3D94EF208D21057
57FDE4DFF29DE2749F5055E9A0815204BD72B3A19B6406F51A6E814047F29D36
79F89B23E8765BBA70899C8E1DE15336EE96DF6E007EF0A419CD8FAC721BAA0D
CF82AEC37C92AC3820A3F0E69386BC2582B68DBEF5BFB7169CFCF4FD2CB4D61E
8CF7E9032ABA1D8E47386DA518BADBAE4FAC706594DEF4CCB7EB55C66C1D35CD
CF4981A827DAB8A1D890E39C2FF5BAC01DB7DA166E3AC03D2C7D117477B37053
68F312B28A02DDEFF9567C8E3997A5869410972A29C762DD3567FE55427FBD96
D367EE8C99DEB419D6BA89778833D1CF0C81BE78963DCF1C4F779DAB780D3277
57D833BD5A18BC8A3FB6F2F8B689CFC56FB2AA999667FD6F1E0920FA25A537AD
00BCE7F1230F3DC47591933738DACF8D7A223125725476FA51262DF436AC13D6
24F2C18AB028117975E4D6C057EC8CC6A11952C471E4A6337104E96C0443D9F3
AA4AEFC7D80EFEFCB23648C3B7CF5EFDBB7329E197C3F6B71D62F925E6E5E8C2
6DFC8D8B2258BACDBD74D4C5DF4F922FF527A140B3DCA790CADFCAE396167883
544C5EF15915569A5B21C27F30F05C1271561BF6EE26FFB6611A397C9670C937
771BC65396A0841BE95B0B774A2D7F0690615C0B3F9FE8EA0BA28D2D3467236B
8DD849F941A8F3FB84E00D189AE83855DC1DF44EB861EF02B9BAEB355350F889
CBB987F24477AB7D2EF5EE092FE21193D146C41FB07273556ECB3871730BE4E2
6B68C1517B659E9827BAC29B02906CF842BA950FB946665707CE509DB3B6427A
BF01D9D8C5784EE61B746330
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM1095
%!FontType1-1.0: SFRM1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm1095, tcrm1095, larm1095, lbrm1095, lcrm1095, rxrm1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-188 -320 1445 942}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839DFD4B92DF0482493852D12053A7904
BF6E144B9488970F220C299E80886366662C1276120E72472BF84082B9EEC729
F7007ECDC5A850C88810EA679DABE81714004E65D938DA9ABDF29C949A52EF02
EDA8451563235D51286E9133FFC7A27067DF0332ED614AC2D4FAB88EC84E6CB9
FAB41C933E84B88097BA8742BC30A81416D1CAA3545F08E2554B28362B99B79E
FC42281922B94604AABAF5F7A9B8E2D9A4358F38F2382EF9544B859D098DF243
034CC475CEDEBF0EDD0A60C907127BB32F7D85A62A44E90B4056D9B4B2FF3A49
786032C6B25794E2C0003C7852C6B0688351FBFC43300FB0B72880BB7B58BB61
3D1064E7D4DDB128A9B38EF7510B7E5F82BDE39489E2D1DF08816781B13836E4
89390F84577F31776FE43A5F94F817A4AA4A698AA4AE84B178FCB65F1B5A5CE1
334417595F6E40849041565BAA497F6E4B8F4305D849128C9A26A98B909EABE9
8F2659189ED27C588ADC7C744712B4D9AD0C5DD25D1233E979DE7F53C5F1C47C
E9DF254086E5EC70EBC6B7E080060BA72F15E6BB75C75011B15B7ABB6BF761DD
428FF1BD688938C75BEABA7DEE2AF49364D2E198FDC7F8FA2313BBE598ED3703
7ECAAA4670BE3A85C693ACA829A5936778BCDCDB38A5981D4CAC8994E2B2F086
26D8793AC1393D49A8F2FE391F0EF8899A7720697B908266F619EAB1AE084905
36AD29AC3992BD3D77682CA8EEC0A297C9D4F167F3D6FE94EE31C80742E74DB2
0331C9E1C649D036DA3B081DEEF6D171EFCA22A3A0D668EE3121032D3A55BDD0
2AEB87D439107FB3778AB0EC59689768D3EC943D49A8EADC779F610C3087689C
19E649571778AF3905B73C16EAED4E185C873186862E2B848A6F7FF06FD50FB9
A3250B8A6B0782FF750829F55C0655D4D6FC707E24F5CE10B99E14ACD4566001
6B380CE26B9807513FDD928653CBC3FF333C089C557483220716BECF3B38AA5D
0433AFF5A5CF19043C6EC4A49FAAAB10ECDA541E143ACCD729EE49779466D11D
A94FAB52C297569731F5BF3AD2FB94AFFB60B4E1CCB4595B2318D48BCFA55780
E205ED971C0B1BEC306E18139ADBC5AEDC2AF74042342682277EB1B742E28AD9
B0FB51CD6B4FE3335061CE19C71F2DB1522B4416AA366749D499C12682855A9F
9578800DACC9F47162A8E34FEF7DE05B2BDE24EA45C5521A5C45F278AAF56607
E60872B457F2CEDFD642D6219188350856B1F6E45AB8FE20E1807771A2C8C78E
E350D342AEA003CAE47966EE4B6A33DC92C67D9A78529F835ED70B702152DC52
D908138FFEC4801C85C09FDED112B93EF7E68F06BDCC9711D7D6033B728F9136
95F1A2F4DAF08E7CEBCC6FDC810CB54204E22C49F0317379E6B45FAF5ED8A878
735E97A895F9E3481F20137FAA0B7567E02484E7635EBF14C12720025A582564
C9931DB46E01BDC256801F25694819EA9FDB956CACD1C1D18C1B6137CF5B6869
90B9D2D6E80D8D0C3C799CA40AC41C3C5F811C274F42A9F8CC178C0EF4F2964C
F5715B61599E93DFD7C12716E8C9F9526133FFB284ED0F0B6DC0ED0C743C70EA
2AE33E791BFB54C61ACC54F273399DD819E013A3D943F55A6424FD038BFD50A4
21B796CB75AFCF6E99EDA8946B78E05E891195361D05DD7726AC8204E2C98C9F
658F1C765E754609D7266EE4E6568B22D805B0186E12B9BB75AFFBEEB315F719
5F1E1FFFB8B1FE4CEBE7C9F250F58B07189B323083B4A20D995CC1D43CC2A8CB
1B958DA526DB2AE050183B69F77A375F56488A9621814FE131604F34AC303669
653C6823FBD4D1517A9A36ACE7B2E2E2213C0C65EED4B73DA07FBD5774AAFB20
AC43C596E74B0F52B7C9720E9ED02B5C5C087AE4BE33F428F3231E4491254E60
B1A29B3D1612CCAE572B540B3D0A89652067A4EAC0BBB5432B32EED6A0425C6C
FD94B09A7A018A70BC3E35C62F5FA085F3158D7F16A563705D4D9324C5DCA1C1
0321DDCA88B03E179D01C3B303C6856735D904397FA5BA912510AC23802A803D
37EA5AB43AD5580EAE6F3FD0145DD75587C6ECAE796448BE5F0F0CE29AD1F7AC
75BA998117B9086A9D333D0ABD28289B40162534E82750938543066F7E02555C
B05210953D6F2D725214730B3AB6349BE5D19D001349061E86F85E90258AC673
DC13BCE896FAC45D08EBE43E676816DBCFC51C446F7FDCCE431FD5A12CAD1DBB
96D1A8E20B38F642D54197C26130F4E1DAEF0B58644849DC7A72C8CDFB2C2611
2D44D432004DA354352C5F6503160BDBCEEE48C1BBAD05D25A7FB16C84D37A6D
2737293961F1AC4E279EEA4D1D24096A0425C6DADE08FD62A27C1CC846D0058E
66878900B1E50D2FA8AB9C41181A1A47EA56AEF82EA728C9F1CB6735D3C2DABF
78302C855CE770E467F0CB8B33D8D658790579E35795F2C732FC2DB9F8C32D71
9CE9EA23D6CD70137F2EF8F72D3E8816A8F34CB964E0B433796A0C71EDBC4D85
3E423930737AC10191DA7068F475601B8F6E4CE489E77FC9675775DD67F8D298
CBB07147C0882B362EF0098AE31F54AB0CCA5E27B13F886D3D05FB72DC6E795E
5FB381BDEA1930CB142C067CDDEEC944A5E526B90754076D65FD58E0F746526E
6800FD7FBBD0EC61859FD0A3946680DC67D2AB59F81595312D0F370C82E423AB
5B76D15B58FC6987F1D673BE010D7C43C6550FE056156172131FC7BDA5A03B51
01B2E5F2FCEA2F63E60527110211261CFA9C98F53DB52D4B86E00C8E8B145BC7
731990A643FA3A2F0E019E03AB3AE2656DFD426A85C5EE149F191CA800EF6358
DC8551944C29F068B159C0F505BE626F116CF8A31CB87FF36AA9AEAF76305959
2BDFE03558D34A16744457EC281AB2AC300B4AF946AC88E1A25BACB9C1A395C0
732892DA03EF8251B1BE7AE04C0CA35184E376C8B806188E91B363FA5C127881
D6FA95BF8D915F9527DC7B8E6F61A81A84D4775A064259788D78796DD33BF109
DA0CA1A99EFBBF8103F8C0D0E719A413FEACF2DC45FD9A110CEADA4596B2AAE6
E8D3BF41EED24401A9458D10A5C0052A43547AFBF3A84C5F9174B2FB78175778
69133C098F0B4B8231C75C10B18CDAE2EFF64FD420C9D2D361E0BCBD54C5470E
28D9A3BD0B2EA77BE6BE80F7CC7EFDC635611ACD4D4FFC38264C602D0D1E1BC8
7A7B37139FF3B1B7F309F65E975C66F710613A860B1363725950F117AA4582C7
437294C927613E298BA7A3A1C0D2E74F6694ADEFBD2DFF9662CE995611CDF363
1E7EFAB41BD233860FE0B611D79BBE29C0DCA6AE39B25C51257F7D18B6A27B44
5F83F39366C83113CD862AAE2F566C12B1D92695AFDB240DC22B6DC317A4EB87
A92835161C410CAC8712293A0E037A8818EB48360EF2B90F91C15753F2BDFC66
C696F659C56314A2934DF9490CF22C62B3CC85F9194B302D289A4033E5D34B54
D55031C4B93A4916EDE14AD9F2C011C7F4E79A96ACC0379E64E4A46D8114B7EF
03927ADD585F2DA9A240633BBE9441371FE51EA392E8B5C55D9F5B2C2A11F8EA
83238F90FC1B581A05B27B4AADE645D8EE0D136D506B1C3CC927663E4309B7A4
03C8A7A52B6F61BB07C99A752D3D6516190CDEE6AC380DBCB7C2B6B0B8E51407
041BFCC4831A048ACA4E3E340A55A5EAD6FB911EF98C554E5BD4656A6FA42F30
10A2D8FC1A12A17F3471BF9F21B73A951B8729EE19E0F3119A17E12595AE4773
0F34A2B18A4FBE305BF41F79623F178464CCC0D649F16E24387E050DC15E2B88
26E752C197F86302501713877F20C9971B8B22BF6C20D5089A46B2F166C40BB1
E765F07060235145CED0B787F7605CB4338A6294FDFF0A4DF05BF62F7D45093F
6F2B2934007B5394E53588595982D7A6A483EE637A8537596710EBCACA1431B0
1F8F5673B4E6C9238C06232DB2516F3FE354D7D90B037A7B3AE20F16B869652A
C4AA429B530887A44765D3BCC02C67E435D94330565C7C1447CAE7EA802421E5
DC01B8DEAD9BB040C9532BFADCB7E3E6F13DD4617C9DDC0E3C60AB50103F49DD
7BD01F6292FCECA728E0F9A0BF651E7E8E6251748D3A5C51627772F11B7D2BDA
0DC5983673A80D0C510FB38D3886AC58745A4CB816E6C4E63F5662C78C2D2697
BE017F0AAFD64EA6EB8BBA3AEED7A89EE3513704DA2B3C64D1161E1E6DD05759
EBD859CB9B1E4B540F38E107A2EE20ECCDDD6F4DFBCC8A504273FDD95DAEB43E
C360EC2A05BA730AFFDB80FFA13B596A53F8C48F9601372F5D0E95D7FDF91A19
95B15D0A11538274C0D8C990211592D6EE145F6845F1BED0EEA915C8E476DA4B
7C3E2B8D1C5C69BD5ECC860AED6788940C2E931E5286C777E3721D85508E159F
2B9C855153658CBFD9976419943DFDE42BA1351FA42925AA98E50C3DDA1776C1
45DE69B3911EEDC257F409F72968773F78378CA104CC80E9232260A40CA9D334
222486C7F8848E91B6EB93F3C2E66BCB38289197BA059584785C1D994D34B8A7
1C3EAEC0F91A391B805309988F951DE2FA1CB50DF0B0179FF112333E187B7DAC
B165BDFF0FAC337A4EE5A952514C3C8FFB77803CFD7592DAF39988AE6A8225F4
F3B7030EF79356A78F61A5425FC91FC0825C4847FB18E9532BA41B8BE616F84C
59DF77F8A238D3B533F5D9B9600F500D0BFE904707A0AA0A5480D5469F07521A
66033DF06A0282285E5F2B3F2D460067CEF5E3D8D9FCF6A95922F681EE945A44
E3EA41FE773A20AF59E3AF7A3935196DBF3C97A7AB8DE0B44CEA85079A72ABF8
0A8A2F6913A991362F29E2FFFDFB8C5B142CCA016F4C39FAA53E01024931731A
9A43288473740C94A6DC104D71240B516B05412C427DC7C43DFEA873FA4F3241
FE1B85DCCDC6D14D39908498ABAD5470018A3C870BF930B0A0DAE697F7F39CDA
0A81926F6CC13C06724E1674B15A30269D428F2277E15C87F120799F3350AE5D
DB7450C0CAD8607D624EBEFF3CE8EA56D72B5DB6526E7ED3DB67028B96B1B066
0663FAE2E26DC36BCA2D36CA7EA16B5ECE1B27E19A5A755A8EFDD7CDC6D14D39
908498ABAD5470018A3C865AD2C9860BF66837DE0C4A5A5E0722F1441E3E4B8F
BCBC19D7E32DA35722C36EB21755A1E913CC7032892FB4AFEEDB9891A765383B
1793A5EF36CE4BA6B7078D6097DDE6D4E398F015DCA2A94B5A8BCBD4A5C091A5
13852FAE23AC16CF82CA3579BB60740772A795BF8627ED4A4E734A907ADFA1F1
89B53A91CA1E4D20668DAC7EF349CC39D39A2E98D6F0B4A3207812AB6A1C609C
8D47E1834E362C74BEF868651E4459E3A12252516F1A7C85B8C0CB5381E259D6
C088333D5BB7563C850C326082CA134FBD216D3ECEB2C493A28359F3CFA2A4C9
55DF1D96F5D2CFDEAE9C761A91E9C8B00B76112D1D27E927F361E7D1D9AD1755
A171630EA0D1DA71F5CF28429E81C5E2891E5D1C4CF84B48AD9D3860755C7125
E8C5102CDC644D4CCB2DC201B64796F9E05213BDD04CA6B4FD314B98361147D5
B2933ED4021E1A53846346846C7DEA56C229DA64D5CAD958C77A194EB2B1BFD0
9E074247A41AEB55EC17EBF96D1736CC0449F62493707EFC1F0CF0BFC0D0DDE1
A1282AF47B546EE19906B39DF0F8E92B8BFC34FB45719B39530580E520FAC9FF
A982CA0C32C5817C8967FB90B0C3891A934D8D271052CE1F54261D72A456DBD9
A6BD66517A4968B385BDE9A7C5D81A376F69A88AEFB3EE1602BE2A1AB9E9C384
AD82DEE1B8090D43C176CD415C21FBB51C965BCF2B6B8A894D4370A5CFF7D912
3A70DBDC1A514D455C89DDE92F1DB6FF6FFF81516990B85B5F11E528E623D352
6457B108B1B05ED7F3EBD4C0CCBA56A15C978EABE636D4619D8880F1CA91C1E3
296AAF354359B2334B6D0117240CE8720999D6E0536B1D953CB0EDF31F455083
62B74F7483FACFAD90281BA5F0A8699AA6FD5E42D9D3CB5B6609169D3B1D3F60
A2FAED36112D021999683525D02165FC1B9C2CB05DA5AF20B551159F13B93D9B
5678978718CD9810FE2ED0CFD64287638856DEF195AE662DDA625BB3315A4FCD
68E10338FABC83A1894CC2505D0792EE24D950ACC3DC7A42531D96010EEB9E7B
32CFC272BE2AA5F22758BBC87D4ED5F11C4B36E9D2657C39F4245041397A2C44
9226E3051FE222C96BA992F2ECDBD150F926A72A8A74DF4793CD6DFF639284D4
A9C81FBF3D4D3ED20D7AFACFF48112F034EBE295E6B2B40C7840BAC6A6D11FEF
06B834AF4A5C4CB2B3CDA7F04B18D615EFFD0E5CE0540305ACEAABA4B35EBC71
E41804FE8920886F18E7DA657104FC14AFCE671A239BB45E96E0EE3EE6FB5490
140C6E7B4CEBF2B60B014CDA35ABE00637FE2702BF89936C68A836D8F3FB9FE9
BB36CC051D2E8086CD4BA67AE9B8A56104FCB79427E03AC1C207015A62221E2C
BE587B20DFFE8BB7708AF53B123F4C64EDBD899A12C1E07D762F306D1B4BA7FD
5A42D030D5624B8098C9D0B5849100081C5CC0BA465412B2167EC37CB69BE788
ACA9B0683F0D9E3527FD846D44720EFC9136137E834E004043DC9037B625F67F
3190258A8D370AFF718EF791C59BB8C7B93C0E77B32B4863BDEA9F478D4FA38A
3EA07A18D089639078A1E185B1A28CD4CBF1AB16ACE276C6EC7D7E6A56FA4F21
287FAEA2FB22ADDC2F49417F166C17446366201B2B08F12C7A5ACB411655D3D6
ECC9CD08F15DEFD3D410330FA1D3F4E74933EBFB940869A8EEF0F4130A40AF86
193413695546687E7A916939CCD8052AA534C5BBDBA306AA63D061A1454568CE
47A143449AC4D40A3030DFA6A86E554A2C80D547CA1DB554AC725F8AD1FE1C0A
F9FB7E078337C67400E0FBBEDB34B6AC1E4520E251AC0AD371AF1987D9AE31AA
EDE320A055902EF979D74A4371EE98321437608A09A90C66EE0E93BD8EA877F9
730F5366409306790C4EABD0FF7A7D07B9A5BED35DEE30BC9A163BEAEB09C564
CB630DCCE324DBD53661BF5F5E18C430D828A7C16A81002AE7A202A4025C6218
287448AB53EECAD354A03776E3183B11962A40F23501866DDBB2E9D6B78C62CD
0A2F580DA299D19740758FD5FB4DAC1B7C75ED7CA325F98155AD174D38A43354
62E6E084CDAA2C5668DE61906A2CCE0DBB636207F5118ED71D4E4DC06C800A6A
57388B390968AAE3E6E67D911D534980609A3B65832BEF101B97738A68C58679
596689E43E5671740DEF45A15736561BBE62960BA1C771FD477D0952BB0D828B
F269ECC91F67D7F2EB36CD271CCD7C9DC18885692594947F005D597DA8D33C58
3E9784E90BCF3D6C9121A21CB95A499ECF13E311E51AB78E40DB097598F65DF3
6FD0B8FCB635C4E8171EA9A597EE59FB37107BE00E1DB009185670764ACD56B6
D724F4A403284E85962559244A1FD38986519AB3C5C92A7C28E1AC8FD34EE6F5
0EAF0F329905DA0E15E6784B16D47FA8AE1A93141DEF3E4520AA121FA9770F8C
E42B5A46699A0F1FDB4ACB39837C45D686FD147F9DFD5D596C372353595E1DCC
325C77216B564458322ED1CB601CDC9709C8F76AF00FD9FC75BB5851DBABCF75
BB4EAF0307A2CE25D07D43986E6243AE858448C1F033C9B98636EF5DCBFFE8F2
DB95A735FC834565AE45F8FFCD36EED1C09E800899AD675D0867ABFB78EEE537
7E8541489FB39B9681715FA7A75C14B685E2004635A712B0CF6DFF8AD9925D38
3FD83D481291F24C6093A63DCC7E9DCB4E021603C7E52245A6FAA19D751C18E5
AC30EAC348FEC738F2A21679276DA48F633E1CF01C54A7BAD4ADDCC47A108C50
5EB38E048D94DA58641488853D075E56FED4D2A848F95A8E6DFD583D32B9D939
1F0BC631AB8362F78A93B8E84515C78B305E53B4516B846788828D97DCFDE721
6B60BD8E8DE59349F07C18994FF417C57B5D4A72AD9C01725DFCFC05F53B4C43
8C713EB362A122FE90CE8EF37B9C73FA6938B6EAC06AAE955F8A304DC16EF1A0
2362BFB2B2ADFB880CEBB8C185CE74BD431A832B4B24C4E32C3021EF52916627
49FDFF8AC3C800398534B47160DB99A579EC88E8BBCFF6CDA23F454A8446815D
212539DF21270410FB4B643B69ED7D8F45E68F2A60A8438316AD9323100BB6E1
554051AC3CCB3B6C359E06B0A563EECF124D1242B412C389229A2C1DCAE2B9E9
A4905A34EED26B3A0F91A94E3533269ECDC99B60755D87C2F5FEDD244554C86B
662485354DA8E555FDC1F94A1AF4324634C8E1FCDB70CEE954B7D91BCA19FE2E
598E31423DA1FC053D7AFCA6D3D2465B96A23166E5931F7E464B288F4E357066
A562A92B968DEE000405AAF9B80ECC6D4B5D70DF178A67A0BEA8293F44EFDFEA
946D275B088E90EC172D1297E55F421B6845899FE9ED29C0FED85B591DB8E50C
195D002C3B339F2D6419C881CFCB2EE057ECFDEE006F398849B04D2120E528DF
EA7D363CCC1CE8CAAE26F2C9B2B78672D323718C729554DE536B11AE9DCEAD87
AB0AC5F00FCEA74201770E1A22AB3EACA520A1B83D37D270DE39E8D28E6B18EF
A8208BBDB2C711E3B14E398F22F385439E40CB3C14CD74242AB02851DFA6C76C
5EF6BF5F08A5373C30B5E2014F63CBD2543EF88AF21BAC2E7C2B34D351120D88
E2F134251B960AACC2011E842FC4FB8DE2F4244465DD080CA9C04B43955A93A5
30BEB817644060772BA2A21D43EBD4FADEFB8F019980FD561E5B80B06EF63A07
DFD46B705C9E57DFC14760B602535D1A86321DCD542959F98DA33394EFCAD3A6
D8352CA141F1C47C6E7DDC8F276C19D8F511D713AE0C27CC6D2E1B9FE2678DD9
CE727EBBBEE8659192BA8D3B048A3B47917E6A9F23FA56785B6C1FC1C9313B56
0BABC81D749B10397A18032A418AE49BE762A5E2AB06A2C4A3C7A13F953AAE3F
F6294185A035D11AC232F5038F5A68A6F1D95126261240598A1B8BE6D8D0B709
F15E70470AA5B281ECA4092C9A06109FE8002E8949FF0CFACD9BD1051AD5ECCA
D1927B94F2C93F2661518DABF0386B97827B8A3293A13C44123D05F17699F777
419FF97A7BFE63B5C591975E184E3985BED3ED7AF5D06C23A7B1C0E16F3CA9BE
B6E7C2F07C7B805922CDF57BED0818A5B9A068E908E7C91A9243E565F3BF81EA
6CA104416088FE17CE277D5667AA5644EAF87696FBCE7C280BF79FCE3F6461B2
7E1D636C5E5DB0DBB928E45ACA61F6B0E24465256354ABB8EF345623DF51BC89
E953E1E2F6EA0A731E48D16AC13303743F315AB8C249622E308617C5B22DE40A
CF9023E2C046AEA1102327A911FCAA68088B63669EF26D6540120058F4AA7F45
E145313766A2414005604E0894152427FA059E8EE2A34BEB5AC3946F11B24859
D5CB4DD7B8596F0639ABB1F43287AEC95E407DC63640E04FEC2575888BF4DAA0
D7AC972469F57F244EEF2BB5B82231A515DEEE3C4C080465789380E1912C2E33
6F85CF5CC88A63867C765A9D4B4946C5BC8AF7D162A2201726237804FB337196
0028CA882917EA0D2DA5F894941B64CD9AFAC878A8C1D239AD11EBF80D988B01
8FD6FD2B76276EDF119658F8ED5325D93A4474126CBBFDF5E95DB261C8D808BF
16665982CA446FB13C9073DFC883AF025004585BA3DB5D39230434930F349F14
48EAA347734C3BF7438567598FCB74E357AD910B4226229A99D569F285F1DFE0
E4B0DE8F23699C429BC84E1E4F262C883A7354373459669913D805CFA96436A0
9A66A92692ECB8564958BE90C9153EE2B300E8C944848EA6901AD830890B82B3
E12DB31115A4208B902B4325AFDBC1A87B9DD51F01ADCF31B7A87CE6E4A6C150
9D75F8398765F7692F01DADDFB64B9D94459B7B054A43C3951133D2582AD90EA
A936D9D679CCB2902AD3C45E87AB77C7FB48F1A84E6786CC7A4E70B37A6CF0B6
CAE6DDF0FF99F6D873B1D7FB781E8E43C5345FBE5AC52A4F911FFFA39DB14BFC
EB5157717F3C67BD8EF187E7FCF57A38E7C0507ECB8BD1FDCBE989B600B644BE
F469804BB1E5A61D8BE9E853756CD283AD3C1DBA490C22DD61FA45C9D6AD9C4D
E8EEAB753AC7AE9AD9EDF128A76236561EA185C51DB709DA6D1D4AD452CEFECB
C0A09369D0CA278AE2E972DF16F6A50F6288F2CF6E93E9E9F27D81FC3743A898
C666D89289FA3EDE89925B892B93C6600F22E2F4CD3FCB4800F3C9FCB7B2B778
395A8EC46B603B08F3484ECBDC4BDAE7DD3DC0CB1BA4BEF78AD529C5DE75AD3F
4E276F31CEAC75F7A95632AA5AD434544E9D02A8EA9C26AD6CECD064FBCB2304
2BDA8AD75E1DC771D68C11C8EF4BC77A59F04CC6EE3BE16C1A080ACC735BEE37
674E642EDDB5764AAB01B27E6C1A55884E42DB0438C4EA453615A2F2CFF05B06
6AC7A45B6E3999324EBD8D12BF6194A28C87C5F97809E70578BD97E1D02402D6
31041FC8AAD6268AB4285361C495ABE03EF7B5D8FF2438D1E07BD04044A23AC7
B7A8109CEA35E1AEC76E16022D2386EFC78E4A6BC9AFD7BF4455979F60F46AD7
02A881E68915FDA769637273F1B5DE55E0AAE6AE747AD18A9813C5A14E3C0BA2
5435E1E46DBAF38F0DAA6E73D75105F262F1AF66560CDB431366D48E58134997
9F123F430506ADE98CA13A16EA509CE614C33C328D3AE823C45690DB8E7047AD
5A8FC2F058B253D5D25484B3B15406A39CF240990C2BEC2E7B46F86C3BB3CEDD
194ED1CA5C0B9F946954D23C10F87D4F2ABF2A8232EA05174B94508297F56031
CFBC260994D319F0D51D98B8C176ABD5213845BA59A0422AB6EC3FAA5702779F
F2EC56A98685928F012FA64FF2579B60444EAA9420F84EA0EB9D79B69404B279
33780414BB66E8CC5EE30FEF149E35637257BFB4DF2F7328935B978C93DC53D4
DA1FCD9013BBD1B017E7B630C8C5D9DB3167E60D997AF0AC25A423D3B3127965
C57D583A0E4944D833D60CBEBF6566D47CC0AFC93110751B59EE7D907D701BC9
76E21D3A6E4C5685DB243723EB006A10EDE754128F8A53495FE8A2914B1AFCC5
E735349E09117C1DB5FCB9901A40E474423E2C83E0BF6A65A45FA0AF27E953EA
BCD8B2968092A2D54DB5A4D13F260FAAB29320B06FB1AE9705D803EC618F40D9
9DF89EEE4EE82B10528B8855CEBB99339E1A2701A96E49F6ABC56D79D75334BC
EAE960F8AA1E10482BF3A42D36F3CF6DB795CEA74C07BB48E90517990FCEE3EA
3747DDE62688247D55EEBF5D9E2A5446F765344369EE60488CDFA3896AC2788B
C968950BF3196BEA01EC7FBE23E811187D512DAD1E9CD5D6A6E60A62E18CBEC9
5D4F9B797B266BB355A72CF1FD6463C27371A1A213F84A9CC9F7A3B2C1D801A8
EA2A6F546025251CAA75518CD7C5FFD4D3D4033A578102AF0CB50E50A05E17E0
DC93A95C4D46B4105E30246C592D02CE50F1CB4BD1A9E818185E9E3444E82202
AF1990B6332B41AD348E1D304A8A158764EC9A462218A1C447A40084861C140E
08D832F3E8A21C36E32F2D603D02666DA80AA2AE164475AE670FF0BE39AE8EA2
AAD857291CCF0E9F9DC43AE5CA2765235837A94C063A41FD97AC4630D914249F
C82B3E49808C8C71D26647916D6F518B0DC2562197E6ED2B08D9FA2C1D7EE921
0C8A6920563D0F07C0EEF482842F59F9FFBAC6391EE8EFC30E9E760A12BE52A4
EDFA25F24D7F05C281CEBED5F2103319968B96989AD181EAD0149AA6E014CC1D
474C2CC8AE995BE1BB8C71E17D71E48581F268F00DDD16CEB810C3090A4BD77F
C107023E1F52279AE3620112B607DE317A5618DD8D30D2E088EA3A2CE3D3D17A
3B106E737FBEA70F6073CE5F37651E14423D32B40977FB26D168E25ECA57D162
9DDE049ACCEA1ABAA0240DFD1AA909CF444B5127A6ABC6C1B708E9A65FF1BFD8
4799863C8DD7C51D5E4818CC8F022C5E0BAE984AC51919623DF4406B9152FC3A
58E650E41AA3C53E9071E7DEA09C2B22244FD5022D9DA01A2D5F0D05429F02E9
0B6808E244CCB7C59FD990DB60A1B058BAA30A21C0FD3FAFAC53C3E9B70C329B
CD9CA5DF2F8CDE6FA5ADE13A6077CB637F617DA8ED1557A439C1F15F12DA07E3
91480C1A150213ABBEC67ACAF568F8B7634C94BE469949B8906B778F5BA3FB8D
6441AEF2562FCCB03D1A897E7EBE013BC28F857DEA1FEBBFBA2A1C3832A60D4F
5DB042F4B858591224899EB432DE12718DE2ACB8E3A59C374420BE3B2F6FF0E4
A53728ABCBC0249D0DB517289EBE45E47BD5CC3E39D7FD950905A89319B448AD
C947C579A7EF3623BE31DB5D3C332F12C0533713D9B99E2B20AF70088E031573
CFE5870AB3B0EF002D08404E8FA08109DA4857B06FD2B75AC1987B727E6E7B9E
427BE480F6E8091F758D8B84ADC5C6A9F2D1D039ACF0BC867515ADA6B74D59E8
D91210F31E1FCD83B5639199A68B3D7575BD95466ABEC393444CFE87CC23D0CC
831CC5C994179AF0DDB3F94B74805AA3D6A504892ABBF8B67B82D3EA2E0349FB
45EF6BFA0E83CCBF48710AFFB002EC2145B24A0D82695536627E102989AF27FB
3547807B62EBD6D363698E36F2BE0ACA51F25C6DE68BB93B63EEB778FF629281
8F2D0A9F6DD1AE82A778C4FAF4142FC6CC0E2E0899EEF1B534EA12A1C65B4FEB
8165B72349AF188525F85A3A80B9BEBD26405BF2CAEEE684BE3A7B5C89B8AAF1
DA240DD3891B9AC573D700BBBFE41F24ADD54882C163617B77D65D423EC8AC2B
8A64AFC7CDFCE15C725DF295DAAD40F3887C011BD8EC9BA7AF44CC83F1AF7EB6
F48014F04FBA8729D40CEBA3FA90A30FD06A3344B096BB17589175DE3E7FCCE9
028F411340AA353DBAB3B83E85D6645237F56554FF7E453FFF5AFC65829CEE27
DEB401B6BBF289B9DA550DF40134AF613F06B971720C7F22660C59EEADC6CF9C
166F966894F6F9FB36BAFE13B5001E1D4A51DA9E6D006C7FCE131B0545772001
F0E7A864595323502B37257D546D86FA80A08584A38E5745C47BDB129F909678
24D6E3644E2120356445E566212115CEFBABB533D9440DB8DC2C45271158C116
81EE62F8E290586E2792494143C04CD7051F02476B11213DC74828CC24EC94BA
49A64CF9BBE2AF068B2AB05CEE1ED3D22CCD243CF55BE52DA2AEE2F85AA39E28
36CF6EB61AEAC0055420B08DFDE1988018DA35A3C298C99475049ED307C730A2
8264F7FE6757C3A8473C2AC51D4153C8D50F0EBD7A1E586EE4CE84917765AF40
D48A5780703996091D1BC48C6D628AC3150F9EFBC228BD152CB6ED55420F0B8D
462CB20C9A4AA689975A0821BDFF7240CE0811225C85CD275CA8BB73BA8C3D53
1D43BE82C549028A1DB826AA680EDC6F395EE3A67C4317A06759291A879E9B8E
A83B9D69D43746B4E78A0B35A68FB47F9FB7665B3BDB89B52BF235568217B849
EB24169E8E72C2C36A82A3C4D89E5212117D8D35848B5F82773C58A8907ED43C
780A02C9262BC51F45204FADC7E1A2C377AD538367F403527669BBA914BF6888
BF53415B9A33B2EEC3743AFB006E526F59005226EF03C1ADBC77754FE919CBEF
A5C9999896C0384D186B4B784D587FB71E82D1A5307D54643CB242CC43E68349
4C5EE74F40D524F8C0C0817E5180EEA1722D77FF400C7DC7B86B11F1E34583E8
E102E8622B3B97C2C755CD2E558F73D7B2A91208AAD4A9BBC699531636D6BE6E
E9B793212D4DA46741ADCA07F08C9D4AFD280A270474D19630E3F93155EBC79D
08A0398B53952E236864F84A764D1234E2D9861991C354B46A1AE81879AF9E61
E41DBF800865A88DB50E2607945E46BCDDF797FE68D98B9C96AC4411B52391F8
73B1F410183BF2557EE386D9C2503E2BFC1BD2BB8513C1B4C574595677EDBDA9
178118694BF6579E520CA30C4FEFE4C113F6E5433E00AD8FC2CBB204319D4351
990C3757D26BDAEE23E690B196297228D5B6F90B9186BF14657D254920C7410E
659F9C431C03C3AE5EFC282AED21848A94E9774030525F0C5864EC8B8DE42242
B27C2B95E903B3B16868C3529E0F36BF02BDFBCBA4C5DB8E8FCDD762A697375C
D592F9556FCF0A1DBBC4C2F669ED0788C65B1E77444A470A6915462DBDB8D300
F44232A2AF75FAEF2D0AEA3E5671740DEF45A15736561BBE629104D8F8FAAB8A
A3FE78ED4CFD67FCBF929D0339B555E71147D523BDE7BB381247F4422D151036
67172D0370E7960ED1CC6D6B35FBE7376AABF1F48A0D3D75A80D47C776CD32D5
539F10F264CC25899EB6CC03D46CC5EEB8C23DD2AB41F19D1DB6366BC76F01E3
608F2095250BD382187EFBD03026506C2CEC0C9AC0CF018261567FC0EBF5B2E2
9A8434B7E0D526D61ED37D34F703E622B86656B327C2A50C3165E4CB49DA6AEA
AE9552A750431C655F722DA9E26CC84E721A361BECB7C23C056FE864C5F9F9F5
1F34BDD076DB9F863B3E47F0DD0A59A8FDB7C56C4F150215307EB89B0D6A68AA
0F0890BE5FFA129A621BFEF82379E88F8292959BF18F27DCAEEA14AB2AB78E89
2ED60C5B259D400B4B521A09DF0435BBEF52D0AE34E4F64A28A148780D83C23D
7866BEE47D12AA5B1F928226570A8B28E9859C187CDD6D76FDA492539AF6ABBD
5C8DC8725C770324415485F8EE630AF2FB5BBE1B2CDDC722FECF62CE98403F81
0175EF25D0E24A1304B93408ADBEA4CBC857592EDCF0D2AC772C1BA775A79EDA
4A2AC26D8F09F7658763641336AE118B7F11E6462FEF6165B0143AC59698E082
031C0C7A54C5F6AC4C2520D8CB1D59CA2125EF2FD133B7A18FA8DD55EB3B6CF7
17E369AEC9458E57ED15E5E23914C298500CD8A4E05D7ED6D7F4422BFAC00011
B6E29D303958DD3C57E071F52B765F40D1A093ACF9C68F88C136653A30D77F9F
B4962E06D987182CE356FD312C233285B2A8C8C3375048C74BB72906793201CB
1EE02A721A05DCB5FB011CADE8D183B254103FEA1CB8112A4CF88E36F03B5859
E7002A0F911AA8A41F35CBF9036A94C82673C60537F28ACC38CA5864656B8265
0F41D114DE37C4638E374100814E09D48DEA6BB9603DA3B1F3271B5345C44AC4
34819D2B39AFA579F91F534B15A8343262363331F082F0FF1D9C196F9E2B9DE1
FA328117D84EAB1AE0C415BBA5020E457BCD86F08E70BD6566614811A944CCDC
EF246FDAC5CE3E72D2BE1D9D2BD275F52D2032C868F95A31819DF1DA3844E979
EDF743F2C3040CDE5A76CD3E89891FD0035CEA0FD5C55023D201050625FC5BE2
E65630286E6B298BE8899B695C7B904BE747CE927B7AF37EFCAD36FFC5106C0E
E388ECE4253C9083D836BCA52AB2C7C334FDFB7C997201BB98ADCE6286CE37F5
29DF94657B481719DD8936808F715FCBAD49877F9AB854CDE8096539ECDA3A46
671ED161ECA048ADDDB646BE09DAD66B0DAD5C6CA4DE4EFC45256E729124FF3B
4AEF260AA17A213406142AE71311E9E85A5A3EFA5850FC5E5652ED37C76F4823
178B61D067EDDF122A4AA0728CC7773D3785F01B878C50F06A64F756841289B8
A648413C496D39A925B1655FC7496FA964E7CDC3795E04A7B420DEC645045D84
E4818D36D08375FDB613F5F35981265CA7CEAFA579173420F1F4F5DF0540063D
E2CDD3A36E3776E077B8F96B908E8A0144522677B6A994E8EFDEC11D882A9F6B
05A0E48CC6EBAACA336C378E1C5DC3B29A1E33D30A6AAA9B5747427C7FBFC35B
6FA607853137DA91BAE681225C8C9E67D05506A96B33486DCC60293494B41BBE
ADB93D3658E3A541F0D46DCFA68595E399ED18CE75CC71BE315BF151540B0F4F
568B1A3F64F8E88CDB59774C99D653DAD14A854A9AD280B917AB25EC80138301
D3634EF5A44C9BD59BD922C0127D5465D20657D0239BD60DAF1089E7339C3650
6CDE20A389D7D22D7A3F1ED323DEF28A9FDBF61F0707818F911E727EFE61ED7C
48B0F9D65F5DED95C4DB3D539A8AEDEC98663B091C318C231844D5693B5B5D78
CDC8E075529DB2180592FB7A20740C8C7116F049CDBACD76F0551CCB64111803
6C34E481DEFE4AFA5D1FC8C376BE3EBC326061095793E8AB02E0757A0653E4C7
AA6F48FBF0F90853ACE50615E33B570113482B81D2754A7B27E37B5FD97D2F6E
6CAA4CFCE8ECE9496EDAFD8745985DA02C50347AE58856FBE9AAE85B0FDAA2B6
7E6E419F24E42565BEACD8D6C62549EAAA04AF662C585B89FFC998D19AC35D7D
C4A4A26670B8E443EFB3FE3D19EED0D64290C024E1B4C704581E4C2976D274C1
72BBCDEA8D1F7EB17ABC748DD2504CB17DF506B0AF221841DFBA08A65779C42D
244D9DBBFC64163A924B2B245B053415A417E043709000BB58DE06689CDA39AA
6B6DECEFD6F70827692B8DC7FC5636FC3EF2AFB2EE8044EFF94C7B42EE1C8F91
7D8FEBFB0508A8748E8C6BBFF65F18C3D8E8B483AA5D858AD275AED95446A87C
E61BDBC0CA81ED1DCF60CBCB7BDBFA7E97845ECF8EF3B6A3D13C44395D4E9DDC
3FCFB189C9B5512F2CC36C7DD2B2193FCD802747EEE3C87B92F8CBA53A25C67A
FF81B25B8C300C301CA08BC250C82C7285B2C3549AD3277AF603E70605C6472A
6B78380F1A0358A81D56BDFC060FC25774ED1247DFDFD88EC382C8B196DE9E61
C75BD2766AD8A287A23D089D71815A8DF0C80DC5CA3508060BA9B027248367C8
5F81390647365D45E70C5E51FE4EDC6CDFB7D0D3FA344FC9EFC84868AD49E3E1
03D4CBFDD714BC165A43B959E91D92CA902166FD5B99935CEE77E7A9DF190842
7FB83813C9BC6E577BDD6F53F4CADF45B32EB9EA26AE7D8E6E990F568CB5A871
C290AD24A80BBF26C6A35901DE84D93E218ED142B1A2B4511421228C57340A82
32515D8C9EB0538F96B28BB23606C5DAD844CCEEB825D293B2C2905AE9F0554D
8A46C2E3EF966BEB6136462590A738F3CB0665DD66E4BB24B0D522AABF57EFBC
EF57295E3C85C3D6FC2BB2A5A272752922D0CCC2A45822B752AFFC111C48818A
F243409018D447A9F592D1ABA356F58CAA44C53207070D98DA81698D5B45CE00
08CC89F4B89617A1CF9B98D6C762131E1DFBA5041BE74F873586CDB938CA6736
B72EB97250C904F44409E7A796C965BE407C85D3D3F29433BEB62F8D1691C523
B6B445208E250B82605626FEA0BF44CF8564FA539BEB4928A955FBCC0A0E08E3
8B8146A5E7B7BA4B39D0438FD6548EEC8D41C338062D4EA75E1B3E29338827F3
861274F4DC1AE11DD1EDE7D918F2184C500ED40D3DAFD13D92CD7A60BC5AA8B6
4CE12688C3A98F326697965BC671ACDA9647E0B76036663BC2327DDB2E5DA413
46EA185BFD796E75B942FBA2C6D4369F92C2E678DF07F6E5F7F9DEDD098FA486
E830CCC66990D1AF888FF0D78EAB67EE4BFB91EE97F6D885E3A783173FF8AB5A
6B21B8AAE0C83797C6F0BB7CDB692AB5733798F5161AD5F05F3ED4A51952A1F0
429478D58C1194C2EB7FF3E44C24A3F74A2746EDAE42E64A4B4AC7C6C2C0E2F1
33DD294C2DCB29793CBD1420C18A1222617B120CB7F36B40D02D4FD206753B7C
C731752B86F488F82CCCDF36BBEE777B5C1656197483E2AC011494944CC86F8B
AC2946C3DD5F512404E85E07D0BB8C122B42972821354ED4AF8726E433DC55F2
FD1305141AF04B49F1D8776D3F4D1119104B8C9C295586F4932783C12BFB8BAA
FD066DB080D919D91CBCF393CC098926A47E974BF431E4A2707C52E55E99A9B9
E52BA91478D7E6F4C52474900823BB00661D57A97CE3C20C7B8FE9F8697B41DA
947ACA2D5396BD982447922072126C49887ABE26B59EE964C6E5D9F989B451B5
B6F523CBC0622581E44DB89E06E3D39C42F5A056523957035BB85B74D89B3FFB
F6CB06BBAAF31E929A218662A364AD55D1AAAF6A1E650A232CDA8BA3FEABB280
22110E3366B8029BA87E82CCF7DA3EF54594BCD74EBFF85251918C26BACAB4F9
3253B37B08E03DB718C59F9D30C65CFB66D14A201A7943854C656A89DCD31A73
09E8B65FBCAAFC7EA1203B2E08B4D2D35C140C4F7EFE58A9C1BFC817CF830504
AC31D5FBC9A3F67D6ED281BC95EA6BA5DC24E00816163F839CF8C96D555892A8
9478F8C8EABFF56F5A09C1257CFFE8485A0360C387863F90E4595E5CCEE62070
5E1F37426AD98AD8ECDEFA8F9D855C6D6B330FEAAB55BACD5A2FDB5D2EBA4080
C49C1EB12C09B79859E720B90EE35353F3E9D5D12E3E6B9AF77C0FDEFE872F86
2EEDE1177509A460EE316E2F0AE0AC456E558CCA7810B822AF7359BA3562E71D
1B44A4F0F2888EBB407E927699529259CAB8C95F1BA7E3806A1534708C378F40
45B43EC3CE9C9B1D003CA68A7BCA5F06C891CE780EB9FEC05CF95EDD202E744C
C3B65F9FFF3E3A89FE16F21802468E3F2B7FA847CAFE466440C482F5CE914012
97991B5D071E9B59D1C3B2EE24ABD913E36FD16208E38A4B42E0B156F3C9B321
65A110B25B1DBFC0C0D846B2AD7A927FD8E766F80608E89A4DF3858088713411
0102865D1EDBCA16B5B48046849EB12E49F7382968A42DC4B76755601721F9E8
9DC38FBDDB51A43A7F09D4D2BDE739124FA95D9C293A164109532A12F60DE91F
D5A64BB15E8882998C05874FDA851035127C2D70092F4209FAF47C922063C0A6
CF8E09E118D1604925FC4E4C52EB307DB11C5D65FF091CBBCD05D0EDD947AA63
1857C2A99CC10BEA236F1B16262D06ED2A21635BA58E8C7F16ADEEACAFF7B2CB
8E47A693B5C4F4CA4E8D0F25F3026D7495E42509243556716CC970D7F7C3D7BF
CF4F05B1256A58273646981284D0335AD0C8178094EEFDB316B4D06494503060
667AF25920D0A320F9D9065894CC65A055DDFF70C9BD1C5824398F12DB9E4EA4
16BAF8CCFAAF302C5766E8FAD4771E1705A220781A147AA653096EBEC97A73EC
66FFF25D8318BBF2DBE23C82573F173635A8A69DFBD705374FF932B3A4003637
5B91A327EADC894610645C32A63B0ADE5F1F96203713F76641CEC61580B76A27
1635E9CEBE62057A315442CCBEE3DED00937791033E8FB567AA8E4C70BB80C37
162519D7639C0F35AEBA4A7219D06750CEA54ED964266A9C99D4DA3B5262534D
C2E3B2A2C1762582470CC7F0FD798E3E6C447CFCAB5A0BB3B7A727F35C958AF7
5A50E03B1BF444150FC168AE9B44CA9B2C27DB905AF987DCB8E0D2F4348F516E
AA55F43372B0203A9D3AEA579A89305A9156A801E728565D2632A466B980CB47
FD6A4D1446D90DD7342A054661899C5F6C803B1D5628DC770A41871ADAD800BD
90481119EE6E922ADDE695AE420B93543160345912BDC398C2759CDB3710C618
572494B123320487B34BE2D3DFD1B0ED1E41CC730CC277A0AE74B3AA9F073530
FF3FDB3419240DF23EAD9EFF3A43C38C22590A770A66858A2860C62AE73405FB
519185C1F3FB23277E7657547F7CB2EE4C9DD9262439705CB766ECE25E39421A
EC0DF732DD613BBBA97046167236396C4ED8891C73BDFB473F7E189CA0787F76
FFBBD39C6357540FF22566C58A0126CDF6BFE7E8C458A535EE5FF2822207D7F6
FE1384D87898B449ADDDEABE488BEF9A7918BECF3A8247B7D3FEAA07C3B4C0BE
14C3C0BCF581C29B9347E99A2D74ABD3C187DF985376546D9142F2AB4DB92E86
4B978D94B33F452CA256124DC2CF15A690F459C1E1EC847E38168375F3657843
0013D08E5EEE1236EE68B56EAE8D924D1E6E608654C1445C21ABD4D5B2BFE46E
095D5D25F2770930D27E837CC218C3F84CEDAA29A23FFE2DE08BAF45D3B287A0
C0CFE5269C08FCF7A68BE4A047AD9B2A3271AFC51AC006277CE9672CB8EC1AFF
36C6931BC815FEF0ECD96070DAF3D244DECA0E4C62161D6F1F589ECA355FC175
BC173BEB104E0F133EB21550912D34F6402FAED87755B25E7962D01C586D5C69
F533E0A1678620246D69AC84090C1B335A5B1C14CBAE293B0774EE0AEFA8EE6B
AF56F857BD411268B184E40602113F861439626C4B33FA8FA47AAF23B2BB5F54
83BB36F6AEA8BCB8FD4FBA4C9FEC765221D0D01539B6E14DA611FDEF615154A6
B2F1FAD1E497CF7BEB7A698D05F4728833DAC1828E9A84B932EDF5433A344042
388ADF25F38C2F6306EA829B2C293826163045F5793C538D78EA49C9B66F4F3C
1B9CDFD068EB2FA8E3A4B6B69E890C55FDAA9962265BF1F852A5A4A0CF4AA07B
F1FC27DA8EC0D6A04CD2E6E9957AFF06CD8DEA1DD8A84A132EDF3ADCA04BD777
66D248A93EC6FFAD3657BD320072060597E6B8805A76BD3CA482A915660F1C83
40ECF4FBA7C5BB8C6A2115AC565EEC77388E3203F79D16A96980819B994E2480
19244879B3D4B8245709965D9A378AFA081F0C0A3B2C8A6A066DAD322A43D753
4A089AE41D3142C6E9AF7247CE0774B4AA623D0CC93DDDF502A33CE26DF79282
875103F95AE3547A6A2CA5AECC7BA1233B94B88C36B78353390BF24C80AA7457
47528372CCC79C6EB3F0AF0B26481421D3CAC6771F175EBB4A6FDB3BDF6DCBD9
0007EC841DDA4A98F4ECE0FD101977F94C715C26F618526CA50C465A445CC28E
0A50AC18AC777417520722DCDD5D324072963FD665E805BFB2F255967533404F
2A4DC9005D9CE9BA1D9760164BE303957DED60C817D54575168446E7ABFD8F7F
CA84E9296879AD432AD8B9F43F8A995405C451BACE99B5FEFABC1B03EED02C31
605C3E0837CA1C1FC0367E7AAC05C2F93FECAC0C8B037C0A85FE3AC9EBAACC94
365E3677C48F388D215498F3AC172750075BD6BADD5E5C17D049D2A65A4ED191
C74CADE1C56C761D71939900DA7D734D1806CA5EFD2E4F1984D9EB9CAFA84B6F
6EBED3D62C4995D85FEA8956CA9F3D1A9B3896D6A6C228F79E84E03E7C472C0A
88B4D70B276F566876930D54600F2909F61BA109F75A20BFCBDC4A186544CB4A
1CB43351FA5BF1734B6C1541C214BF6FFC4A5957CB7B464D83758BE4CD36D365
218D7180D1D72ADA82DB29D34ED496598A61D384388E6C99DCE180E101BF5860
82813D5A507BC6429D9CD9DAF10AAA9400F7B269BFB8E662978E959937FC1CED
14026B4199152043245A105D01897C96B8EE774A2A7DB975953BC2BD615AE02F
670FA566509B434B683289A7D6761DE51734356C7B3ACBED8999DE1DAB813FBB
3B7A44004208ACB953BC4FC00D0559C149D1DEEC98D2CC3EB7BD4149A01B23F3
647B56B48FF64B5566A9CDC6F8309584D729D50EB3CF27F0C35EC06D74820694
360A79077B062642E8642BDC8AC8B969C10F90A5C5F6BBC1825F7A8D0D23D5F9
51A9BBF8A80927FAC3D408744AC0253A9848F7EE111F83C68422D53BC2E76854
2F119E28E27045D858D1EF53CF883D97C8350BB281081B49795443B428986F4F
6B8B69B6BD08C30681689BEB4F4734F24772E1ED70A43ABDBFFA4B7E3552EAAC
ADDBB3C572C7983661779C64781CE716BAFF3AF84926B14F054458DFE7D86083
4D5DAA1446AD8079AC49ED7C6C9A895EFD06729609D6D956519FDA9F8F4FADA0
2FC9A33283D624F066908173D81717A38215E5D4A02F1C0DCF8B7BCEEDA93123
32BD4F361C227CA29AC90D0BD9F65F529261B122AA43F05C241D4FF8167DF87D
A21FDA7563E7377120426ADF16F3D25518AE2393D10113B58CD7662C9D768247
01EEF16B769882C08C5B0AB90A54C5C76C3EE7076F1FB4D9AB7397C07826BFA8
8B27A1CD26407E73ED24BF0421D15D569C9F6EBFB8114ACCF08ECFF7BA212B4F
878D62D47E54E44A88E1118749D4D1F7961DBCC674F11997BBE4C71B341D42FA
686D6E911797B94DFB9B70FBEA11A3ACA02DDB4D7DA8D116D9ECADBA28A32DFE
F67F75A04095F343AB4FD9F362B5F25390F64C8816C5A234444FD6210583CD89
F5F1BF732960162520A79A6989768AE02BD03B439ADEE8269226C35C1969A4D1
044689ED4A7F3790CB7D182789C89EA26680A82F82D02BBFC30AB9EE1CCB698E
95A66DA24ECA981BFC33D8C5F2AE326BF9F0AB195924FFF77044DC5F7476648B
6BE5EC8AB89E4BA78A8C9BD35D2C81E25BC65CA1D659CEE085E25A2630CA5605
389133CA313EC583A032F81E395427E3716232757186369E555187EEA83AEC14
9B0BD5687F0C2F1EDABFBE5541D4B7C27719AE22626ECEF63A51C26C7EE4FE53
202FA85C571E35A267C6B904DB402A8412ED1A83CC9AC4E3952A4818833179C5
782F2010A54F556D4D920DEF4ABBA5F5081CA119C41655A457B059B79450FD5A
BE66226B850A13B3B94A267ADE6D4BA0A0DD1A1D6B4503D89ADAE6B98FF7596F
B88D257882C1833F20E897888C8D312BD92917AA42216342B368BA830F000A6B
6298BD53E583886CA528C53F1F7061A507F0A73C72355810DA005A6F299F2D17
219FA448D16D8BBE92088B6B2492DFFE6A94733EE264A4AC5AA81B053B3FF4D0
680EBF368C60A0A8228C5B1C432571AE91FF666FEA09D5BC5A03E362CA299ACB
7E2B1E49D32C8B488C1CC03575FFB35808466A21518946687F778701038F745C
66A1880E8B8E4B053C139105EF760D318C7EA06C27968872C986C14C887F4518
B25BA395F401A532AE1A1F7E77FFD2C4F2278DD0906C7EFE62E4ED98FD721204
8802C1013C2EC098E2DFFA8A962F444311352F02920ED405565F9967331A81E3
51A03599B67C498BCA16F2DCDB8C4C4AEFD9D0B30243F86E144F730EF403A12C
227B7C34E883E4B8340BAE70E268D20218F16D10366C3F30468C26ED5C819D1F
E4ED1E750FACA5755B63FE994705380322518E6764CE21E9F08C21BDD10881D9
5C42AE399DD9C4473893F5FE78804F64F13BB1BCADD7C53E83E93D56263FEDAE
16ADBDF4A3BCD93B467342D6D9CEC3959777F00DF394537FE5CD9B43C7E32B7D
1020DE1B563331C8D09AC24DCE97A0A8F52F91DC6ED13F0FA546DFA1790ACFCA
8904CB41A487C94B46EB05D25EEB3C3E568ED3981DB1B8F5044CB83A0289DB30
FDE6A4A93E3C1C28929E70CDCFB1D1051B55BD51B315F39B21DD305A0643B988
C5EA1704C2ACD54F90C95F10B7EB9310FB6854505305065ACDD1E538BF24C680
A54A4EDC235BF508A353C945F340AF1F78EDD4F2A1272CAF9B0C8AE3758469D7
41B66C731D2D2C304494A08FEC4AA08CBBC2193E4922CAE2E2F02D5C6C5A8277
65998196983B9D6231D98213844AA19BCEA3FE5138950CD87648CFD5656B1D50
6932E67F4631FA71263FDAC15508AE26DB72BE6F55234282808336310431EB67
20B5117CA6BA613C91A46A34B58B3E6D288E41AA2FF3FBD0BCEB69F9005223EB
C3CD8AEB58CCF58D5EA38D7AA79652E4E1CC85D672123C988C0E46C3D352D150
926DF90F877D49976B63E5D53D20CD5BECAE55E6A3EF1F467B19698AFD3BEC3C
80133B16F86C0959B45285503457FCF51A5D0AE50D257AD1BB95B9AE6AF5A327
8600D3D6475B907AF2D1998EFC7C0CAC38366957917AFA186CEC7772B826A2FF
669B1FA68ABC8E3335748242476D2FF89DD8049339042C08F92C611E1A2BE3C4
C5A9EB359C66F48E89F8E372BBE82FE0070B0BE9E26DB930E8CEF15878308403
E5C37DBCB338D264DC4F36CF880E057760609371BF83C9D64FA2029D90D1E2E9
F40D10F797301D371EB8E66B9F2B20485EF9B9674E89790A8D9B01D76656E7B2
E4AA65CD936A3E8A16BA5141806C2D7661C5A4551529CF432FBF6218876A71E0
A1F5D896CC225BF6FB1130F11587E8B17EC161C2BA0A4CAFF215D9778010DCDE
46A242B245BE14EF49FC9F73AF060FD5E00079EC78B93B0A7EF12E8DCDD71CD1
848662577EDF04C7A6CDD43B9FB7A8D7B833FEF481ADBD8C436F3AFCFD3EC887
83F69FD9133D7DE13667D3845E56800456D7857C3CC0471D4170F371E4E5610F
0EA758302D3D1D37D012678468577E476BB2835F24AD6C3B7623284F401C19AF
E9AC70A474ADB2299570709DF2CCD63109189BB084D6E30A18A7B4377580611B
89A7CE33F678501D69B27318BBD9D5464BABB38EEBEE64F10C4DA04682737B9C
522E5BBF7D108157432FE6C454563A6B45BA7B9227DB29A67509A1F0107F6BD9
DCF15F227412A40F07B8ABACEB017179C99028601FA7AFB5945E5D0B30479070
41DDD657B1D56BB4DFFB8EAE7182E2E34B18301E7B1C3B806E3C276D89F4574F
B39D067E5B679ABAC9BC2FEFD5216CD2094934459985A260419F82F3282DA322
5FF9FBC728BA3E3EA2C8DE4F8DA062B75A590E819CEDA7840E4B4DD02498B51C
852EEF0DA8968D7CC4CEA9B78A0072392EE36380F39F11413B9D337EFB691D68
F523789877729342441B3D2DC8D9D2FAB6CFBFC49DC4B84918DCA1B1B217C950
BC0D5D50BC420DB2352D361B568BFC1A5C5F7188D77ED0D3B6724E7CE72DC0E2
9CB536C67DCB02B71FF76AC15E6057180509700A9E21881FE4A59D4D2CB8064C
8493B06111A2849F7AE1A2308947077F2A5E0419422C7159EB241F93AAB51FA5
EA1F307FA8FE1DD334C4D076907E74ACB86910257A2451312ADD6A0A0E20B5DD
9DD15282F3F05344F212862AB6F04ACFBA65002EAE567E0B70870661A5C0CF57
B0CABEE77D26890C3D71D83D1190D842B17036FE26BC6DCD06535E272720A826
731D91904DDA9EB4B3F8E039A78CA08DF4A4747F531E4569ED5121689F3F2185
CD30872C17899A6AA50ADCAFB21D285744CBEAD61325AEE449CEBC304E2E25E1
01980D93EF3D7A8C30287B6BFD4EAB225E203C806DE1EB9D691FC6058AEA486A
F494643915D52517BFB8EFD725A3A48C0884D9B117C8B6CE0F49A7FD721C7790
FF1C07ECA9CEAB05DF884CC85F175EC991CD94F4095C2851F7C6A0F7CB7314D0
73707901E22A43B541E6471E378D55F28609256F18FD5877BF32787FA98F6285
64D64BBA7F442496A2FFE326C3C7363BC7B7764C38F24CABA023613671EC323A
7E88B032D6CFEC2EAA5D11E914F37B0736BDE9C7E6D9352A9E9B1587D68DB5EA
678971EF002B2E16D092A3042E8BED48E3A05D24C20B17095F6057CA0A78777A
E71995AB746E0716824AD5107290074C29BCDF69B0DB55B983A417B556407B01
2A37EEFB250DD5A3005E86C47C5259DC895EA795A6B8D518677DFC8CB2D4F29D
8C14530477CB1C5345B5AAEC1BCF0825D44E1D9792B70179E53385667DFD9348
7A48A0D887AC4C5D6555F2271B3FBD69E9005CF599E985B6DE38B646BBFF6D3D
20B1A67E50B0D7B40DC2BFBC299EAB92A3813955665969259C73DA30C3868A90
CA0F6198AD4B01E14F81D3A7375E82FAAE67C658EE0B434071191CDF4547319B
DCD707B57FE613537A1E2D1BEC39FE2889AC2B6D90C3F313A4DEF20FB65E41E4
B2A7377D50E2908BEA9FE20B894EB41519C09426CB12EF6CFE7324EDE4A68C32
0AEBFB64DCB5F3E694EF7917EC7A83FB9E8961F38F1B8B3B416BC8A4CA57CA10
AEA555BDAFD93078A64FB5CC6B5D0716F9795BA1DC704489BC57E0DC37F41C3F
B25C52A7D3A88D4B8B66F3A6141F62313C1C7E8908D134D42920F7C08007BCC4
0CC50140BB0B99A80CB1A62A2485860004DF9415C6478AE76A5685999267605A
8FCC8B3905B76D0191A124E08B61FBCF3EB4C3AFF36C3F2C1C4279A50287D4AD
24C76E42713E87DAC45B93A6BCC101883881C2CC7CCC82B41932F4189CE568EE
0526BD7C470C424F2E9BC96154E3AF5709C620195936B67A240304FD272AABB4
3FDD2547DD02BB0CB7B8A9E7C7A2C6EC15EA577E9C988496A90E9D2A4BC1B173
A67ECCFEC87E905B19CD7521C8D7B701DF7DAA943D62BBDFD6C810085A8F35A4
41ED52FAE3B8759A4CBE5D3169F2A6A7BB93B1FC5336AEE34B1508661A3819CF
0F0817F8B4F672D33B003A65EABE5A5B6ABA79E8007ED206F101D92AA32F5AF4
9251699B5F439E4F1586F10ED8ADEF373824584244F43AB7714FF37A119CC2D4
B080D0085D05DFFF0C00A6AAB7D885F061E700DADB1D3E01ECF917420D682D90
9A7E8C973B2F388B4D535D9A6EBC0A1B5C3B0BD2FBBA1B69CD4A73D31550EC9D
DFCF48EAE03FB6AE1A4CEC9FAB6412FC84BCB123BA6D8459151089B2029F2442
92556319F5341C605F4EF0ADD2708DCC03B560A04051E04E151FB316E1DF8E90
2E923B108A94BB4E9C02DB6F9C641CF0F097B74B3D9A10B04BD2E23FC27E99A4
D7E009FAAC5360209975A064B199B9C14F9BC3C3F7C48666059E1C311483A13F
FDFC650D54C1A88186F6C8B5159378D1EE5EFFBDDBAB0D7613C5C05726666847
D0A2228C4D68BFDB7FE6950CFBE24666BE69FBF13966614EDB9129FC18177EFB
FB0397A220E891CEFD466F89569749D057ED2B37C777A6A8CBCBD9A9CF7B6D94
100E1D495ADD83B49AB9051086ADA3C60D9BBA45E75E1BE56445AD88D071220F
E596D485E2830E4DCAA2862DAD2D311415EDD0783636799F570F1221DE0EEB9C
EBFD2E1C98DA72A66A3C9C65E42BAA5C476A4DF0CE6131890A82A3B4AC76B115
852FCA4FBCBEE9581975DCBB64874DB3162956CEA8436FF61C07AA7D41625BCE
3B3AF48FCCE9A998F107E33CD9F4693A35B9FB6ED8AF11EB28DCDE6167E8FF11
26E63E21D0F4CDB4BDC743DBB56004100C008676A04178E11B6315F170636AB5
FADA0CC959ED0AEFFD59BEAE1BD22E85C96B2802402D9E172DB631A22DEBACAB
4822326EC4D61B8732E5929D76DB190AD42E2F4278784E8BC2E73687D9E6242C
53C5EED6213C8FABC5BC39647D5D85CF4C2729DA7F2E8C6756982DBEB464331B
EEE8287EB02163D72C0A85813F4234C8E9394F29CCF48C19C278E9CDB52AA5A5
7DB9467DCC7EB4156083D271050EAD51219AE5881449EE30330E3B425A8CE27D
F9B8005161BAFAA7985BC8C26055C13B96AA80741BEF14EC18B68F8C5693AAD8
5EAFE7A746CF2C01F4ED2561800F98CE06CFD02FF7DB00864DF70CF698639DF1
349CE90E9DC8C1CC7BA91DDE165FF145E327AC635A8A1F400C01123AEDA913D0
F3ABE9593EB51EA05E63D3FDF6A6C13B875ABDB66706AAC15F1F0AA2B94B1332
2565B84D6FDB6A18A43B0B65D486B6F357B6A3398B9EB8FD78498040FCCD8695
F587F473C4910DEE9B69D73BECDEEFD68C41A3FD53449FAD17BB11D8409F1D03
FB9D167D4E8E7BD86986EA7D3E0F7B357D6F90C3D378AF0CE44D3F6496ADEDF9
301267C6D0C5943726EC82075F09671D36D76CB2C78FE0CA2B555549086C775B
46363A073DEF19EC148F1173EA1E704BE1401A0E4E2D5FE737E5D5E65C3BB34C
7A499A73881238F8661CEB170BD4E5FF5FFFD90B2DEB682227ECF0C69406F623
AA1688AC1F5DDD8456DBC102AD8B88C72EA918F58F844B58FAE1FBC783235378
211FBE5BA462942F4B54A1FA37B462422FEE01CC3C89EFB36C14D5C52B7127DF
510B0980E8518E270506DF378D13F3896CCDD77535282DAEC0A84169BA52CCB3
4482E7745695F17924C6E2084AAD3B3ED3725CAC4F96A80130F23FBC68B14646
6BF5685F1F2D697698357A1EAA6ADB2B02F3A8D4BBC768D399D6909EC7ADF08E
D265CFE5EF702E5F8667E7C28EA0B7A91F42827629604D9F62DC7EE008C99C94
0912A5E95D27C782F481D27BFF2E17D0F6B8E7F357F86EE344724BBFF51CB34B
F62BDD554943A2760636D25D369327F74131AAAC148BA442726C74ED3CE0F8E7
BC9E15D18FD5708ECDCA15B257A4B54C9D31A61A3854515CCD3E58C0E3BBA687
FDFFF6965BCEA798D296EDE90DB642BB321C74B5A7D4DE52ADA2CE0E14A61432
3226E1DCCD01BC240BC13AC0FD95B2B6EEFE25B87CF56C41D3295BB7FC31BDFA
0109C7523A9E2F941BEB3932523354F460309A5046C234C327876C5F444C9A11
253A48FC9C7D0F219D9E077EA8D5557416C462F9F083F1D4B5640044D0DE7AE6
0DE0F79FF3B5CACDE738911B412DB39EF046CE3A45601F818A33329529BD1738
4AA5EE67E90FE53017AB541B2A890FE36CF1846E2E18EFD8D5230C41D3F782CD
BD447CD2F866A47C07ABAB42511BA53C391290E7CB5D99C12173AFA4D5A66CE4
12B3216ADB113317C2F39F39E0C1E8E46757063162F455A0DA3B1E777BCC5061
C2AFCAD00204A4D9D952C120A2EA556FD2FF34A16F85CB8B14354B0866CDDC6E
CCB523E5B7E88C0415372884FB071A40DCCE767ADD3E848AA3C2543CAD6CD5BA
11772892DAE1E26390087E8D0F4A5653FED57BCC9EB1639B1C158BDAB16B93E3
7691CFE8B916822C433D62FA7DD1486F2A250A2E77D0BC3E0E42B847D0327417
6D46D16CCB743D7BAF032CE395479729B12364397DAA71D2EE735F18F8233C99
67BD653C3B3D0FDB2DCF671377A8E333855D5A62AFE362E1D09671392C2C4DDA
2B8EC45FE511183BB394353A5378A300FB60677F86991783BFE38D117DF2FBAD
0EBB4BDA8E711694A5D5B707B5E005AB9CD21D6D55A06A6CC3733F543EACBB4B
026B40E2008429C1817BFB58772A2AFFF076FB0D33A446A18FBDC0B05BACD9C4
3AB856B84E10C78C87A9A8A127583EA10412A69BAE016476C536FE9012DA135B
AA574CD5658CE08FED350A84591F9098D38B86F4F2B89E7AEDAC7B50ED8474B6
413C876204328A1DF448E7C1E08A8966E82E25CEADED5E34F21A5A4273841BFA
AE913A1E5ED97C4958F32436C36839434C80A6C32E55B6573E695C5212C025F5
291C2133F4911CD662660042C295CA49A3B114A510EB56F2F65449B87CC7A428
78874D3C32184BD50CC520749D0F4452336ABCA7C0811552AABD981920AA2193
03C871F72BBA9835F31F7148CE460DE71C8F3F71070E0AFE563BB338E0EAABDC
ED48C07C2B6F918B1649057B24A19BEBDA03F121F84951DCD62B5340095113AF
DB388F1FC929D90B0F6F0EC6AB8616E961DFBC480315356F1BB3EAD7AA2FEB05
2A8EBDB4CBA682AB31A06E2F004FFC7BC3BFFBD26A95519EA586A904EB0B3653
7555512ADB4563127F032BDF42CECEE729E4CAE02CEC650675CAE436ABF024A3
40DAB8D204B3EBFAD9DC0C32A8D778211C4D16D6896588C750A7BFBCDBB0C570
FF85F147ED668054F4E13EDA9521902A10E6AC944AB633CB639DC42768BFCA7B
410DCBC85391A346C2F6241550115E73CF64034522FAD6E2F5D47E64F26A6BEE
177FDF9912B0C63DAA0CB302BC0CA03F2F57167764015A4DC0A57BB12C0F4371
8F27EEC2BE2EA413404599D4BC802AD9D5EA5C462B0CC4EC6F8EF4E143B96C29
024CB6241AEF4E8E4A5B3E420B65934AC9C0A6F87911E29A20A0970F34E730F1
33D3FE8EE980C451B7F9D3A86620071880CEDD00668E520039F94CE66684DF3B
8C8BB9A39D21B475A0598C24395983480FC5EBE2A21F6DCFF6715893F47B3146
8B5C34FD006E80CDE4482FFDF55B6434A466D5F856CFF0A7CEECF01AD92A802E
692F36575CB8C8E5FDEE030B259F36467C20D5243819D9A9FC758E861FE0A648
51AB6263C7B692E43F5FCB7CECA764957707B280EA8F6DD1B85740D819E9AB65
1667E271F4976BEA02795CF98CBF014657B72FF013EE0432DB3A689DDB56A759
E4549956F962CD4D1B19BD392C99205D42C749513B63E3E24B9F14B01BADCD6E
9A31F56CF966EE03951434FDA894AAB1F27939F5F4D54512BC81DD410E606397
811F08A7C141681939523E33FF1AFD9436033EECB4BAC753F19C3B79E341C2E7
F71723F4424F7A2CDC27DC4487362839F45B70F6C854298CE1E04BB846176409
582866C425EC48395CA47240175A4F81CD220B37EEC4244916DF03D0900CB60B
D2425399946FC2A65062AFC3528BCA2231A46228219149288FC11CB8B016062A
DDF2A4AC973B3E2535B648C925DEBDF82061203A3515B45B7F8198DCFD1A5AC4
6D869ED1F6777619DFDA09A52912D353559048F754A6A0302E659F5CF09F6439
4FB059D499A2179542A14984C967D80541CAEFA9BCDF5077D49C9B22BB8C0594
D5E8D94B09CFDCABADC9AADA05B5744FCCBE59AE986F20E83D1A52F6845242E7
0E965FD4E19083530BABC17D679E55C10451ABAB3FD2E42C7CDB65D5FCEE4FD1
8D4D7864669645D8AA6D1A81F25E282282A6ADE58B2BDB96C50EFD9004A74C36
A10D31FCF5D6E7E22257CD36636B7AFC6EE222566FEF5001247F1942FFD3BC4D
515A3798045418FFB5BAB16D7088EA3B7221DFA22A3A1ED669E978320F4A9D21
447C1F34A5B306AD3950CA28EEF82FEADA663B628B266A67452AB1F478784974
B2491CAFC47D0B9B778401CE71C82582D173396B5CC693E3B38B733C9A71657F
FA16DEAD7A8C69118E33C3A1563D090CBF5B2C543CE75C2EA74B0D02EF676BB3
080600A151D8606B27971D7152E0802DF5E8FA58410B58DD8B95A372C3DDE070
9E28F74788CCD0B76CC163CC625598F9914360AA5D8C6C71B598A341A54B2DD5
54E767C4CB6FAB969C6DC617BC8EC1F51AB06C10CF9A0607196D80BD06AAAAB9
5D0F1B52804D8ADDD32AD794DC67B737DCADB7AD14D8FE56CEC0208BD7922D8B
CE308F5A844FD7FC6CE84065690C0E72B977118CC7DDD17148DD369C392A945F
1F4022D3A23DFA32425E99AE9551B266E0870D5219EEC9F5594986E27C27D6A5
31BD840EB5420CA47CCB3353726D82F19E5FDE4BEDB23F916BE469064E351FA1
438493BE891B85F00AA0B124243F89BDC9BD023C1C587A50657D0790D401148E
CD91C21F5564A926663A5AD3FB9787A2CDA3D0074621714B3A189766B47DBC70
07F5EEDA40E80186275CEF4DEEA13D17377225F3B508CBF288AACE096C97022B
D7D002FD5BF28D30C0ABA46C83DDEADF6C0386C45CEEA7BDA54F4EDB3A6DA31F
FC7B3891C08973B506B0879064816BDDAB27798C020FAF78060ED246800A4E27
E8D9B889FA788DDE321C007F70CF3267304DF33C3886173F4517BFF02C29D474
76552C9F07C1EE6FEC93FCF70720AB2DA1F397EA215D265DBE5B1A805912E854
B9C137992A3FE6F823AECAC0EAC55FBDDDEBEEF21CA5A7C1390D9FEB536A0FA4
22A99A74A9E43C3F08AFCD28B83F17429B5EB60D1E55B5DD2812BBB6F2A87A2C
B67676871F45A7AEC6DAE612F7E588201C4EBA3441197032E26E246BE9022688
6911FAC43991F4DB4362405ECEDC47E693618D8ACE9CAD7AE4D6E26FC114EF49
DB4982E6FB051B7A72C9D7204AA86EBCB24E7BFCC89F717D3F8D075ED6A670D3
5F5C3D7FF7FD8631E5BCFDC63DD97951D8AAA646821D50E93C054A2360FF1AA9
C367832EBC9B3A58321EFC4E1BFAEC4DB9088983657605BCFFFD3728828E8E83
B0E0ACD79A0F9B5941C94DC71CAED21DAAF3D0492E5E25B8B9BEC9B2371C3A3E
9521701588511B439742503F3C1734237DAF5B0B49C8E92D4F7F1B14C3729637
97C431CF63B95FD686C1596C996C25B028768E16E92501E029B287D9DEC879AE
B7311BEC0E0422FE94DD708BA4BCE686723DDD6285F15828FB955832443CCD78
BB32AD8271AA5AE06C3CEAC0237841A6229435A2BD1E3B5D9DD3E6AAD5C2AF89
E2A49415603A7C1F44BC8F5A859DCB781F2917E3B66C80A82A98175BBE715212
04FD3C18DC41A67057DC75C056A9315A194E4AE3E6926484D53F14D433C891C6
15087E3E4CC2DBE8638D8FCC7CCCE7B99D7E6815E4B3FDAC5E050266C768E756
EE492E071DC45D31F4AB7379ADB0AECC5CAF4661E9CC11516C55FA70326720D2
2921E58F8EC5E1F056E6C381112F6BCD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFBX1095
%!FontType1-1.0: SFBX1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx1095, tcbx1095, labx1095, lbbx1095, lcbx1095, rxbx1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-227 -316 1723 930}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA16EADB32842B6D00C76F8A3359BAB9
9CCDA63EAB4501FF88DF4CE0D9DC9F071B528726352196D1D889EC0F0512EAF1
A6ED201F5B8FD2B90DA9585F5B2004EC8159EB426405D76A85AA0ED1D29596CE
FFD55DB52BF5C0325EB43E789D2128DE66E59F9A7C84CFF09969406DA529C87E
3410723FAC317F161388C55FBDC43B850230989AD991ADA95B1CDDC4D978E722
8BEB4E338C3EC48106B4274FD9FFC7CF03EF238D8160A515EA93C009A8F2D3B0
1CB8041F5EB86F1D975BF4EDDED8B7D2C81B665124CB1562B71114FA44449C6C
4DDCBBD36BC95B0E569A5A6EA9219B151426165BFEAA914437CA89EF4B0F5911
AC054509BA0102D462A183A29DFC304DF74A289A052531CF1C505EB94CAF245C
33DEF613E4F1B785DEC94402A2C46B2DD4FAE5DD176985E45A03D85E442D7D77
A7586ECE67CC2360820AC46A8CA0DE0852F2F3F7ABC9D4FDE78321A4B63ED2B0
AE51F2F1CBFAEB6FE8142B4877BBE69FE6D4FEFAB7E5A8A4B22803992910064A
F998A0573C898D6EFC101CAE6E1FBEB97001A62893B76CDA3996BB92B7C2B8D8
F5C16CD2FBB4F8D9DDF27E66377E9BBA95CDFFFE02D05938F97D05AB348A74B9
1D39CA72320F8788593D99FE7CBBC69BE81D60CF58A584C366D2F5874A3CA93E
3D630E60D2D74E3CB14ABB6B38E8B409EF705FFD7B13420650A3E56C4B5AB090
6D15C8CD09CC2F8B32005F24D05B7E5EF52B8BA4F1C73CFB0A908D42CB6BB6E9
507EC5AF073CE78791C3DA714AA60198B87689F05EB1298F554671C81123C070
925E3F07DC46D862F6C874E548187A5EE7C6B713D5BF66A7CB3F258D2B99BC48
41EC9202C3D02C9A2CF71D52FB4D0EA9DF8BA01EB2D2192FBDE6EB1E0A7EC955
13D077AED82C96F3A8D32180720DA7474138F847B46D021414BCAD1629F0954C
CD7808E026A4B5D79809DA84748C1DD5A1EDB6AFA088E9C1122555CF98C46549
F30B5A62907162B395AFF56320A138B76191B06FEC97AE75953891B02DDF53DC
CBB20B24E56DBB752A5C0D7940CF7E3E521FD1777DA4A2638139FF78B960298D
1627E5DD2BE89CA00374E2708CC47EEB701A6D026C56A4B495AC3916730A33E3
F20BE70B1608FFD5E07D666781A583899A9E954CE4EDD9144793A659B499C192
207C1E52F523C2D6CF26F77B1BFB04A74E32536B7C6632BEFE3B123CA985B721
3FB2CDA7BBAD5C07718689DF3C569C8BCFC0F8BC5E075CD64CD6230EFBA46127
656070359652536BC1176EF4EFCCADBDDA29266D238C0E7C800DB0E22BF8000F
D3DAF9A8B70334512ED37A8812D914FEE39E343EB23944236E5288CDD4B8D323
578F80BA1F68DBB0644DB800ECDFEE43E42D956605142993345431B9FF2E3660
D108DA86E2117BCEDEC347C04D58988D00402DF8794B1D73940EF5CDA5F711EA
0BE543BAACDEE7682FAE1239CBB0BCC0D1B9351FC2667B316184CA25DB43961A
A1C22EBBF71D328B75CA05456A731F177F6F99EEB4BAAC06004DF835495ED5A4
9C49FCD5B1F03444A2D651AA5DB383E3747179FD54E0955DF11800F8D76645E6
A7C09AB7C7CD9922E8788E3B508D7F77C8C341A1FB529EE1252A1158C125100A
5B42A2E400A501580CAF3C9BC9C74EE0BC48854DF648EF2A0C6AFBC2499BEBE2
613232E4866B0F82F15A18E9324C7A1B5C7DC8375A1D2E8D121894EDA87B3A96
3922A29E00BE8334ABE712B0C3B23708AFBB897F101BB80A110DDF7E4E761488
03E20DD866B8AE8BF3ABA756B9D8DD0E3B5E495E3070FEDE72BBAFD87A45386F
9DC59839783DB864303DE8C85969BE5AC5245A0270CD53E72377D6B86CBA8331
76323D1EA2402B20E1C4E68C55F1C6CE31AEFE7C8215D7503417B29FD16BBC2E
221724547E764D44F5A021DE5973BDFD4B0EC4B5A6D5DB3CC8716D1EB0AECCFC
E96209BEAA676650FF0DBCD65A89DB5513B266D00F71935DED5AF2E670850928
D9E6A69CDA5E108DFE5DE022D24C8DA18BEC0A790ED8BD50E7E77F002F99E34C
64E6BF6959B6E245417A3CCD30C9B8053D310B4D8FAD6185729F7C3CCEE8A9DE
3EB39D72E9C776AC7EE344A718174809E3C057C10FDA8B73C48A1AE933CD7D3D
2C7AC2D5BDDB2548C637EDDDBB242E8DC921CFE8851CD927C5AB6220E7A9E2E1
F20A66019777719D6D13084BC8BED1ABE47EA36D0F5282F33311497AC69F71C6
3F014D07370671C52CEA8A5E53198522C434869A0C67906B55C46E56F8C53790
FC92D2D39862E3081AFB5C0BDE232A458F3E2A5F38E7A3A97D8A6EEF387C9FD4
AACCC343705FC9CC20609255F68F76666D9D4647002BAE0876BCD353CDA8353F
F24A48188ED97C54815465EB7CF6955084AA74B9E8459ABFA31A96A177DE5AA0
0C9854DB2D25E958FD56FCE76D0DEB67A47A2DFC20F2318C9F6FDDFE21C2CF81
2CED3B67F6B17546BACB6631A51EA218C8811C7A73FE4972A46F1CD9A89D9F64
ABA4B585A674CA2D5F3B0CB9D33D6AD3777D15E08308220151CC188E305B068C
11A8020D1A155FCB44FD22631BF2BB54874F6206780CCDF810419D871BD38ACC
4F2B176F782DABE3FF8C270633416DB2A3FACC4D1D421713135FD84718A13369
0E6269475B5E4B670FABF83F454E745574255A02CD28BA9E87AD4906113E333C
0DA452A3DA5FF5956B7894282521184959AD0C62899B0F39A7FE182D41791D9F
8C15AA8B375B3C445C6EFF1AA44EECFBDB8B9ACF11B6ADE903BDBD785DF0512B
2EF428A2923A91B2F776C70FEC7B1820C42A1078409AD56FE7191150FA4EE319
9E1639DDEDF5009220307515D4202AF42CD3D3F98DE8CE8101FD697B9B981BFA
7BA525060E8E38C85848538CA9076CA03EAF9BFEE22C49F950A31A6912A8E62A
9B0A1D331A6DF16E8549CD1D757DA72837CA8E90CA93CBF9681425ED59AF6F19
CD6A6C9C19310EFC5E3BAE2B3838F886A23C87281744E40FB9C24D5B9612453E
5EF16C7733BF56AE6BA3F4D290FB8867810AAF4715E339375D60A1D1B7AFCB9D
F8A89FEE180D6275CA7F8ADA5E5973BCEB77DD72295C24BCB97A2A8755111464
61500471693B912992BC817E704A0E944FE4BC73F5CB8455B5EAB7423DAA5559
8A17A44F07BAC8A71E8F20774FC77035771407F6C61B9AA815F71BA9CDA2CC27
83ADE9766D90D8106BD2C089C0568476073FA36EF1BF8B03B7DC0DC3D0E9E5FC
8771BCFD404F15D439B59D094DB2E9523460F114D0D9E5BC68069C7DACD273B5
0BC27AF8E3877B5A18FAEC29D3124B969B854899BDB45C50E17B063DED4682B9
7E5C7DA98CCE8D724D14B879155BAE75A53F5B8CAA9F3EF14B096CE3C5EA03DA
61993C0742C0C991B2700E8E8DAACE7BF3E6015D0FF55BC9FDD3B63B0FD6A904
69F981B3728A590966A1F5668CD8CE3441AE0CCC52493F0D102D2B7A8FD57969
D2C61BDBC19750AFCE844147A34C17F8B7C2226896D515C595A962D99275B831
B6B117F602C9A6294A8BD979D0E1891573EED27D45D8FC743A5714FB582DDFDB
54972E891F3C1909ACC3F57E504A97373509044C5410E81DE9D9628412B17244
31EBDF1622CA25C441D2FFD4DAEE43CFD08C950DB75F8E5B5F42C1C211203ED6
EB5A3357154A0894C7C6C045C42EBFBF182F0D752E77B8EF271DD74CC3A0756A
0E9C692221E6FFEFEC278628FEAB76CB47093920373A057CD5164DF1CDA0BA5D
0C2B4C0DB5CC98316C947435E816E532FEFB75664A80CF4DDBB549CAE48C3ECF
DB9025AB3009D00A5ACA000644DAF4D3B7C947D04B6C0EE7EC1E2F0E9E245435
A60EB9A37784E071411ACA7D8C2355A62C434D6549E0CCF426B929D143792B3A
F9726531002874528FAF394569E04F580F69B02E08A6167A57818974CE817503
A129B7D418F684CE800342B9E5E56D8107284C6CA62E6954C1103C30A8A9959F
30E50ED78E8645C18AC3865F18C152697C6B1BCCBE7DD6D130248E8235BA1EEC
1B49E55C2B2F905121EFCD9826A53F926BC76BD1E47BEF9A926F650984C4328A
CE4B926049D47E38C1C2F3FF4B0F4529C475E5D473CF3DF17692E3C3AE247164
C738014D8AFD7FDC50180F2415D3DBEF55F1370BE73E380F79D3F54F2488A88E
F17D6A0EAE7EC87A8357FAB3FEFE2564703CC45EBB55B8C0077B72DF4EE24629
D829FAE10DE7A2A4339CE5DC0E71C8B6FFEEE628574E0CA9436FD8118ABB0D1B
5BA2AEC0F487E99A6546157858A7698CBE57DF61893700645372B21965142508
B2B562A6B036FA4BF90ABE89F5DA470A35CD30C9B8053D310B4D8FAD6185729B
399E8953BCB8D34DB761FAB386C8099A9BE9F8CC17806B7B620EA1B948647467
9F6EB680D5801D01BB229CED9F81B623616477778AA53BDB45FD27EE80941185
B62F945372BA165BB746197024694C64C8DDA0974E2D47FB751BF7CC120E067E
D1FE2B0C171A938AF22CC9B63AA8291D791A8B29CCFE9F7EEB8642ABC8B6E624
E283864A2170296559FEFDDC952D0E56C971A6BCD0F27FBE6565DC107D0AE7CF
56269043610C7F68A82FE0DB965DD45604DAD7759B5167DFBB7EF96B191D6614
0874153114B81A52D691640585AFB33C8845C0AE85A444643D68501E25F70AEF
30C49374364AF286DB39F36AC8B0FF003BB9F29486E9B810FCD519ADA5800397
FC3B88474B43720A3FA2E411C90A03FFD7F2584C071666B7B800EDCBFBCFBB27
3FEBEFB530539E02185E4F682C97E016C268C00671790393BFCD8EB9786D465B
4A49473BB650D81474C2AE23A9F5BC20EFF79618454F6D01980BDB2EB591F7D4
69C92C458CD8526E3A9AF01A16A3BAA85A9BC2FBF17E8BFACB3DBF5C9072E669
B862B373C59D88C1B9CEC15F12A4F8D9BE40B40335D2279A456D141516B7EDCB
56C83FCA0947C42378EEFCADEE70453AE600575553153675A6700E24D60CC05C
2478175BF6B5FD497380A30B6F57D704958946A2577B594C63EDBA2B431BFF06
B66DA03FCBB052CF5DE8374834F7865E57D5C51EB9597356CAD657DF7142FEE7
38F5A7DD8829ED3D2E8D183288214D163916758FA9323061E3A4A43C54F3095F
CD1187942E28D1946372B3F265245380790172AE4396DE767B8E4507488381C7
C8227D8E1B6512DD4C8CC2038E025CD5AD78D0C11357E723D30751417516F286
5FF57A92F8C29C3B28C88F485BD8AAA162EB8020572307065569CEE7EC3BA7CC
B39365CF469ADB0E27ECD766EE1E8B0657C33AD2FE36178FB32CFABB64E7CC0E
29D0433D1F9AECD8A7531D2767BBDFB492F8D0322AA7F265EED0B6F470229F48
A6BBDCC8254B3E605D8FC49F3AD61194630224162FA0771421FBBF33B682C147
0BACAD9544188DB3C86BE4B322421BDB0445995D4751DFEBED3ABC74FA8C3F67
DA6D5ED6274227EEDE49274D4F841A2F6DB9B5C63F50644ECB46C1915B6A7044
9E7788F78F4CC28363CE8CB54B37655E433A38E8B6E3B581F41A3AB9867BFA59
1ED60D731C110FB4DE8725048A69ED6EDE21FE5BE6FECD6D2ECE2FED6218913B
BEFA7EB18AA9FBD7122C97BC65EE85A2D8EEC6E1F300172004E03B215E42BAAD
B222FE2152985674CDA4713643C5B18FFA40B336DE45DD87A1C01067F96BCBD1
87A94CABFF1F9F1176839104629201DED5777F11E4344AB9FFC97B069F3B43AA
13EF3D39323977970DEC5089750A311B2C08222E8ACCCCB0D0051216C4E1FDC6
21C6736115897330245583FED30ACBCA2F16C5B25DE349D237D1CABF2823F754
91933A1C59C2D96526A41CB14511D4D6ECBC921186B9906D6FE6BF97BC5957DA
4AFB60429553B15E7B0A9BD7D3644BF69895A53874CEFD2F5227A0A576E48E4F
6353873ECA772B865162FC33328E1974995C23F113FEE39FAA8FD8E602A6E5FE
2C457B3903308A6F104263AC819FCD5879179C64420D4C2F5D907251E9C589BB
F1CBF88E39BA585229EE974FF60CA13AABA554C33B12D7DCFE8EC07330174190
FC19948EF5E7EBD228B1212E435E2282AB5A9A3BB9944C02B1BA225C7EBB46BC
5E76EAE93E456ADFDC6EDB1F067A37EFB050332ACE6E53FF049E3F143C1781D4
AE8896896D1D114A09673D96C1C8EA20A85F9D5784D0B66AA0C3A36BAA443F21
AA640AA78A5AE4B9BBD38574CB6154A57FFAE518E5E07299F792A4C0934EE20C
B5512BFB45CA57228C685E163310ED5FF8749B9B1D4DF80C4D8ECA4318D68757
2B9477E004A9818073E3EAD9099FDDD472C81B3FCB5B7893C8AB2938F7B02AAE
4FAF1247064BD169588DCA9D06FD26F95948848405F37F1AEC8F80DD5C3E2745
BD9934D0F92360A328545303C71BF48EEB999FCDB443A99D22AD65B7BF32BD71
4A8F491E2E34A9246B9256712FE9302F4F6B15A479627ABAA268F4018ADD88A2
298F19119A3DC7043BE960587EB55865BDCB54F6CB19C6F7533EEC9026BDC489
17AFB3B9D2B58A91DD3E05B07FF1CD17B89D5F13B4126192FE536865C7153FC7
36C6156963AF645634CC60F3BD9089EDD9D9E9C4C2F81B812A11DD512573FD5B
02277BA53FFB06AA8D65134C48390127EFDC4203173246B58EF4993A3F7D3075
EF314567EF7B00886ED9D52A21096C5D7C5F31BDF19D90657C51475FDCA1F2E1
8CDBC6DB7E52ECE9CFF42A6D8D27A25819A566422A14453C66C7AE281FEBABDE
EB23475B6E38A3B38CDA5F14B7F2355EF3F598428D37903EDA5FF9ED2B506024
E885051DB2DA993AA9BDF35B7B0F86FCBDF5B3F169665B6FE24264A1C8DE1654
8E65FDD0BC6281878BA29378369568AB99EEF1B534EA14060428A96CBF2B45DB
F7E244FF83A7FC4CA1E4EE266654748C6E6F4D3325DCF159B278B24DA94CA557
CB35F67DFCE3DA1801C268145E029827964FF58B2DAAE2BADB3C2CA89D84ED76
86663594976F9208C6B3C19D99421D5A31B75764567D4B68699442FA89551C1F
BC531552236FB40B53E3A579E447074823BC9738A5FEAF6EB34DE75B2CC3FA34
3898968032E4C9DEC8C0BED602BF78B758F0887E795766249EA1ECCDC25C60E8
A0B4B877808CD3CBEE0BEA6BE6529B2B2DB60D7FABB330A57A6481901FFCCDE9
366DDAF1153C7A39715296CD5939B26A068ABABF679984B8F7BDD9888C5A8F90
D0F4FFEC47A4CE8492F930ADDBB2A667C081821FB75A66E60158F417A9DC6E44
20FC9820CCC2FD127581283D2AF2AC1CE372984ECEA0E37C429EDAE97E081795
32AE10702A48C722ED87B9CB605AFADC7F9AA616B1432225CA444E70568EEDC2
36B565747E30743692D0DE6975FEB4F935762FE8FCF86B2600BDF5F6AB7A54A8
BA33619EE8E7C23F583DC78DFA75CFFFE2C36C0D34F2DE788DD70A36B6AE6D06
84519550B37AA729967A8CE3B177F2309D546D95E0066529F2381A3981955A3B
78CB6C88585D746C0BD2F8664253B09D567F896AF56A0FACAF08F9E767FC2F45
D3604D0FE04A9CCD6FDB0FC6323BD29DC4CAAB475D3D4F4CAD9445EF65D5D26F
3C5557E4A0C93A9EA7C866F22045C6C6577EA6EB46FCAA3A0C67D6B2464E75C7
86A05E8F774926DF8551944C29F068B159C0F505BE62652DEE0091DF799F3350
AE5DDB7450C0CADBF94E7B25E759651995BE070A1FBF490CC7D88879AD3DF33C
533AB2068D4A227387929B273D86C20D062B180E105D60D7228F1F367DE1710A
321725AE126E530CC560BDD8E3F6EE89F19DE217C48F1895326FAF275540AF9D
81DF82909FE635AABB7D3A3EDBE08B3167BB4A8BD75F399C62B2CD942E7071DB
F9245CAA37BAAC0808FB10315C8C992AFAC1BF590F85CE86A6BFD43B4D084C96
00B4943F203BF8846B57ADCB5A230B890A365A78393D9248E23F0F6DABD35EB1
1730B042E3B6FC7746D687300F90ECEA17F062BFE5E092640A5A42B10CB34B28
FB5F6A563C0D87467DCAE43C484D000601419CC2450023486B43B8ACBBE65AC8
9A7B37AF86DC4B2248B97A614929EE2787230BF41741C5D92042E0BBB5C70BF0
3267938588E301FED76BC80A337D4197DA539CACB70D4C066378D03711F1F3CC
94F47A0305AA8E5986E33394009559197A2B88D42AD04259C849EF62219B1AED
A76B8391844A831D727BEA6D6C5A137EDA762A83D71AAB148BA91519558F585E
FD2D36840A68398FB360A92364C4250590A93F94B64458508E6BEC94FD87729A
92B8F89D384F524546C7FF6F9AD39C9FCE8AD4037EA32A1CEC7F45612CC46E07
875946B9FF365FBB1EF36BE6029B707453F8E8F3A7E4CA693E3432546A887798
5FFC96CA623B4D2FEFB5473A070E08ED1AD4B59F7866A6D3F72AD2D4740C0598
FDF9E42A5F6F81EAC3DF3CA4531227E888522359194529F8F87974B4489B9676
9806E7178C9A6EA3EA7C0D5E05776A25EB4676DDA48FC93B6C685D3C8150617E
AD85A52811063A18DE1FB8C9F6C5C50274B4B1C7E6A48D18DE6EE02159C0E07E
5A83E25F55292361DE380EBAC8909380F2300C64ACCAEB8AA750E91BAD321757
14004711C21CA72708A69416DA41D51091609C50017C6079A02D3457FD047080
9784EFFB3C8B32931366E3F026AA8179E1D35503ACCF45DC8D5399D185231DA4
E9FE29692F3CB62A89F00CA36D0B37F7BA22A634C78AFDBE2B44BF239203C7C3
3CB54FCE3446278AB770D7B1754E091F0E4F77DB7147875B3416729E516A39AF
D742E730D39C1E86D99B69F6205D0EABDF01663308AA5FEAD7AAD5840F3C7B9E
21D8CA390CFD14EAEF94BA49A64CF9BBE2AF068B2AB05CE92DCAADDCCDDA23E8
B3D8DA9F8227A5EB46219BA7D6DE7EE2E56E77D41D368B45A06C4AC844D0775B
AEF808D2FEA2BEF33383AC7C37F0693EF0FB94DD866A1701589D901AB736303D
2569DFEDF2B572384FC1EC7D7F13E7A883550F4D05F76832AAEC0F6DFE2C1BDF
A24A6E3CBC40A3DCC1D1195D91EE406617066C3EA0554333695BE2B2B1896647
891F3E4DC7175221261629643BE95D9461BD2D3CDD84DA84200884D5F63C4253
C699677BFC9A30C61127F13F57119AFB502939B788278370259E0D5674D8DBFE
C49C4BD7EB6C3BDF0910A04F5F90E3593CD86F510757CD56991BD78E84E8E01E
3FAE6EAAC2E703465FF04802A3458F6629C3A5CCB847F11B1E958B208BF3A5E3
F07DF039E95FCB1F049639FF1541F40CA655FC4393E7A43B55B0143740F1B80C
50FB33E6C92D86370D5D3C402F2052DE9165B5FA989AAEFB2F85EFC620CEF482
77419D5B9D42F0AFB220FE1DE49AC61F3CDB8FE2FC7FE0E1D2B9CAF791B52A19
0EA2BD9C5C8BC0F818A3D4AE53CC9478F4020FB79F5C596F5D6FF440DBCEC663
2C4F60712CACF92B266F6B1C389EF067781B5BA52DA22F3FE79AFD8ADD64A0A7
A8EC70913AFB5F1CC8860C6AF840023C095291135BD040435D3B668BA8570CD8
0BB6983C4E8A5AFE184EBA57748E1243084ECD3E5D58A74D979657DA19276093
5178E836E1BE47AEB4318FDD9A16483BEB00217E532206C504556AD2695644AC
890E05A8E6A0FCD16BC1A150BB7ACE00FBFC10C32CA8463287B9F2589E909754
63C6127941CCEBD1DF1D7EFFAC512364DF9BB709D9B7F9F720A67AE78587CAB5
3EAF8BCDFAFE770FD2E54111620230D836B903FCA2B1D8484D4B114D1FD3738B
FF34F91A31C37991122AE51D167A52E001003B1E8D1E0E6288876C2DD4E1E4E5
F9EE3BE8750DA987A51BCE072BC40159F84CA716E425C9109C1E325272278755
8BE6499502E5FD0A9026FA43973C6C9197EEC60F1E95409CE987D7A3AC11D76E
7D16344BB087FE60311463595C540619D87B40E2C5A3719C0EB7BEF2A39BB166
C4CD509A9FEAB7B98D9A4A9A2438E956F584599D06C2377595E900B6C1467DEE
92F791A0539195D58D18C9D459C9E09AFDC7F470E48D27124D59FEF6F3AB2DB7
3E296CE5DB4AAFD1EC0CE563A048F2DE8A17FE18AC45D3E7C548C02B1C37326D
1172F83F6E4DF93B37E4FA0EA67E843536D98526EFFB7971E9A56489D894D57B
1DE869EFAC5A3D6F1B6C38D2E4E726935DDC68DE7C1F36A1E693DE59D2C67280
9D79C1B7FD27227E7933A131150448972B235B1427CCB20A40492CC4A8FB5137
ED5331D369EAF84DBE1253BEC868510B55977788F78F4CC28363CE8CB54B3765
5CE4935E6A7C55EF9B64A6C440824CEE4ACCCD3B0CD5F49C670D1747A32E8C0A
77E7FAAF2FDD7685FEC66BC5A81CF894930AA63AE7B2031ABB97DA0785463849
920F9A073B044F73DB0CF214D8216B7A82450EBB6D43896BA80AFCB298F47F40
39F7372A909F610C3A41BC089FE680D9B2751763F16FE1D3A0782563CD351FE7
265750321156CF52EBEEF9F13B338239E51B69BF78E5799447FC4650F4BC84FE
C6B880D30DF7D1C8150AE6D92E63B895CD19385C95BE2E86F99352A780FDE817
CD9B0E7DF0341D9894B6CBB34256F2EC05A791232B5141DBC4B350822CAC8597
CE79224DDCC6C93CFF2DEABA293EE9A4986058AB15F8F54713C48F34E6654EDC
2A586202DCCAB0A939482D896AC7A3965681E13FE0391CD4459CCE3D3D75DB1F
5D1B6F2467759CFEBF6550BE6CE58A483766BFC3A5F4ADD949461DA9225354D9
D00AEDB37B58CAB0E87099F10BE8EE6D3C73FE1AE3996F4182B05BED179981FB
4F7A9052961FE7D813DC59B60614C2D7E72FFD2E71F2070921067EA1AF0BDFEA
1640E4826618615DA3490894C7C6C045C42EBFBF182F0D752BEB7F3AF42492F7
6597DF80A2360BD535206765BE8F9347E3CA95F6581253198895986A84A25DC6
E9007C357491BFBA0CAB50551CB77E3D3B0831F0DE0DE96C5F110F195460C589
4A936090BE847E1A561BF06769F83566547774DBCE4FF97F9119649A69BDA368
48937F181955817BB41022253B975398C2D1D61D1FF7D0163B774DECCE286F7D
119F2ECCC1A06EF45CD55807969D7751807DF29FE435E26CC7A14B027F4C4ED6
F449E8A39D433037931943FED17A1E3AB5F5AB0AF0CB94706CE2536EB7AAFB31
2BEB7AF06F1848231C3CDA0EE906C5A341D76525EF6CB863E7A149177A5BC1FE
CFC5F9582E3BD8D9400313850D70A0E7FC4DB10C6BF22F589C5236204EC76F7A
3C6349DCDDFD47AA39709B35204E1A45E0D084F260058E645058E2B3B1B32CE1
C36E358ADF95A7A9484BC8B64F27767293A9F2CA64A5FA797068AB8B5E889029
DA8413018598F79D4DE96F37F7B99F972A8B9FC2FEB59CDED7502E91FD725B60
9FFD1CE4298042C8931486A8CBBAE654A418CDEB0A13DCBFC51BF53728D93B30
029F2E86A65ACC7E68357FE359398F2D249A3602DB3CA1D0002599F8A4F6A61B
071BAF3B7233E10A6C56AB5558A3B67B5F96B3BAB83AD55B080CD2EFE8A5CCC0
86CAA9FC1F1C489E707AD15B03B51255F0BBF9838E262B50FA9BA638D528A85A
338691E9EF40AA66F401599445B8D890BAB76E5248A3C9C3D70E861C9236A468
5A43A1B22079BB30633DA513E6987BE0A0C86C036F2E0E5008B04E9816311DB5
E3BB4BB0A4C81748D365D656B8B5D1C96120DC1D4A49FD15D7B5965FAEC0D121
0B838EE4996A7C66E0B2E159815D63AFDDFC846DCA4FE510CBA51D8EF8EC36BB
6400E5B35221E4454E88BE455016129571F75CA42E74BA4BB06A252FCF5F1AC3
91999345F5A779E4D4D153235E5476F211055B0C961CA813FF41FBD232AD000E
D92472B09B591DE58DDF8D0F137FD09BD2E4900F486D2A1DB12CFFDC622E31A0
B0D643968A02150A4BACD93E037667734E96DE608EAED1C11067AE570B270590
EE76A4C6D5004176EDAD14C8CB198BD619F1A79AC9BF499E79DB080E9B6A3F3E
B3E3186E61A733A936FE2702BF89936C68A836D8F3FB9FEF69B2C0EBFC022651
EA9305286E320BE4C7EC82D0BA0651B21F73243111D02F4C22810F25B0D8C21D
15097C81B2AF5DEFC753AE3D0B3CAE449353D3BF18D69D4AC7A752DC2172F99A
317941E18CA27973FF22A0D0A68A5D1A4556AE3635BB5F0B081FBCF0407FBD3C
8915917F75436966E38E481AED2F4754C71AC572D50A7E18D422A52DEF62E9CE
D297A2505EC3CA2A4C0E997852B119B42DFFF942AAE4841EFFBF0CB868F5D521
B518FF16A4F257DA93232A6A385976CE48D122967A661F4E41C33ED3C747237A
6E0AAE0D0D480D7B4E978B60EB09C5C03BB4F7344C1C677862C223344A78C4DE
91999CF153F5875F8F4D046DE7EF629FDD3578FA02E0F2A2C0F3B21DEC5693DB
67B83AB959FE7755796CD5FBA3028A60E1DDCEE0ED23C82117C0F37BF496090A
F5B35C3CD3E5766F23FE00320EEE273074B9637A7F749048136D96ED689EC260
BFEE9D4CBEF1D42B2D5DF35592C3A28BF8CAB912BE727B6A97DC2777A9DAA1A0
B860418661B2A15A177CDE5123C540750972B91C0B1CED4211FF196EE56E89E9
C036EF1B7FEF9A926F650984C4328ACE4B92604C73D22801A80A2EC6A7ADFFAE
61F254E9338510BC17AB363857C1C0E1D5E76534B21B5290215971758EE9ED90
AA9BED4F94E75633568FD6428C81808D21720ACA15C2FF5F9F21072A575A7B73
049606E431B2541679D5BF920DD79156B0EBCB0D5ABB00DB89563EFABED8AC57
55291E80ED90F60FB936D7F4C9084F382FB6EC298698C5CB1FDE6F08F71B9D04
8A7C2955ABE3EB11A8503601BCD5CAC2B9E6AA26C6AC580EE5745FE8EF418314
293B004E276F31CEAC75F7A95632ADF4D48D1A004B586D29ED63248721974FC4
FAA7AF979E544F00DD5551A98F338822AC3010BCE6153436D899C6B1F9BC1210
AFA1408929BD14C828AB354604E5DB7AD2D6473DF14CDA93E6C4465074DA0244
F2AD705FE83EDB54453159709EB9D594326E2E2EA87A96CCF23FEAF7D2B6B5E2
3A054BB979C78E99CF235407BF9BC52630BA1C17591B158066C1D59C82FD0208
79779C83CF9529AF3AB1A29D7438C4A02CEA00006DA31157A76F08E32A7635FC
F6D3C5662AF8FEF3D8C62B01DE2DECD41144B430950821443AA81ADFF78BAB7F
A82E77EFC996B367BB79E69833BBDCCD2E56FCD73D83E5230BF283B616E871ED
F9FC0F2C91AFCE295EF14BA832B1D322B58F2557289C60E9B6CA26ED5D96E3B2
C6CD97101C8379A9285E125D6388D076F7136AD375DC1F42D013F82FEB4CAAC7
9EC47AC96F47DFBEC05C89F389183F2CBCD3AC2A069F46B216E366C8DE34CCEE
71ACB6249F1C533BC4E8C02F505F5B55DF5BACD2459805F749D7798573F5D8A3
CFC8C97FBF6EFA2FE8C83895DF76F1EB7201D4CD35282AF2A301446DB0DE56D4
0B76DC8DF7A1BAE9F5377F86B0E3DA2B9CB4D5FCA212B2D3C38A1C5EEEDBA026
55019557A4A5B85145322246F033B8553008DFADFFF08BD037A919CB22A9BEF7
AC54A52EBC6885AB05948F09E5FB56C639106FCA4D1D5E5BD5FBE88965B862DA
71CFB6E86C72ACAA04D5FE4736E056EF3248B65C331D398E56602451495B1BAD
0491DDFD508D5F3D15DAA5C0E94FEF79E6043BF9C355A5C29EF4F8C47ED334CF
FFDA3E53363FC62683D753BBB882B2C3D20497B63A01E6F90336EAB37B98B8D1
4FB26B93636FFC2B2A584B55CF0A88149C84C2ADA7D959840D71BB19C3DD2C4E
988752AB10839C910CEB15799928220DFC4ECF5B47D7B9B44E44259299A70CB1
04EF925650F24B6418D513127180EAE5F4AA217A5B8C1C10B5095FD5B8587F42
5CC0EC181FEE5B3C2EA4EDBF8EACAE17BA93CD3C10CE4610868ADE154465AFC6
F1B57EBEA4299653008DE12FCB153CBA7135FF891196F9A563D3A8768387E9B9
42220673DBA5DC229E9D659BD7CD2635C1317CD71B2C89D4B906997D51FA775A
1D370DF51062DB9BEDC9492C1FD92ADDAAC2342258F7A50E7FA9B2D2762E12AF
3B02A6BC8E8EC1DAECF928D104702E4CBC573F94A87894700E0AC1360191CEC8
3BAA029C4AED537D6A8670BFA0ADD9E5B09E0C0BCCB3E8A66D3EFA3667809B3A
BD6BE718A99CE066A909394DD261A4D3E8D9497BA6DB70C1DE63EE04594C22A0
21DFC34D9EA5CB9AF283ADCAE7F69FDC1496A321AFA0FF25F89289D62D7C911D
06B86C96A97066BB3E8D68171733D227522E90E147CA35ED3AC1E730D4639FFE
925C54BCD4ABCFAE8FC6A3BC238983A5246948CCE7C869C2B1FBAC53BE474AC5
1FBF19F93F61B94EA4647CF97FC8CA7C22CD6CB22806C5AB65F0BFEC494477FF
B43BE847212DB60D5241CE89472608A8394208E541812255D98D2AB74ABCAC99
D8B7AA9056F0DE55F701A63A7C464B8A4735F2C78F3E31DF844B80FD97676BE4
BEB77FE63C3A7D9E07F0017BA8AAD46B661B48348BE9AD8F179A4A5613CD7908
B79C1C9D19821C459CEAE5159CB936D8A87D24838CE451DE6F502DA0138E58BA
AC319A2994DBA9B1A014E50DAB94126D0BF3F3B998563DF256CE06E3CC7AF6AE
4F46C65E290D50E2BED3AC7648B4302DFF315F86656E723C6CCBD0A3FD8A9F88
AF4280017C246572EEB7D55FF5AB04D531540934B21DFBC0D983BCDA424008DA
3B7FC06BB6F833711EE7C214EE201EA8BA6A0A65075E5DB14987313FA25A5E44
B5B6105D8765FD15EC999104056F3408F248973B6DEA4146B857787522A157A0
EF55C49978A94A5A9146DD2BB541D686147B390A099993B56AD0F47A20ABEE6D
5191CF27D8D482DEF3BD93DE0E254693519CD28AFE8466EB82A4C81091C225BB
9DA2029D2512213CE2CD963FA447A718174809E3C057C10FDA8B73C4896A8543
CC7F8A03D617796C8D750304E9FB04298184A18CC89B995734EF7BA8071987D0
BFC6F91230E8CF1CC32D55B8458C47B1903F6F8091FB9D94210F34C1056BF638
C9EC887C0C925B3A02BFB838AAB8E9264F5A948C8591F54E3EA13D098053748F
F1ADF07E3C647B81F12F1DA674A6BF855C037EDAA760C392CD09D9FFBD76A072
B245A328A7DB6D82AB9A6D3402C606DCD0870F587B0964C5DCA5552216F1207A
83169474F718751C24EC1C8DB3F033A7167C9A135D9EE6989F2C354144E5D76F
1411E336803E75C24F42E105F15786376A34EB75A312D075AC6F3B3372E8BC7E
299CEAA0C72BBF7A320B25612B4387CD0E9278AD067731076601EF313AF91B22
553306D9B94E56CDF9E55AF95D7822394603AD48723C825B0D6141D295585AA8
1C97FF25EF4186AA6D1CF8158C595645B835F81E8B2888C791FA4E67D56C072C
1485CD0B023A5C6A7C9C1AF2EAE1ED06DE60E9BEA12C1DB94742CFACC5F08C39
1B5BBD99C1A66E26C8EC0B4CEAAD76C75945BD08F029E68715080EA42AAFDF7A
E5316518C936794A495D71A3330740EB5F7F61CC55FB56CB71A10FFFDC4A0A7E
904644CC053889D457893140879005788A5B05C8ED9BA9A30D2BBB00340FE05C
921096AC06035FC90A281B968EACCAE23CAB9F3FE97E5157A00015149B70898A
D3953256B49BC07479FD4A3CBBDBE6A50BF421F5E272BC73C078DA889E434968
534CDA342B14BE2D1E9213E00551B37BC3FDE5ECACBB3BA33CF21F66B79026C0
3C62CF7DBB1829FEDEA41654AD3F923B9EA9629C9DA663CC9481C3574A85D99C
72701AE41D3E11315D0D65050966FBD8687DC93083763D0264E4B823947DC4B0
D350718D8B191F04370196094CE7B8AC8EECA20CAA7CF4F1138F534C15749BC2
4E73D9D55F145963B6D0C6B27F949659C0BAAB0D65E99113F7D2B3DFD3AB62C7
5D88D61FF08EBD3EC192CE3CC46227A84A8B2D98E764A2B7D570404BCCB9D5DC
3BEF9D2E59E196BAEA1B686223A695B45F5B930EC68AF3D5320395270872D308
E3782FA0F4DEDDF9B939E725C8F475E79DE099EF4FE08000685715B1DF6259B0
85F75849AF4F75E3B569A926CE4C6EE2AF0A4B6DE0CEF2F129612F6DB5FADA0C
6E56FE7518EC1912CC57598664EDFE62E1FB080B863E859CF82DFD9CF3B6915E
0190B77EB878E485206156AD4A1E09E0E1DBBCE5C07FD0195D5E74DB51FB36A2
15D0FA6F9099E760DB4FD58B0E792A5AF8C3B8B6DF7235D869924573D54F094A
F0E6634198310891849D932E55F14BFC774778DA94221F86D0AC744EDA3374CE
E05EDA8F05424CF37B84C3E066B665ED5054B1E0D4A543A8CE435F2112926D48
FA5CC0457B54A81B08B5FBE6351C775A2DDEB74B04AEF81BD048BE1DBDF7857C
0A6824B38F6ECA12459CE1ED2116D8C6B88BCA147352268B893DC8812AA49D19
6EBBF5032B632C6E523D068F8577644643AABB489BF469E1D8499AB3449E7002
DF03B3835475F09D2FC74870A26C332D3D8DE9863A4D3B7258864C65B253A656
5F51FD6A201EB1A40B8C7B12AC06AA92B7C6FA81E90DAAB67B9A3BC1E65CBA74
B4BB8EA5836B4199A3DB3333B694B67727628CE7F0B70DA930E83BDCC24587C6
744D6552ACF9D782F259E760D3A7AC2318A002948D0BB46D6744680FAD8BFD6D
BA38155C93854527B725BEA8FBD4C10E14D9113DE84334A238AFBA631551D35E
04A0593A8DEB63BA21D11C5C99FFF1AB481F1C6755ADC822D2A164F27F9AA276
C851F0DDB6EDF5FDB417F3875E2121D5D9C979AF7A39FE3792D26D36AA7E2589
8E29FA7B50C20B8A58CBA94EFE6F069F1F969D42532A207F03051FD3B5EDAB35
193E865BB70738531CEA9C31F616E323CCE44CD87EE9E01B70E83A1B3619CA41
6914C41F111EDCF288AFD5AB262631F6D3AD4D2BE01A0CA5F353F0A1A1635721
4295465E443B6B46FB2108EC62303FEE211C7B18FAC168E4E779D3CFFE7020D5
39D6AB25713AABEDFB9200B8286EBD2D676392312ED6600DB29CCD34D0C841D2
D97756A81F1E1A7131547E0BD62624E56F8CD8BAD2D5C763F7F052B3A327E58B
7844D729DE3BB81257F221A0D221911032AC146DC646E7F5A922749CD7481175
E3CC1255DD4C12BEB7ED89FC9978F33020CBB9F0607A306F22ED4319ED7FB5D2
4E2E95562AF2CFA13C774F4881C090E668CC92FA4532F3C22B638F0B8FD51EDF
3AFAEE573DC1E7E5AD7F9D370CB0C30E5E53589CB4277D361DDF9717679ABA8C
30788943682980B4D41598F15144B681E8F375D04CA19758EDEBD297C42680DA
4697B839AE8294F2ECDBD1FA0AA296DA9DFD2E7FE0ACFC196875665A23F3FBB3
CDE8FA4A777161FABF2E61241D2FDB7A4966C2BB2C871F885910E04C5C817624
82408DC257BE8746D99CB33BACA7EF1C4F8FF8BB1A260678679C01924D011691
F7B90241CFD1F34261F97988E5FA97105607AB6EA76232077B77763AEAF23FA2
2F506291B18D211A061F6C46F356BFA27C35DA908E4528065A60E10A6149E0CC
F4B93042CAD9B3058B116BA9B38EF3CFDD06C828A4127B9B74855F3733C12A2E
1EFDD94638E6B5906B761B5A55D5DC2EF09EDE109A066161641030BCD6AA56C0
FED54776F52973B3FDF77D85D43709BF57C95D9892D3F1E689C8C563B8FAA8BE
54BCA5E3BFF86982C1839B88E1494C21E6998F951DE2FA1CB50DF0B0179FF112
34EC20DE877E5D7DF711C33391EBC607F701D7A86EF66A325D2580E1741962C9
DE36EA803031F8336EC713C7156AAA18778921184814B9E797567533E6AE7683
889239262D1B60952FC9B7BBA1E0C9995F560307482032E6C9B220B5E6B8FEDF
0C4A956DF880515886408B1C906E0B331D256FF9653BCEB3535315ABC597708D
96BBA7E06C768C73F79B14C1E336BD6FC65597DB9B12C6005B9C0A1A824BA691
2379CEF50DF2BAE36471735152E896681FBCE9FDAF606715EE32FFDBD2C890B4
E6FB97E9538BBACAF6AA5BBAA82C7477D6CC000290B04CE8B24764D050C74C5F
1A4018C5B1D1E6F80934F225F840CFA05430E356D99EF4A911847B04FBE05792
24F24CAA513DD6C665499CC12715940D7A391AD2EF84B7221BF971498AC6B29D
FE3B932B3C0C65EED4B73DA07FBD5774AAFB220D52BF048557984ECCFECAA5DA
FD97118F2F01C4E1B0036DAD5C10714EEFDD6ABE847676A5EE824FCF86A700E5
5824E00E0D4DCD4CC98CE557E6C1574F6CD4F258C06B04C02B4865B3882A75A1
BB9233B1C86B31E47CD003614E88DFCF78074F5379A0716AE84DF57FD8F2F18C
485AE448EAC69C58860EA05D75F4E14606F6012592B1D57F414F3FE65437BC2F
35648BAF1F1DFEC9937F2FC605069FF5E42125744BE18D779ADA929D2C93BCD4
008E222E0A626CF2FF4DB50714EDB296AD1A4AAE908B49EF25EF48E7E56CA2A9
FF346D6557BD6CB3EF61FF3B518AF201DD9445B9BE5281CB07EE023427A92F9C
EF2D56F5C491DFA028C9F1CB6735D3C2DABF79EBA135786B9178275A03E9459A
F2DD2E2015106BE7BD81654D4B7DD0A8CDD7778E5904BE8BD7C96597FC936605
DADFDE29BBDD52AEE9B1DA9006F075E27DC133ACE8E6E6C37EEB963D6ED17D42
B4B280BAA03CB349A7C0037BD48C00B2CDF28E7BCE01645DA04750BFA999B0E7
17679505C9D52884F2DD4813412C5E8D94F9E803A1F4E8CC696F5E0ACD211E94
0090B78B9ABC7684724C60409700A08AEEBB11546ECCA77683212C8B6F618CBD
E18106AF545301BAED4B5C07434F4ACBC754098A7069CCCE1AB81DFA802E7261
AEFC89490EC4209FBA1385B053495BBE85DA04381B8A89DCE63D8C624DA53079
E4A36EF922ABE42757022F5841767258BD29A44B5F412078C349AEB3BE6FE358
C1B54063292A528DF0167174D65AF973D985C3B5561BEF9E153A956D5B252A33
7AF574547135A6BCFBD1EF6405AE7289C0FD5D7B7D952AA7835613D02AE3865A
34E4948BA2119C9B936D0283A957155DBCEBEBBBAAEA6153E3512B31FEF4DDDC
1EE3837941C0D958BD32C5E7EF1D6C03E4141D9CCFC489CCB0D27A29F102E332
085EE61553B99EBFA7ABA233118A88C2EB0FA1C951DB0ADD125F3E582830889C
632D5C15592D9AF30A4F75540D27656FFAE219514BE79FD6E1566AE808D27338
A5DECBECD3A1320B2460E479004D0381562714889852ACE4224AA992D92B8310
7A593CA53DB521191EB12DE546158E4048487185D7634A33D6A24D69C6A2FF7C
DD41350AEC552B1EF0DD5FC4EB5D027348A0694197A3FDFDC6CB8AB4024CF3E2
6BA5D7B4D6160019514F62BD91B92D03DE2C785B696150FE3FC4D7C92FC508BC
9E368E239F3955864E470B705A88E9B87E035EBD28B8F67585A22811B1D697B5
D5B29044CD92D84898CECC20935A9486F16E00DC0454841956E4938C6DF95E28
2EB3C71B994C85EF0D438E1C15460FC818925A1E01BAC7489DE4CD308C436B60
8AF36400564BE6F6D44A6CEB33D4106D9507F2CDA72F55014055C22C4F765317
5F8E22ADA1AAE84955203F7359574B2BDED25561F659DA7E1C6E7A336E30C092
741BA7FE2518A9755417185277A2D8E9B0FAFA7188A2132BBC4448F45E494EDF
3A75C620A66E9A692475BE4C36402506193F1FFEBD0CED77B25821310AA43C64
884E1CD8572B3C609C921C85C242046F3455378DAA02A55E2B62C62EFD24963E
6320101FDA77B3495C32BE58D0F146D5B3A33619E550B47ADF6508629FAF9DDE
BBF58A0EBE7E591D7947341B6FA90F599191BD973FCCE065F1300CC254F794B2
91E90232B8D5109E9B82D49241BE774022435F496C129EC1886AC1485D64C862
C6D2FD6B15B6ADC4529EF67221876314438FB8AFE12AB1890CBCB6A699D04482
ED8972A1E3D31C3E9E434E2E44E7A83AE34E39D9FA652F77C24956E30B6110BC
A39FC23F3103656CE9E9BFC931732D1E93EDC97481D07E1207BB8C4490C88C72
F0642F2D19862612D96E53187241BD75757FB6BF6A62A89426B096D56EBFD574
0375A6FE96AC32BC73C49196DD8C37E0A4C86ECD464B4380E65047A7EB51DF0D
839B32E77B2D444C2A2DDEDD2BCD1747CD66DC826583DE998F9AEBE37DE50684
18F41A007E62FDDE7FAB67419E2012362C5E81BF78DA7A7E55419E822E60BB45
53A5088E3B0088E0898480FB202CC050B1A18A7F79A9DD91EF29E70E89D54CBD
642A74904602DDC56B18D175BE3EABE92A2CA295436D84076BD9BC59BE4E5187
3E114C3D3EB1B82A8970B3D7F625B91DEEA1E9F720413771655C46DE2B199257
CE1CF48A174E63E97A47825AA81C6EA85B3DF3D7AFEB6DF21C017A5DCDCA71C1
9F3E922426FDB526474110592B7BA0CAF14E844B18658747CA5689A71F71CDA3
E43B70FD57461AF046F2E40DE131BCBE2367ED7370B831B28E117FF22F833796
6F12D62BFCFB382683675C1A41F20AE37AE6B1BB28D88F53B8F4154501A861D0
E151DCDC682CE34FA6932846ECAA989823E3CAF9672662CF28085EA7754FBE0D
A36C30A2362BC2E2E70781EFE6C2C6913DF9E020790534D09C6B76B6A92BF3D6
021D36A6B305471458CBDA499AA4707C9DFE853B8060A8594C16AF27F7D51295
96193E484D32D0D91530170BE2830444DDF1460FBB1C7FAC0972E1DC2817294F
1527E3BAF3C54BF34DED39E42130AB4EDD2F6B2739E0011FFB760D96E865D5F7
32139C9CB1D726D37942357271298F30742CA708D36EB5AE41B39C001000F408
C292C4020DBF1B8BB181EAFE54651AFBD0BAF69E02DF556421B92E77E8D79A7E
58E980DB0908D38961C20C64E0329FC1A73065B1DCEBE798FC7C1AF535A7E4AD
9A434E039B6F0B876B39AA3511B168F80E8BC7EEFEAF5930A217B00F02A288E8
D73BFB6C5B8DC2CA42A05A0B964EC5462DCE39F0706CC34ED8414F1AD085B6B4
FA9903414038848D3EC047C926FBB6E624748D746EB4B15D1BD3DF345EF15102
4DF57B69A0366B92CD9FC501D5C4BDB1A3DF6F7807BE3AAF872B5C5E52C4C93E
0A5E288A1E64AD623D895DAD7D672FB3C1A29E1E8D43A51225ED6D21A46EEF27
88E4C435E663F588A62F70C5A324A2BCAE5F44E53CB7FB9BEC7B80F34D432C93
3B2CB783528D0613A8C1C4B641A0DFFA93A4CDEF85B4D66EC7DF7F10A914B9CF
957C59131830D88EEDA82531A284EBCEB943B04654CA7F0E81C1A919DFEDD094
E5E90F6F63E95023B6BA06E10216315494C6EA8A0C843EFC28E4214074CA959D
525E5D7172759AB7A0023255838083D457ED507796FFA5969D81439767D59326
070AF2F28C4B4F13C6FF73F0A8A7101DBD1F5CA6E578F231C30D6F7376582388
5C34D3165CAC95FF8A277CB16468EBF2E5C0D632293C516E955F8B9B2CD8C606
CF6919FA4C94D42DCD0BC784EAA6DC33D4F490B5FFE110940C39223C21F9219C
9A379DDB8C29D1E8262D2550A2B8E28C8028D64F0A77DA456AAD0AA375C0B4B2
0CF045494D6021513EABBD15B0EB36AA857096278A5B9F34AA86C291BE0EF0A1
C92CD01918AFF3450CF804B78D2FAD9A706F65E9A35CE6940752830C24905782
BD5A57E66371B214C009B30F40099C3C96FE4E143BB498C30482633AA6E650A1
A2E4ED6BB587CC2654DAB7F03E6707354075C6B7071564DDC597BEB2A6EA637A
FF484D0B64CE05A0BFF24C46AF590CBB1D913D64CDAE5AC2F89B9CBE1E21C63E
7FF3C5633DF6BF17DE3CCC18C1EFF9022A9518C0F8782F0833017DBCF1BBA4F7
21BAE61E7F50CA94A8B58594AD2442EC3E3286B0FC0BBB6E42A725E685566346
192E2E17BE9F056FAA0048BB7B280C6267D2BD52E415A2B9CB5E48F316E4BC7D
FA5AF52D4FED87626FFE0C48F0617E82A412970F87BEC9D73C7D4BBCCF5C6CE4
5FF9886D578D4FC89054994E5F228497B1129D737497E5E34E562E4396F47669
9299C2117C81EF9B5C81B5474548D8238930D38AC2001005A4B9D343B4992C1A
1DC2572AEAA3504EF7341BDCB0680666EAEC710131C5526B2D6B040CA72A808D
563AC391A0BE667CA2CEFBC275D6BE8473CDAB17963E1F217E310465CAF1FD8C
0D2A607653606E3A4D74BF25B4903AA127E5A39592B82A9211C504BFCF68CBDF
9E850090CA6285304113DDBA6AE62C47756713F69853103DBE4DC65412721940
77DC054816456C088DC2A641AD4F112EE428D172DCB79C43F77B0DD8A83716BD
F5A279F6822E3C90564ACB9DBE31B22010E39A7DF20D923C5A0D5F40441A9D1F
32509297381231AB5C1D701F82ADAFBB7E447F5F81F50A73DF1D4B54D87BA6B5
43DA1A5EA6E9421D4FB1E44BDF567D60C8737E19D82EA6E3C53272B61EBD95EA
8BD914F90BCEF2F834159BAEBB660EC891EBEDEFBEF7FA5B53A55A850F49E541
56885F5163FA4321A3F9257B915D0AFF01E0369E347CCE6F97649827571DBA5D
2A8ABA28FA5D9DA43CE36A660C53C5C86E4C84D163BE479D45E3C2CBC3C22DCA
DF6938ED2D1529498B1F23D4BB780BE03EE189DA3892C9B2AC0BCCA018ABF672
17D7C1CC190B333B9F9F4A182368C9FE0B262A7D3A031361891DAFC4F552A319
E19CA6B3AE4F73F45A94D885387385431C1B56D933854093B1D9631C9E2F8D3B
ADE2C19119638DC47B1DDDB7654240345F835A74B167FB5C6931248E89DE023F
BBB02C4B32EC2945E9AD4BD39304ED0F16436C7EFBA64DC5213DBE5F920E5F7D
06C415CBE6B71B2099B22CB84DEEC03026EF60095E70C27CA938B29C68B50F94
8B5365B774F457C55FA21E5673FA162AFBB3FC035B51BCD0124E237615BCCD94
0E5D30C7E1F26AC17C87EAD9C5800914BF3BFD57663BD64EA93402DE20059010
7B9D5F4F80FF7CE84EBDC9A3A02766D23274B3D1D6300B25C70E11E6AF299F08
71837BC5FA836A715F7D3CB267B8BC93A010440476D61E52046446D53D8A4E12
717125B74EEC67B637EF99647E44ED617CB144B6B1D002B44A8F00EC9B56A5ED
9256D4E391FF9387035C6D6B7A22DEF490A39C9158D94A55B7EB517D383D5C21
82C30A48A8E6275CA3E6D431E16BFB664B68BE537CB5554377D04A7A0A803CFC
DB662B2DD5768F3E64585E3E4267B69029B492A441E90F5A46133D734D6A0F29
5943F5D79105A7742ABBC7E288534A02A3FD0BF0654751E8872DECB82B796D87
574259F365B4EB6AB7AB661370FE893F7F3584B6278BB4350A9E736E5596D34A
E50434A6ED01D977BC0EF665205F158061F0C8B3B5A76F19CD22A9FB7EAD29C4
3700B8832010B5658DEAE3D5943732A9B0C0EA75BE6C80F5E4A226663FEA3DAC
A064F17A69D28E53C9CD0C7C7E2408A75DF7E14D65C0643F192E0C71399B88EA
1ED314810E89F2916BDA23D48013671FA78839250C22A3A2B27C7947C8461B59
61CB9E06904E4782EAAD2C28337595314F922278EB9F468D5200BFFE75EFCDCF
B388960019828427B133F87BDA30ADC37DCFAE4ADF1D18CDE998E5AD38C91220
2A3F164F209C104D36FBDE9A4C5350E62E7D56F28526A27868A4501EE3803B03
4C8E51CDBCB7C008B5CB56F5F00003B042C2260D8E44B33FB4616F8BFB092E78
8D9767398C1053CD1BB36C1402266FC4543EC6F0B6E8FC302E204DC7474BC04B
7CBD9D0795E7949E8AD82F9D27383B593BE6175D2F88E5FC1109882B12EE4692
79A7AAC5F206C73EAECC0F1231F2AB5382827176B3CDE71ED9AE646CAE186C8A
A60E0F39304A2667125B153B3B368D09D9D05683D8C07BD6BF8598C24C9BF470
5A64D88FDDF1236454AC2FA40006C3984F443C3E08B12E7724E910E61AE3F4B9
7C425A500733ACD5CA7E670DA3F34E31F5C97CBABBDDC5F39DD1B5510D630EBB
7E300306256DC01A7533079948844FCBBED959B66AB83AA487083B8387C1CC6E
30FE9BAE1A93DFA7DA0641DC60E24E1F5F11D8F4B8668B9C3AAEE6A258B6D920
9A0574E465E59DFB7FFD428DD2308FAB06EBE07C7F90E7D87EE45C091165ED5E
406FFD9FBF22B3AB0DD209584C4CB0320963F10C2769081A6FE11E9220384881
1FA6EBC71B967BC5F1D572272FAD826D6793EA149905FB2BA8A3FB7C31C82591
546D2C0DC288D35355D3A3796661DC001212C438D873651C505AEDA80E4E1F68
746C4185B871BBE0814424772673AC049932BC68D5A3E725857240550C6B0D53
C8D890758B358449B0B5D6DD17466DE1598DE9FE1B4521750DFE0AFCEA3947C7
C5BB77278036E171A333068A3CD649F7C1E6E44B5AA8A9B17D1FABFD4E095BC9
67CA09611491CCBEA2DF46BF1E545753F5BDF22DC1EA525015DA5672BE822F0E
599ED4C1EA2D30F4E634CA973C499B175457A886326068BFE6CF29CCE50B2083
CDD42458741BB85925B0546942378F18BD93DF85C8B34F8D73B1CB19FCAAA356
FE4393181CCA4E201CB345DFBC360566AB81CFE2DDB517DF9D8E7EC2D219B8BF
0A65914CB5881EEABE71E84FE0DA2341AB820550A651C52416DABC4BBE45050C
9F18815C7E4B78FF0012E637E8F74A7116942C89071803E5947DF6AE2BBEE26E
71E777F777584EE64B9C370C246CD03F783DD512133FD72950CD0E5D8CBA3BAF
3DE45FD52A809B44C3A767A6FC4F418E3B797A877FFBE57C5FD7FAD53D5A5EBA
B71CE8D6C566E2BEB4A6C620F5CCB9AF5E48F350116250299DCDDA166F492986
E91A41802A01F53E3E53B161A4C25EBE8941E8681E796666C67E8DA713CE7541
C363D83F559D7CB4C8A3844A8EE01301BCA4654FC1AFB0B8383CBA5F837600F3
9D3BF2C810D220AA61943DD18116A858C176C2C1A5AE93766BE711CCFD36DC1D
4A319DEA9339C930B4F4EE623C3B79496B58619A69BD2E60F3924544ECD76FDA
12E20A72DAFFD39DEF09D3F6AE2CD939A8241EDC8C760E95500F51AC85A12A16
AC52739D3510F0B7FCFC4FD3C8C38DD9B4017E4C7082327F6F03787665361808
6DF7053B0F08991C94CA135BAA1A38F64C113A9DEE975B68709A6DA192C26EFA
CD2DFA8F58926C1B998A070B95E04AA33E583D0AE56977A358EB3091FF4CD7B3
34050ACA50BA45D59813E99832EFA6DA61223049B0027A3E43A1D8193C2A4791
F74352AA4FB6185F0C710D8DD5654B1774A4AAB69F261BA45B1CD74A3FB1BC0D
2A734A40A02F8A62562E3910674F1977724B98D94A10CC50AE0EE34BA0F099B4
1622F20C348D43816A31984950D2D6C81D67CB24E5C2FB358ABAA783D1B46239
D9076FE5BD2163EC5A85AEC6F95DFBA7CC380293DC4A74CF8ED249997C30E478
596DD954E72D5F65E1B0DA77EEBCB3FB7437AFA474CDB3084B2F46B4D423D11D
4A371A0917434FE8BC58EDA74749BC8ABB143588FA32A7CCB603597205AA9DE4
0F156B94B4FF5F990D9727D09F4ACE39D3EC81CBA55E85C81AD9DBB73E05A975
949A35B872B02BE42D86CFCFBCF6AEA2E8FF340025FFD84E45E553B1CBA78C84
5FD017410B7C09A6639FC4A86DA77DD7791132305953E738C46EC6C297C44AEC
39AD1A206968BAF8090D3014BE844D4FBC50CCE44667BF3337ED29FEE65C2764
D5F90456621B02277350592043BFEBD27262326E642B2355940C10A8889BE84B
2A1732F723B18CD42D50CA3C0A26A859FD524F925D32CEB3B91E62935DB93490
EC59512653B598FDC14C70620D1293AAFFC2448A447EBEBF075336DC41326675
425F305B0D66315CA9AA49A8AA60D652A88273B9D8529C32B7AF37B3700E7D23
3DAC7AC4B7ECF26129C93D1F8F28A31F9EF1CA46CAF015A914E58250CC0421AE
6B76D697F434EDDDAA399EFB5FED482B2C1B2674E8AD62C1D68D43EF77AAFEEA
2C4B6483783F15D03337458A99C22F147CC15DCDC865957140BFBC888BE7A5C1
24FE6E1F7B33443EB641099B89285B229536AB1361868BBA4FBE6B3082FFE732
F79BEF2339BD38D34471E71BCE15493F5B49FDB768B05324765A343EECD7EA68
A3879E4A552151E9AA35FA303D650B4FAB0C6D20F2FA36F974F3B9385E552EE5
E2CF6EF6D5F676986E20333A96842B4FCFA01CF7C23C1F09852ED8FA2FF99921
49C3BA35247E0E33B9F5FD158F1813DB9D70C6FD1D93798E931C310E5F95794F
364B540BC03955049E92D7531C7A97543044AA0CFC63A9E3D0C8E0D0FF8D21DC
561F86A70C9A400EBBB4BAFFD6F1BD67CFD99613F749C45764F2F77186C8F2FA
ADD02193EF623A3A24669F45A8AB41E8B0C303277EA93993BE1A50199DFC51E4
81D0B00F5BCECE728B403A2AE2EE98DD6CCB23686773CEB4230EA00BF3A2AA98
F7A83B6F40EE2E744859535C34B5D8A0D33F2F422B216E6305FBFD1AF7398E61
F58F3705B10E31E5CA322FC0FC85739FE0581B9A9E7F3B2510656CA705C6DA05
4251F73373261CC3B55E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFTI1095
%!FontType1-1.0: SFTI1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecti1095, tcti1095, lati1095, lbti1095, lcti1095, rxti1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Italic) def
/FamilyName (Computer Modern) def
/ItalicAngle -14.04 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFTI1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-94 -320 1401 937}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F3352947BD440B27EFF35014E69B2D4A1E3E6C11
B5BEF15F1C9B9166BED773C0A7F7CC50982C77DC7E78F250433EEEAF42CDF094
ECF6E1ECF893F6FEE69AA0F85D5DF1E7EADED78FFC156E291628F8CC7804F06B
62D3BA889336AC6ADBE1B7D60480CC1B296F9BCA97DE33DCB279D6F0BA3D9A77
A23E61EA065CB50088BC96CADB967FA8D5036C8555CF1BC24BE9B5A5ADB87A0C
376E0A947BA6CE72C317012D37F8E705B41B5691F1AF74AAE195FB30F963A98E
AC0DD6DF90B9446767E26BFAB29C5137B9577FCF00D8436102AE83B626EEB40B
237373200ED0F4E65426EEACA520A1ABE781A97D898FCF322DB4DCF6BD2703F7
6527C76B8CE52F64CE259A3E658B4C11AC2E62A7850FFC2397A96AB26D8425AB
400B67D191412DC8B3ED0D44E4B64435CA93AEC6BEE702B9D3B0F59B7B62E6A1
534CE9687AFC4DCC819CC6A624392455155D18510B8DE55E94B7481F52029839
8EDD33F49AD664A57F6C46CCC8AB92CE365A0F10AD75A110791CCE87579E8BA8
401BBFC529DCF7AA05F6081653F573F5A5C64D1888F358456064948CBF73369D
4410E744F4F16C634FE8C6E0C1E02F218B069277935A3EB227108B9B7FA9D78D
563C5890384F13A6E29A14234B37B223148F9C270579849E707C6A729AB49070
0D991DEDB7A769EA9B02F440D64A25EED6E67D22D1EC883EF5D8A43E34700C9A
DF377C2C52637DFA33E7EC4894071D48DF15130B59BD9BBBC64F0AF0998A12F3
F99A99EBD87A1C043EA5F0EA1486CE84A2673C7E2FA8C73258346B56EAED9BCB
9D2F8B6884E084BDDE7831DB7759E76EE69159AD3B56D9B17A776D27F95AA378
F68945C7C690C966DA9DB1DDD5343DCFDCF5774FBF8EA4A910FD6C3E16E687BF
D76EB961B6D7DD2B089FDCF21131F5AB4BE5BF0514687BCFD5F19A8D4116498B
F862A5DDBFA35BB75A359A06B199C28ED9C017E0305A0836C5C43C5CC319F1BE
A96D469CC7D0E54232744BE776B80D1D1D7F10BA9D83194164CC9B7F1E334F02
9E0E8903FFE59642F963ED7BB5A3E5DF84C61126290BAD0885D5CAEFA23ABCF3
5A5EAD7636185A5DC7431DEFC422B7FE1306951C0F284B0149B2100BB195AD7D
1232978841DA122921AE65D100DD7C66CE6F1B457BA89C4DBFFEB166C7142FFF
3F402DF8794B1D73940FA2BA5ED1F4A1494AB80390E2A67D5E1BC457F58AFE15
96883AA307D2F736B37B4B57AA3CEE39F00379C736D07A87F9D02D8DD69057F3
51AAB2D25E6D9A09EB31A94D62AA3EC8A6629E1969ED522FF4E9D49CCE7756E5
E5DEA26470B231194E9F0515EB7321A03103E675D45103580B003E735DF3305E
50D2B278B3D9BE5338BD4F5F250E57C4BFE2761F88641BCD733428A6DD5371DE
9A17C93C1493975ECB1E80905F5D1D362244305DA0D13042DBFFA480F4AC3984
985779B52CBFBF2CE284E34662FBA143242CCE50B8DBD44016C488BBDF22C174
56AF5EC80D6AFC0B10E3718361B43CA02DB2C0F0A8250D0E561CB5BF0B392C6D
0C89E9AFB0EA7776154AABA32C01F50DD76557378CD7F561861D25EC7CA8CD79
BEBCAAA4FA7A54B4EACC2FB91B690B6503B707E611AE1447F800B6F9F5EC1BA3
3381BF88FF9F8E856950C4C6A6FF48CE1CD99FE6404A9C2F398017B49F124EC8
6E998A1B8501DF9DF82E7F2AB6520D808CD26F8A6E0491B2A9F7609079B44EA9
8C7FDC8B0D1D819B9A12BCBB1D5FD15C159B840A418074615F769B1252CEA3AC
7D14D47534A377B4E677046B3BAB3804FBE96E4118C8F669EFAFAE022DA08902
FC11C0D332291CF611A249CDFE7268453DA56BF31816E435F38CD5306601B8FA
5E4FFF3B50336C56A12A5D7F4384E19337A96F91B2FC07702E1EFBF371F1A97E
6C0F8E2B1464EE07EE918976C7622545415635E32FF316DC4A6EB9F9F6EFF91D
05E547FE2944354AE32B38877C027FFB0F440498A023876736CFFE5A304D5E1C
C79A2C668EC0F2711370C38EAEB754B37C5A39D34E028F3583A84C85A41C27BD
EEA7A48CACB4AC69B3DDA3D4BC7A7CF1A9AE29408762EC9F22DE24EBEC19FCC9
C87A5B3268000E98D0AD8220C923998BCDBFA9C2C243C01B50D5956CC183F4BB
1C01059F0B03D9DF049DA4187F2F737BDDF50E6867A00156D518E0307E571557
03A3ADAEEB8C149E08177502969D7174D41606DD9B1E97754343BCDFCCAB9AB2
DCDD2E11B61E3186ECA25F88EABBDCB7ADC4055A1361768EF811899026618F83
03BFB755C8D5CDD137AD2F5980348E17FCAA33467C0DA4A116B08946610693BD
95F7E93B09B7EB900C04BF3BCC6524CA31A83F10F123CCEE639976FD548D2F87
DEB754768BCDA1771DC72C1CA0436BE596BFE95110869521223AB93004500FFE
9A128DECD616F6D9A0ECB3D405CBF1D760705FCA8115D599503C393C704AA03D
E8B811E081D3B0B0BBDD06AB4B5DA0E61A99725200960631338ABC215086DB04
03CBADA784136BADA0DE93E795669D6632F498E30A85C938A8070183C24A5B50
198124D7AE0C6021304F68FC6631A27F331AB1D4DE5374A7A85D1A2655650550
506EFF8107DFB9C648BB5B4073AC1081A0BB6D274EC67FA6ECA838A9A1DB10B5
0109FB5C753FDBA6780C57D5DB9A0A1E27240F3994E0396A0BEEA56CA6DEA6D2
85BF4FF9F769068B96FE776AA998F195D3203B449591F1B5267CC2B3B39D8710
A0770BE0D75CFE65E10B5D46B48D95B56A049C11FF103A055F5A12B54BFC21D3
BA3CDDD85018920ED59DFC941EAA80902E3BD33404D241E14CE0D6E4F12506BF
9AD9C6FB6B97270E30E1C73A315E523BCB2EBA36143280C65FB85E6FB23F76E4
86ADADA8AF511EC5FE39B6D68DD18F4406AD9459756FFD8F5C7127505F30503E
F61601B6895D47D5DDF5B592EF176138A89B3DA47AEA9D20B3CC8EAB7FF4AC4B
E85F04A06D159862B0A3DD35B0FD0EB25D48CE4F478E134BB1207643EA125B11
AC842426054F8A3F6FFA358E963B7973638F057D590307647DCD9F973E184891
3A1DB0AB5C03EB4701E7EC1250F3EF14C2C0ACEE037B8ECDAC62DC739D72E577
29A552897A74624F1978245ADC0BBC1D1C0D5D0D27C4298F0B6A19C497B4C23E
80E82EE2D639FC50ED087DF4FBD194FC6C6D326AAE5197758559FA723C154C90
0ECBB896C9CA2E4AA52D6814C3A90F4945393EF8E43F51F478F357336745BB03
14872113A07FE22A71AEF1AC4E0A863F790FE3B667FEF54401B7FA5BA81CBDD4
A9A4810B43D3887BFF80AED1AF453585D9CD9D7AC97323BA866AE01EC417FCFA
DE9E7E10E5CB7A367D4166C8DD6B727B5F77F1414AA87E14294101ABF9426401
33FE0175E4EE205D1A3E3AEFDEB0C8BBB979C49CFEB0423C4EC4A2497D763626
A7494944DBC6BD6B8F8DD2C43A0D815E9A58420BDCFCC5BF2684D1507B3BF459
1D3F63B87490338692E1E8CBCACA6F9D79D26E799F1D26CDA56B940E651E3EBA
FF364D32225A2F4A6AC21EA29DF0D7F39C5D4C8A98455D1EAD5C2205846E4E4E
2BF509813D1A19F8553E5EB05FFA901B0CB8C93B08A5753AF7895E496D6EEE9A
AF1ABB7D7D60BC40AB26D24A36F32058D10BC11731387DB9C21AE011DF03EC22
6147D06797C5E5249F83BB4E51873E114C3D3EB1B82A8970B3D1D8720B09476D
B61A8FC48C1C359651BC18BDE5CDC0DE2D416965AA09228A89E0645CC41615EC
7755984FE9A03D602EEC2931708DC87F78DFBCF4B250950EA1822E686F3D4171
DCA15789ADEF9BA53320E220317B9372BE8998E9F13F34CC49DE1DC7670F5242
4F7A74C4AB27AA731536312DAA72F7FDE3552E268BE8318446A38B38A64CFECA
4BE512479D7FC4F9C50E4805DD9838C5C2868C9BC7F43C34E4DF83DA3122BEEA
272FC936ED560D4770613039407E813FCE5339E1739DF82E2BD0D4AFEBD89FE6
F77C8B07CF3393DCD5F36D3D3E28BFB06651760842271C2AB5EECD8E6389697F
FBE5E2369EE765065CFBAE79B2F246391AAD905D4E3E633D69020AE921F8AC48
55E1E06CAFC0480B386372D67D562CEB1A0D3EC5F1B1EA743DEAB4FA9EA7053D
232E0B8E27323E31455786083B34AB5904BD1339D92B61B807EF6AD4560F1B87
33A6BDED1FB64023EC6EFFF366CB9793B0FD0A8E095EE2CEC2909680E472B6ED
5E62B55B98937CB108CB3BE19DD38D41027C265D9CA9841623291DEC6D1B1ACC
34912CF20FC45499F7183F485EBB50EF5B8A3A39C45A6FA8D641D195E588693C
547BAC780DF7F6F0DD72850E817BBF827DCBDC8B5D42BBE797030A3FAA5ECA86
A3BEBF3DDC5A4E37D6A0BB1D971A3E66D53A8B906FCEED73F4E39998D69F8AEA
936CCBEF418374981E7A01211185A5DC3338C02C4D84CA62879784EFFB3C8B32
931366E3F026AA817B457964333726A66D02219955A4BA1A2E780D60DB4F96B0
3BCFEB7CD5E80381E1920AC476DF71C64F6264B87B0A8A6AC194D213A21D4BAC
D58AD35AE01B71A87D810AC3FC58EC35E28411FB05AB8E4A071D85D21F369554
1D25E2B0D92569F49B88B2873C2580AFC86B7A0BCAA20FCFD437A4B0BA057820
EFB8EDA23BD747A8C8094A3DD7C20338953B019914AB31F5A03F0CE21953C9CF
7334F2F42B2CD6B149B7B1C569B6D3A3EAAED80790633F6CED2F107737F1C6B6
B7F51C9ED9E96981A468351E6CEDF444F45E4D2B76661024D1958E865287A1E5
7EEB77753971DA0966D0BF717F234430A8772203F3CE7570DBEF0AD790D5241C
CE157AA6DBD6AF81A8F200A6BD9210AB2C5585FCBEE927AA20AB2A2AF4894446
CCE807C9A7A5742CEF376F30BF20D49714B3AADAF6EC080E933813CE6E9F4DE3
A411C6D859441AD69F4B470F21462EC6D4D2E1C39A2F11B6493FE38E00712474
D6CFADC31662D75760978AE0D5CCE8C02B1AB20ACD452F67318FABE14467AA8A
59C3F78F842B4F746D372977AF4C08DB20457B552ABC9B371F5E004AF837EA7C
03BCF5742C2F6023AD0AFD242C744D44027B717D4778DA94221F86D0AC744EDA
3374C9F12BCC0FCC8983F5CF12B4ADE3EFF02132417FB3C9A36EFA989959B003
8A308187A556B7B1B026F79285453FD4015CEB70012EBC5DB75B26FD5A805D9D
46BB5E15F4DF7F68424138FCA28996D15A7E9550D55D4473053EEBB7A566B441
D4D0EFEC7D6505E475DB5E27DF3EED3C9B1CF54831588D2E79120804ACA548E2
945BCEAB7A48089AEAB650B3809C91FF3FD1323A50B646D5FEFDD4D22937E5A5
060488E8C20999C906F97AE33DD49278144941369F39084CB266753A0AFD325B
2478F97600ACB5D57EC3C9F1DAC884A5FA71185695C076BC50E39368F03D809A
6A8E902ADD6A84E892C6B4840F2B1B8D83E57728945F0B5A45B42FB15C6F50C4
79ABA162755BBB0A229F605A464C530BEEF479C294F851565A2907CCE380331B
A4ABC51566A03DB0AA5E643F2418A4234E9E9616EC9354D0F5F53BEA58A7E0DF
A3C810B8826BC64048564ADE8ED69C4FFC47D01F2D9B8D5900E4BA3241A8D08B
2FB504EAB292E67A5C926F705A02453314FB5E0E108D1A9FEA40FC506560D8DC
44A6148AA1D82680155D3322C67F685D8BA35F9BCB692B3A7FFFECEFD13E2273
E6E96407B11EDC7EA4CBCF5EB1576489DE6C041B2D0F365A1E03E1F86B34E1B8
62CBCD59C0AEECA6EA498BF279B83D1F3CC43A9EC08671F27F3AE6C9A73E8522
058216264B602A6D1F8F20A1071176B33029D6DAA547F7EDFBA5C3EC49D94E6C
E3A9BEA4EFF77882844A75C197A96DA52D9CC2FCDAD128AF83001E8A3C6E1D13
01EDEB04578720820BF263481010031B0608A6399A1467716DC6A07A7C91C1C9
9ABEFFC5699A00916F88518FB841260995D44011BB485DBDBEB1122E2C6874C9
685BECC73A40B912CD5058BCBD94E0AC334A276ED33A96BD671E399274458A9A
9E480FBAB91561D079041C0C7A54C5F6AC4C2520D8CB1D59CA262ADB02002EA7
42CA77DA127541626E069CC942482B4529D90457FABEDD3CF197130CAED1466F
B09C83123094DDCC81333957BB1D6F21AFFF3F861E7AD31A870CCB24CCC9ED37
113FD2A8F8CCA5A73D136FC31A73BC2A572771B3B77F51357E95121E1FD0C584
0A82B702E031EBB07470E1A12387BA7E4E10965438C80A0928AF92DE3B1ECA5D
3BE97A223A8848ACCAA903D16A3FD6E80288BBC176DA8AC9017EA92B1E130FCC
E5F79065D2A46506961861E73A779F1B32E27C86036387AB602AA9720407AD88
91ABEB40181DA0DA6C38A42A2304FF9888F7E840DD53DC00AC950AD04C6DBDF2
A47F6D473F9756CD5DC3315CC7F3032276A2DF316CBE4C5F65E242A7199873EC
339F8BFE4A2E42B70766C64D398FFDBFF711886546338A2239F27F91C2014191
47DCB2BA06F9EE1560C18BA76212C69B1D50DFAB58560EFB0CAAB9C88890D0E3
98A356870AAD459FB136FE6D181154C97B0864873DEDD318221375DC1FA05954
26B22C5C6050F61800C9F578302026FBE7A0E85831C494156F84B77C8EBFC881
A79EA11346EA185BFD796E75B942FBA2C6D0FD8D6357A5B8242C71D28409D991
436169E5E93766A150712DA1A12D3486E63805C4F324EAF3CB73E3AC7A290AB3
E386723DCCA4D80B264C4F8FFEA0CD9B800347C89FDC7FF02CB650C477389D79
469BCD0865456685582867874B85BA95E122E70802C43F5EA601D48C51E8B11D
FF2D2A7E40E89F929F7A2F109DAE6E4DFAA0CF1096F968FAA7B29CAB5C15BE73
F5BE65225C38E0B9D9C7A885B12E337865CD47A38A540A0C4E8BD6068DEB4041
4C09344DC0202727D9E1AA2D99673733617F9795AC6119CCA9A7F95C1D675D68
5C3EF666F3327180CCCB31C18FFE281343CAEA2744D04C882204C585DE92E03A
79F1F7AC56CB04E8ABA9607B703E7A2A58FC3EBF5ECE14AA45FCCD3571671507
3174F1A72E9B8115F2BD0997906704E49C9533A3D3A58E09065562D1DF151237
137B5A5C67C386169605D50147DEB338D9366BC725B65022292EAFD1FD2C1CE5
01B8CCF101CAB16B51936BFBBEFAF4D872586D85A70DDD05968EEBEB5C31BA48
D37651D3C1504EA11FBF4AC7BB86FF89E51D3F3D751551E44CBD2D6C5F8A2229
2A2E721870C49542080C09EC963F20D5F9BB1F53289EE21CACA054155D3DCC73
84BAF92AD383ADEFED975B4604D2DE7EE2E59C826FA644F5F128053B5004970E
BC25A0A66B863A816D098E8DBFF294D1BD2168F1051B159CD913F063BBB0EA71
0DAB3CB6A97088424D642225DF28C8245885FEB908544B917ABC20A48FB5F933
3D89A50536251C4C151CDDEBFF3E277645B276E79C0DF2342B714F83221C4A19
FA7CC1FA84F0D42E7A93B03FDD90498BFACDBCB1C1DBADB6657DCEF89BE9FF13
1A7A2AAD7FD84038EF3B8F2CC7EA3915FB5FF41DF4C1728CE9FA210EE25E56E1
9041133CC627AF9293570B3DB7EE8AA7AF9CA559F4CE96B77A74FF302C10135B
74952439CBEA0791D3A0EE0A5316F9F40FAE482AD6F5E610158329FF11172FA0
81AC3BAE6020A3B4937580A96D0B1E140095EBE7F6DB7CBA2B969FE5B436289C
C9216E5085AF85A8D7039EB2169740CCA12416589919829EE445C59D2E6F1F88
D8F5685C51A3E4306585AF745013BC9C8F5865B057F75DE79F67FBACE974E46D
03ADA08AA153E579EDED22A085C19F62B509AC37BECD74C5B8A95FE6FC48F76C
7F1B0ACF9023E2C046AF5DDA3E203B0FC1AE85179CB130E9F217EB3C8C9387B3
EAC5F2D1A0ECC2707BEB48F8EF087582C5EE44FCBA1F74E59045747E0B596F32
6D679C99B66239C0727D31A472704EAC3E78B3D71B7757CAB550549BDCCFF176
DB36A61E6D66675D6950D287A94CF9CC4A4B9D7FC4F9C50E4805DD9838C5C286
8F2A9A39E03DC0F2A4C65A27AFD8D18CC2BA1FC67DF04686090C7E7486A30B15
35E3FAA91DEEBD09365FAD4FA8A79B5C062C6CE534337EB84E4E0D5CDE4987DA
2681AE19E24028D456CEA62F4EB850DECCF34A25C1D0299025177C95C83207A0
D83B1D23ED27CF3A920DEF41F42051B84E160AB79B9C0734CD3ED8F82BE60741
A3DBDD25B2599B59AF403BF8E0905DBB4C82B53AD363B9BFEFB1EDD7670054CC
043974F7F51C1B692431A2DB0D919C124985C9FCE40F291325A17D6838D0B6F8
C9A5283912F10B1F205407839D950FF29095C409B980D358DBA51227EA015698
8BD6929CC836C3E10B6781A7C27B2C94095954AD206420D1B363B71BD2E1BBB8
2360E7D057944694E7CB6098B0BD07C1ABB4452C427DC7C43DFEA873FA4F3241
FE1927D8A7913DF1C7413F55E39C7D3CF251666ACFBABFBE56C8770EF802E1D6
F12A029CA9EFE6ADBD43A1BBB8F0F5627D434756275A594A755053175638ADDE
775257A3A195F796DDFD89488D78F6F6E9FAD73A5F027EDB01A361FD3F877919
58F60444405DB6A783B433E947302946316432A9C52A86F391E2C0C094EDB63C
28E8C0D97A1A00F90F2375055C6987488FAFDC9F368ED2DB8CAE6AFD67461D9E
62B3DA9490C46A8D22EA4751A6E239D3D765F334BADF7AB43D90E252FFF04880
8A55AFB096A8D82DBD2E16E51AE10E16BF17AA9F7497975BCC04E2255DBDC335
35C45837F1704338154E478FF7256CE93E6F483C66E080B81C4D136EEF2B51E6
8531743EB5E7DF99222413CF9E1059BA3B89B063E8CFA476CB600D2065B4D74A
7E48756A869748F8B3C82ABE2EC4D8B0F73B4A0A0EAE6B19DB4034A6E26E9097
BBF995895E806488E2F78708E4EC5F46FC229BC6F0A6092B190F233048751E98
D67A1F3D5558C1AC5275276F20D6151DA115FAFB6C30A398CDDAB5512C356610
B624CB772482920510B6E60FE544E0CF55CF3032EB76701C814E13D8E5EA7326
EA3A94469457A5992B7C4BB7BA782AA8E29055FB30852EC6210B4F1114BE2C49
3EBEB81392955105AEC38EE03DE374764B4E2A297CD2A7917DDFE923EF6ABC9F
72EF349BAAAD9188ED4253089649CD42002876725CA929E9427C185ABE396DAB
67C2825C4847FB18E9532BA41B8BE616FA22F43FF6187316775159BC3B56650D
1C31F930BC1037EFB5D63F8646A2A49D11A3522E1893BA974EF69653BF510F58
9FB14A55784C57A8B7E7FC9F34D3D86AB9ED7C85254F0DCBB81FD21538E323C8
D7EBA4461B4DB2865C0196F8A428CEE1BA1D33170450A3A5D072ACCD1DBB2019
2400C26EF0ECDD2C06B5CAE6DDF0FF99F6D873B1D7FB781E8E40A488BDE42DFC
EE4B184E4148C46F02C11C093FC02FC612033F9A9949B69AC94FEE8459866521
8FEF3D2ACF9B3116814C0F75AECF9AB586869DBF470532E692C31077AD8DC38C
296ACA9F65547AEAE94EF7B3A3B0723D41DA75B3EDBBC2E8AE95B1FA4C2F6248
B9D329441AF1A2421014CA44199F828DF097104E64E8C6CE4A4DF4213B477A70
4E5638572DD72B20F242D8A2367F796267AB92FC122C7AFEDDEB7D90DE3838F8
AA7E1700BA317F8A749ACFD5D433FCFAD9CBA9F45CD0F54F714F90D690640CA3
8DC804C230E17CB9DA3439FCF973C4F22F8A3ED4CA0D67A0524B553B5A2A3961
7CA09B5971E03FEFE5D1687319534EF40B0F4888B9B7859F925E70AF87E3AAB6
06F6DB42EAF18494A0F3F7D89AE8ED007EA816B3F8D818EA9EFE9216A2BBFA1D
C707B34A2223648C1E0DE02768D2ADDE16CA011D5594B360B664440988BCEA73
7C5D7F2F5E2B3E010249317318380C3933234DE31EF63CF58A03F07FBF5C6611
1757FBB59A8A20219BE995D3321EFAF462C8C06F7757ABD0B7F1F83466480BBE
32AF053A77F4817FBCF046B7E3D686CF1AC6A82B3D758C2E7D2FB99E6B03BB06
E190CCF784A122572B303C0B4F00C6382094353A7EED15459D627A9E65A1323B
A915C10D9B7896BE04D8E707E94674AA7B006877B0083A49541267FFA79FFA48
E019F13CA5BE40814503C4E26D3C259B746FECCBCD3B3C2FC144B20AA739324A
027E200A1F3193BCB1ECC79A9BF8A9FB7F2E3054A705AE43236ECDBB983FED43
33A64D7560EF2FA838F7EE876BEA09CE9979B0D663D45B50B2632763DE7D54A7
E014BFFF0FFF8ADCDD0BC65E184956B1A1BE99B1B9853A8B013892BC881EB3CF
9F78FDE3292AC4B3211FAA5227E1152A1FB0ADE8AF9C4E3974835F6DD1A7BA57
96CDEC1C094B84147CD24C01E4EBADFE7E3C544FC24F5C75B7182BF827B16443
2DBF8ACF2D5037C337BB10FE6EF27770625451CBADDE0448609DC3DE846AC75E
E6B6830EC0A13DEF135C81A880B657D84846762C913C426BF752C7CF778A6C91
B1E41720D36D46163C166E1322DED12CAAE39E289C1FE251359B7076D5C3C4C9
A3430CD703E0BDD5773EB22E7D8B5F20BFADD99CD34D1429DD0FBE57D97B1732
18FC9C4DF5EC040F32F18DEA61D81C8E45BB676757B4CAD36A582F2A9195CF3B
2D50C784E00210DCE05E3439BD91434AB3944AD0C12130E00F6F434878811B92
2902C707EDF5A57BCD0C6AACBF6BB0424FF583C132D24EB3F46C7B4D72263126
E0F462DAAAD93A474BCB4F4334D8B2A17381248E7B2F40234C6BC28D01A91B6C
97CE203E8D13C5DE5A87206BF6C94254D4AF1860A2C52173E8885562979454C2
049DCAA266954D63F5634D4D446F83297FAA9DFC82560ED156065EEDB8770972
7629C1A74D55F879D8AE5E6207B2B71655E83CAD31F85DEBC424334598A39EAE
F8DDFBC7E90DFD51A2C54CD77EE5F902FFDF896FB2B71ACF60839BF3A7B2BB5C
AD740FEDC3E27F119DDA3CEF27459CEC27D5F98FEA3576D09468B5A8AB8A5D65
1CFAF16F58DCE3112AEB3C8FECB7A40299516D7D94BA3C6AD5D1ADF8D649811B
8522B71513DE5D75116BBDA111E0379DA6E19694FC2325AD6DC1446B3DBF2DC9
7CAD29745F53B387387BDD3C19640245B4F645A6FC7267CC23171BBEC63B9BFC
9891E9658E53CD785654FB2BF0C8A53A9D38544B060CCD958A3DFC8FBB40B115
3B62075988AC44FEF4946A1C8EA440CD67156923C114CF11E3F7FC97F44E6642
DD04CE6B804270F397CEDFB551159F13B93D9B50418679A9415DCEC75C84CB53
97D17943463E73E7B62788F99ED83565C28C2D635A28DE3F1ACEA0B20D18F3C5
AC2AE6DB4A6211C7A4CC2996E187D10B5E5BFC89A5AB13A6143AAAC6F02F1E81
0520BA8F9E6176AFE7178578B068AD48560D2EFFC0D1DB8D8AA6609637AD4423
119C98D5DC1DC1A3FE08856622DA9AE789E42C389EDE846293F4F568FCB9230B
1A4D22EA367492DA80A20AFD415082B3474F086F382F10C950B3DF19AD8901C1
1510D917F4EF01782DD1D4D1EE1922BBEAB34BFD0527FEC19145E12C4E871B24
F4BBDB734DF2A84CEC9D581AC2E477F3C98A282A463AF43DFFF5094155E742F5
98B7CC7202959A938F231F53183AC0B6D4360464B6785C6FAE9A725497DB9B12
C6005B9EEE0FE32FB3C80B01570AB63AA765C18E01D7B34D7AC036C0571DCC99
0C60FBA08F613AA5FE744A10EAFD350C36581C8452417727F8E15FF7FA6EC52F
00BA36760C9A55D58CD3012BDDD6C9B9A12501E914D9DADF8743DA7FAB67419E
2012362C5E81BF78DA79493E816BB130CBA5473EF29F4ECD69FD31EBF7385A7E
753337CFCBC41641832D1FDF9D9656D2C859B38DCAFF5EBEB5EB9167E0874C43
C1DA6938FBF88CBD5697207FAE511832081AB834161B97806438B333EF11AADD
7057BADB6D8034A78055B6746E856EDA0582C91C34E0973C9089850F491152FE
FA5AFFD4DFE40C3E3614F99773F7588F2961B5095622E8BC078461D58F1AF154
4E5A4AE03D67D836B45EB9932871981C287FA9B916776184319E202B57F237F2
1C09F61DFE7D8EF19D496D07FD3C487D200BF30403E60D266550E3AF9E776EF7
F9C44675717F905BAD8687C95123BF2CEE4BD5002335371C9350222676364AFB
9DC9162339892CF292167A90AB2E77C3A4F5966723F07B048A38EB1DA111B256
2B2F104FD8DDC4709FF15BA55B258B36AA134B12B7350E4223F95825AFE0D7DF
55BC7FE4625963BCB525354832483AEBB268537B20A7B4A2639E7A626555FC9D
82603335B4BF4FB5A10A2B5ABCBEDC4F73DB1914E82398052A0945C40B1E231A
2EF05EF04967EC287611A0C9662BEA42BEB80C1F095275D4E9C6C475E9975FE2
FC2184231A9D1AF1BD4D1DADE0F49C7D65C9D9C3A97D7D1D21AE9C4DB800F0E3
2A9F6598E95CF35E902FD0BB89B5E469FDBC4831ECE4EB0DC351FED7B30047F4
257FDAEA09438BECC43B4C28AE2E02660432E97BB688798E2855C5E2CBF3D194
22B44DB16C7147B594212747CA06C0F2D2944D5267D9FFC194C546028732316D
14A777BF16E7B9879BD9AC48788E361A0BC8BD0437CA7F9663DFE525A7CB7C1F
6E6075E75A6ECB1C1AC5FAA65C8A254DFEBD7AD2CC21BA8EBA1D4B624631A5D6
268AB4285361C495ABE03EF7B5DF539DB4B9DDEAF4800166566E456099191BCE
BA3EC3E8F6CDBA3D110893CF1748613E73FD2E585ACDD4BD02E8F1BFDF224991
690E03F119F04DF26E064FCDC6E29156E046087819AE3CECBC6B965A3A2A9957
B73C1178B87095ECE0ADC5D361F018A55422AA20E8D50C0353E931402708967E
C7F18E90B0CB6FB209A518C223EECF558E6418C80F44407CFAF2325506A0D2CD
EDBBD437830EF0B02E181493A46E3C261CE9C81A4E75F8E2244C3532F2C91AC4
C6CB64403304ADD9E46A27759F58E807922A0069265D1A8ACA37ED262872B6C6
8908CB1D9F00BEDD40C4E5F94456B32593C2A9DD645198858503F7B218D87FAA
E6CDBC2297B4B126B5BF8D90B13EDA87D715EFB27AA6A7F3C4AAE701C1A95AD3
FA933A1742F55AB169A312C95C6F22D6D349CF337C0EABFDF41F56AB44A01ECB
F5FA5FE91535B7D2012C8059AE55F0F7D6A18B147590B2AC9764F6B4394EE2DB
30DEF7CFED9FD00797AEE5169BAE41BF05899774581715151CD2115C9E741C3E
03AB9EB21171C9338463EA17295664DA9E58A0ADEEFF48C1A7909E909D625E8B
D59300C44EF0739E9681715FA7A75C14B685E2004635A0B1B624629ADA33D46E
968C096BD2B59BBAD69FE3D952A20F34F2900529177263931A636527D480F7B3
5F92ED9E284CCD6B3446752BC5EEE503AE51060321ACF9BC45510BB88F1F20F1
5FC88947F2259C9AC2FCCC8FCB270D3BA6137B672141302E0C9A9A82F438C6DC
E93061A34A70C274C3CD492EE4D841E780014A1E8807AEC73A95FA437CA482F4
01EF945208BF2C2387D370DD6069227B260A0BEA06692540FC1E7B9E5DF9D6FA
DC071A7B7DACB165BDFF0FAC337A4EE5A956AF8774F21DA8E14C2C9E8672B0B4
0EAF7953E99262D327DB78CF2A208836B997BA01C25F485D0C95DF694B43F1E9
AE21AFE51B1EF94A20C67DEF29CF614B517C05D31409A7EFE8E2FA6429E7FBF6
443E283A2FCB0B8134CB46420ED89FF885CFC9FBCDE4B5A36CB369AB1D0F0E59
3F5E4EB9B36B706892DB664F5EB021EB15B7A26CE0AE7631B5E4B3A318AFBEFB
FB735D8777A60DAB3979F9D03C2A281A87E9AF4E260591C18FC29F0A2DE77A5C
218758975E686D4D8B6EFD08CADFBD8C7FAA4912BC5B27F64ED0C81666778C14
7316D15F17ECD9D3AAF60F5EFA11A1881A456CF8B5944E9CBB50E624B6F32545
D663A75F393D488B762CBE91DB3E354B932DC8A3A4A7F37394810E33BF64BEFE
5CFFE00CB128E2603B088DF5CA45DA10A42811DC7F6608CCD92057F8ABCC6383
2CE329E1F102BE3B2323379695E7E24A345F755D55081A9BCFF9BD2A6BA58A58
BD8D6F6283BB26892B5FD1A1EB2E402049616D8D3F74967FC0D24DF2716FF77F
30AD5A2B83CF7E2800717E9556CC0B03CA2C9ED7C5684A2E025B51E34E560376
38CFBD070BF388E89B49B86333F5AABDF27F3C60E8AE3B287732A0E40B53F5DA
CEF90CDB39AAA4C254E91D1650A05918FA239B603CA9EAFFEE039CDB859288CC
FC3B9534BF36603F3F77935F24E9B8252CCF81D370EA7C0FD58BE26DC9F3D368
4463CC8877906855F924228C0921C23442B527C75A496FF341E493BD4C9CC00E
6C7F779C10ED3F2FD7DD317251D15A9B5806760749F8A90932CD017D54E39521
E10289F933F37D978479FE0DFE0DAF702F2FB7382B4BD8D464C94C6EB71D5311
987CE12AC58A87D56C2C4A362FB5ED34A3E114BDEA9902562E7A9CE3521343CA
5AA2D18DA69F93A07EDF71C64F6264B87B0A8A6AC194D217FB69755B6E4703A8
EB1EC9BD7932F7B7455321728111D4F133C8DBD45CC1E5A68178DAA3025A2AA1
2E25B6814B742DFC48851F18D4F0C619A611B7715658A2D2145BE01433AE844F
607A2E64A9901025713CF4D68E138B472608A8394208E541812255D98D2AB429
107F417A746482C4DCB73CBFF5CAB2B7755D4A72AD9C01725DFCFC05F53B4C44
B5C315115AEACD61985EDF817CF7182D1B70D071B23EDF205901C159EA22E2C1
A238F1BBD7B7BAE9CE7EDB09A1387E31A31795A7E888942E95904C56E18EEC59
3B475F92C235BEC608E381933E9A99FCE68B369DD8F2339F3464C504E6620B85
21B9FED1230834E595772C702C4FDA23DB576384D456A1133D5685738A5C9EB8
A57F6C63E84658ACE7A3CBCB0FF6AC53B9CE87AC1F233E8A6C45ABBCC506B401
42C965888B36B81681FA3916FD8195BF5B6E571D708F074CB705284EAB712AFA
49FFAEC452E9DA468B5307F267BE591A7F2AD06A7DF7557128CDF10226B2290F
A39E4339790089528A90C410881B4C8831502161F8C0C21204EA3DECC5CF88BF
DC9C6EA5CA2E59755BD7141C9777BADFF6A5A6F526685D98ABC0466F8151BFB2
86E20ED45D42553EF9B6AD5B58A01838E012BC21E0F9A0BF651E7E8E6251748D
3A5C55B209F351E713BC535C09CE75EAE43BE62DB226AF1F86CA74594E8FA334
01965C9467947FA979C28CAA157C6C486D50949425D598B7A8DD510939608213
089D45A24617F7CAA703B9A0085CB9CC1F693ABF03C400D95E353BF61ACE8E6E
25EBEF3978205427B606128C1A4E120182EF2103606247E509FDB021F4F0FFEA
AD16CF75E9C06B9D593026096D4464420C5CC9573D6BB8D1D0BDC606FB456D96
3FECC2A75A5BE456F4FDA49C61276DCD275EFBADC0B99B545037A4B6194CB5B7
4A982FFC2E4EB89D23017B31F3FEC61C44B8036176E60A88B7B24C7FCDCD4BE7
E69A0C453992E9C7593D170D91D7872C7EF352A72CF1FD6463C27371A1A213F8
4A9EA86F4B81195CB158677203751B981FCBAF88C052DCC6C4F9081FF9431133
2AAE28B54032B2F30C51017D8DC3F9731053FA1402DC1C57E367065285D0BE95
8FCB242CB739B7054F56461B71D2C8D874D96193A2892215F73F4296DFF77444
F752EA9759D337AF288CF791C59BB8C7B93C0E77B32B4863B9AED1B55179F948
1B6440314AEEFA5457E14B7520188FE7F54CC51ED4CB9221317C88935170700B
A5C3C449608B2E9567386DAFEB40DC91B8B94FF94A43F0C273143E753A32E23A
CA2E51B9B33866AB214C10818B34348602429496519E5526B7923656285B97D5
35B199D4C79414423A5D5CB464AA16053B0D96B5D696E436C90E726BAC30FB74
699DD410A85D696075B4940B1A7B34C917AFE2A3C7A14CF7BC731E996F431C31
8824F993103410B06E9F990B9FCD99447E0C516F2D477820F9B14CC64FDDC47D
C8D7AD29DB7AE2390034503C71BC5343F6ED7DE6C25C92D3BB7EDBFC85491145
D585B4BAB5F16C436F4DD9DDC73442DFC2B6C2B667E14A63704095E498B54E4D
C9835DD69709DF330DFF7815A39A9C1D509FF0F92A0E0346357E42DD92318DCF
4008F1F5070787EB4B70B81C02879CA6E6D86A700CC4DDCF6896665EF14A4DDD
4BC9E96C8F1D0F91929A1D45FC6CA3F0D3FD6B0A08B2BBE81D22D1BF4B1A31F2
62CBD3B859E8F144AACDA57D2501D28D02AB4B0F2FAF595D7A95168C6AA9E420
459DE2B037C8325FAB4F4CD90D36273651A8113B1F0A3E38EA3D62664F3537BF
6AFB8C905826A2014C48E0C1127DF0A2C22BF447AE507246FD35E3625A47686F
BAF2667EB33305B6584D650E6DD3C29D5D48DC25E586D8B1C3635E81ADF4C2A3
44633DD9300FE5EBED999020B01CD2F176ACB3B40C2AD1F930C5E8F3B1FDE846
27F3FFBFCCF21DFACDFA2C0453585C8EAF1D56633B98C875ED74D916BFEC58E9
A0D4D432D1D578B1F16BBED488645E6EAA31720224856DDE35FBD463605D192C
7474D68928C534D63F193DF99D00453BB25C3D2F1B42D5D4A04B99BC5F963F80
70619ACA6ADE78A427FC98B3BF6179D732EBBF4C81138E940C2DE6294C2048F5
48A02D847BDB02DD538A12B34B33A9AAF6A12604E4A7593D7ED92B3D78706987
CEA3B1A40247BC250A331DDAF4C1B85C7C50DDBA6366C33449E1F2178BCE3A82
97DDDCB14D808D0DC4DDF57981ADD8B88F023A1F6922D6DED47F0F852E129736
A10B51E96387954C04C34E976D3D474FCF52FFE8D10ACC4EEDB623C571FC24ED
B5A8CB22ACF60D25B8E19A28ECC9ADCEB746F59796DFC3ED43778429BDB55766
9ECC707AF9C9E0F86C2A309001E5DB53920200708A5BC1850FE88DAB27CC19AA
5822E2E594C4F424D594FD7574AA8710A179F8388FB245A328A7DB6EBF56180C
6CFF05F885BD11FBDC0645DBFC74191678BCA02DC9469D380C43040D8CD91652
E943531C150850C671218C0ECFC7C4E0B256EAAB2F3A8710BEDF4B7F7C388098
DA5D951938A6CB24785F74A2D4E08CA6D7868C4C0DAEE8AE809B53F134FAB24D
CA5B82036B34E97DF1AACB8BE5DCBD080456E62E3C5A8EEB465AA1770AFC3ACD
2FADCF17B5ED1C15C45F718FDF8C764A7A43966ED6BFDA998C2192F01A3EAFAB
4EAEB1EB6FD5D9A1224952E9325C0AA330D3D122FAB353F1CDC84A00033A28BA
80137E48616690BB1525F4F4BBB7CDC021620E25A0732B430F7DDAED30C5F4FC
3BBA8CDF97A19BFFBA46051AB2E9AE89A65C8FBDBCEE4B905F7283AA13977426
3397C47D99942E231E7EEA2E3EA153A40C36A8092E765CA3463989ED56178B39
1DD5F0AAD2DD34D2267EE0682D2FA81283D81B9EC3D9D0437850C4A820C874DA
CE2A8CE8340758AEDCC24EA63876BB30CA5628688A2972DEA3FA3F1C730D6B88
2410C83BFB58501D42D753D9A9009205413FB9F501837749D09CEB6C7BFA1947
7F07586A9A2C1CE99945C94F8EB830C6DE57F025CD5780871AA514A2E87897AB
E6F28E8E7ADE509B5D8433B54A0F460D702F65F573715A27DE22BCE13D1400D6
977528C06E964D43C5550AA383388AB60ED4BE3D4DECC6148E354624D21EB479
BE0482EB9912B64A55218C05418FC80268CBD34FF79E35A48280AD0F0A10BB20
BEBA9AD6C126A72ADC4D99C1FA7A3F757E691CF83CA1DF701E3C5D4D84E71791
76C32E07C2BAABA83DAB9E233115EFC0AC031B299C36D800606CA851CD31ED42
CB79725D2AB5C044074967D4EBBB0ED4810D0BBD609E69100DCD6B322AAF048B
8C9679DA87BAEE765F87258B15814D6B80E856AB053BA44CFAA7C2B3700B3B37
80CBCFA3DAE34B0421822632DFB732A74067AA950147A3EB273F554D5D5BFD6D
0977E805DF4D294A03E37CC0196D0141213E6B67A4D2930ECF77032FDDA279EB
F42D1767C2A776BFD29CBE1CB7DA8AA752C168E01E7949614E57AB70D26D0DB6
73D7B04E6A3577A0B69EBE0486B820266EE3A74432266F9162EB9394FDB0535D
5611E1A9DAEB0115E4AB31C85D367E1AA2D7517656B54DC757EB0B2567289BD2
9C5C3DAEA8819D90CFE0F890FC82E3A60ACEEA96BDE7DBE7E2EFF13DE0B59ABA
46BBFCAA6616CDD2CD39AF252F3B584EEDB45E7977B964F18D2F398B914A5D73
0AAB449BE5CCF75860E73572CA7C2A2C3E53AA5DB383E3747179FD54E0955DF1
1C40E8AC2CEE1D6D1FCF229848D32BF2E94F0D0CE7EBA6019C7D7199994E43AB
AEC2B2DDF69E4EE60AC3E2C38EE6FACB1880D07E66AAE7ADBC7E4CED76E1D4EC
4704BD05FC71EF971F3332B922AC1EAFA45A30262E6917A57C6B567EEDFE7F76
6F4F9AF66E6A3A517E880B85025D0DD42A12D4D577A8657B323E7C4CA8A20C64
544AB632FB5F6943FC34C7895F0924E3AA1646FAF2030513E059DBD32C09306E
D3C8756C6C606586378CEE930CD472F226EE6D8EAF35DAD90055D34187A7E298
FC165130A46023C40BC08A126BC90605BB5FFD3ACD78645D8BEE1DF353DE53DD
27B7020A7E4CB94787980664136A636E650898E42E18D338D884EE0F70820505
B0BB5F32A07E44DF4DCD65AB1AA7DD4599BFA4BE5C1E048160160A42E2641BE6
50C8B1F7FE86ED46066A4DF35F8917CBA49E76674B285DAE0EF39D52AE693AC0
76DE155696C3D4E8F5546BB41A5A2108DE44B08DF2E44B0F8C22559B2B17B64D
34D7F01B3398D4688CC97E0A3A9AEDB29E4890B805502D1EFE35444A3956AEB8
E16DC8316DF342BE59CAFF723195089CCCF80F699FBFE303752A7CBF08A16F80
ACDDA68AD7F9286F8A8DEB3E817305D008ED7095020352645BC31AD512EEECFE
C5D1E4B54ABC063C164AE60471A6341C6AF1D108A573F2D345A1D342747A22F0
3BA5509FD88EF8BBE96B2132C113C72983E3F5A4025400B0A612EBF848EC469D
611E0EF07AA173DC6D1DCDA7B5620CD8FAB4C5018F5D8DDD07C6D4A45D6A3C68
96C6D0643D9A98D0A2B019B3CA1415E654844276A41DB65385C21F7040124EFD
CB3DBF5C9072E669B862B373C59D8EF8B065EC922847C7000C8D46070E46E4BE
578F06ED0FFB75A7420DBB08275589987B278CAEAEC1D680D87045B7038B151C
E7DD70B6C6494B9B30C88A0DFAA4F4EE88E66528B0FDB282C29411A3CAEA6E8B
A15289EB5C9426BECC46A0A2394D55A759E5C9DE760E9F5158BC6EF268311FA0
2A4AF378B0DA7B3BCE2BCC1011EE5E71D8D8ADAB1CCF6072D2CE8723654616BF
83BDA50EDE18500519F7C19E5B3ADD15423AA8206A483AC63965A916F49D3975
D56E95A92F3379F1C701DBC0ECA5F4B1FC8DA0FDEFD09B9A6A983505F1D00215
A04F0BC5A5BCD11F63134889FA3E6AEB8BD54525BFFF72920B26577B79D8C022
A6C524EEF39A217E7EC8D1D19EFE152A0D3CAA87D634BC255F89CAF1DABBA4C3
462FF0BD0CA1A4BD9761E764FFA72EFF5BCC8588CDC4486629F1546E47398891
C62E8871E18B61BCF05933C0C3F6F96B20FFF510900617EFFC32157DB64A00B3
7181980E70D2A32254E20A8B3A9C08FCFEF55C2AE0DCF2ED497FDDD21F38A479
90213258C0DBD9D2FFF0B3C6AA2A9CBB3CAFF66DAA659BCB2B1FEFDE6DF01297
4241B33B67AA61C0A427CD4DE92D89F549D7C9959A0017FAA030F8176820D3BA
3CDDD85018920ED5938BBF74217DE4C1EC9338D223A3DF7E17696DF653C95F17
6CF011150BE28F17D57CE9AAB4754C52ECF87BDB0B1DE3CB077A9C55A6D836A6
1E6D66675D6950D287A94CF9C93FF05143DEF447A654E6B4D2A60B5321A6FD77
6822959E95B02C05E78C1E42A8910D271B8B8EFC588C6A985902C2DF16622A20
E838457B93119F2BC86EFA695A95B4313806B24CEC361178D68FE73154A62141
A811917D82D3EA2E0349FB45EF6BFA0E83CCBC2A771277C99C0851E2635DB3A6
B2809010B49830080C857E92A2614CCA05073141CD7FDA93FA06C5085F0D9BD8
E5B602F55216B3EBC60E9C0E64772DC84619730C97F54915DB695999CB9E589D
E954BCAF292623EFDB7DE5CD6EC4DF7924D62EDFEB04EBAA1A6C4CABD11C0F0F
B4DE510E4B3CD5900ACBBDEAB611BC5AC6069566DAA19066B51C2BA66EEA0324
A3A760D1DFCB75EF11E395BBE869985E89DED01E8C8BF213466DE9FD1B74B485
70D070EAC029DFFBBC8A0BF424646E833823F8ADC94EDF600F465FDFFA2B697F
8EF52A821F9C96DA7FB0F664422CF8C9423CE62A03A8F3F9BB87D6A140FED30B
17ED346C944FFCDB61EA014E18E5F36734DF5410EEECE792C4ED83FF46024B7E
E13441E759A7CA7AC920AA9429CCD6F4BDEC028715272A329E5610005976CF05
13A582235B8A2AB1B87D595FDE4BD8BE6D409B9940CFF25048A502384E0EAA96
7B7DF0B57FA25132C5733B40089F2D7818A95D058ABC884EE745F7603CA14394
8AEDDFE8AD040687B8CAE372D822677C88E5FDB19CFAEF9FD730FEBAC7155B1E
459205A04DBB3116FFA39751C8FCC8C5ED2CE6388FEABCD9034F7EFE58A9C1BF
C6A2EAE67BF5C1882C52C2DC01EEBBAD4BB06800BE89E0881584045E4AA58148
97382702CD15FFCE716511D20567A26DC69F2A2DF122B7925CF866E58564B6E0
CA20D5927E844A7B54F6ECD8BD7286D89D5697EE87F619106EAF88C4646B4B41
2AE6C02DD94BFE1943C40A21CAB57C5EF59318F155CF5370A633B0BC1AF505A7
3E864651ADC7C6411FEC9EC3ED313AAE477501E3DB8E48E6D1C8E44196C1F2C8
ED4E3FCEF7F2789D7002C4D40DC72C9DA3039D9C580BCF66648061058C3D00F7
B1859DF8F570D98A0F8976AC08943710FC6A4A0BBAC9113E3CA2596B19E22710
889950C4D30BF96FDB7EE82D45762F01AEF2D2388E6C8EF54A497AB027198935
EEA8881244CC8DBB71E57C2762C1002D16634DF87739C82C20F9CC5B7F2B9272
A0735C681B61228C402F2358C8C2CDFDD5BD7F38DFFD8BD9339B8AFD11D271C5
9F6BAD0458E2756AE3B7753104026754FD7AF0ADEE58F413163F0AB6967F17E6
F318841F2A8E7789333EBE9166F1A13524D8989C94BA679E7E673E49F31C5BBE
46C59CD2695AF1E6D48BD6778100095F64484C414BE3368980755318BB10FD79
B484F6FBE8A7C456E27318E8C26D501543C9F14BFD854A3D0015C40DE66DC5E7
139011AFD0E2C07F20C92F99CB8EADEC06C791BEB97CF4D0172757515E552E41
C99FC04F9CA0AAAC6268440C2785DEFCC5C21946BA42018F54A4B51A49C44F4B
200EE1693F3AA4869391BCBBF1719E4DEB9BBFA4713EEAD00A8CA9E14D48B3DA
C8BC23B0EF1E73D1FB8F019980FD561E5B80B06EF63A0CC6883E9F981E76E8FF
657D7CCFD8957FA6F28480466A7538C67B91BE2D2DB38A404E37704552DD4C12
BE6C1D12E05FFD60CB4D59AC7A9C4F1F0EA6473D0E76DFED27FA19F34E062F95
3F37466563D649704D42BDD4B37C99EE456AB6C993F0FF0416E6BA1940C4431D
F1117988FC9FBDCF1F649B3D5013392BE0F5E3DDCCA9078D95EB967AC2EA9D31
E7245BA7514260F07C8531A8AED0902A98F8E2020266DBE41D236C1A2A54A603
CC95458C75FB1DC7F93E4C77E5952539F631516FFA10A5019D58CF2D87A0348C
46BFECE00C063443EF9D7B2909DB0590413C9DD1AB7F5BC59EA2415E214EE689
43ED567AB859CB75763BCE4712FC0BB9C6F51A1F30447D8DCCF87FC814D5823B
D57C512C2C6542E74C159533F0A7764577E39B18D3648CEACF9ADC21C7947919
2E91D0D9F64D2A2A09724EEB30144C53A101612F5C8410F9F4C82900C11DC8A3
5DF1D650780ED9969E205FE956E9F319E7737B8908D28EB2D6CF6BB6A093706B
5DFAE2BB2EF36CBBB31824F93F273DDF44164C516A24BAD59710AF2F9E29DBC6
8492EF2CA228E709A43CB35BA8AC2A5E4FF75250FF4796B2B5D21EAAD7A2023A
205CBAC9344D58740D9FA8C3C386D000EB7DEA3CAA55E13F839CF8C96D5B007B
74C53AC080CC3EB98D73BD40D78897C0A28CC260E36B33125F62AF90BB9901E0
9D403003971F3AA3883640ABAF6B7C6802C992626F32847D6C49896D7407CDF3
C7DBAC461F88EDB7D4DD536A07F238E7BBBAC55E1040F69D90D0697D7858C28A
24F6ADCAEE4E980850524DC497EC96A2E0D2405D01D18D87DEF361BD2B732A1B
CBAE0C06AA81B4E403A32D8D84E76B0A7F15F0839547F275C4B553216CF17365
C147D34EE1CD61EBAD1967BD944D15866099A473D2540604F8C4F3D268919D83
7DB258E08D6EB18A579F417C269DC9059FB310744E36D472B77A60E60D4C86A1
C3EFCA4ED0932B341614AB1C08CDC3FA4627D1324130639C2208D2FD4D7F40A6
6B26A90D3BD8A53765DD316DFDD9B91BE83B0FD4CD59A2DBD7AEAF5C700659D2
CA72977961DCDD496180000E32FBF74024E49B4433FB40B2E0C3181FF88850C8
5EC6553A0ACC8DA1A6A733734C75C70C121CA2DA3A5F6815501A39728138653B
6E3ACDC92ABC72EC2EC9D170038504EC2868AC98D3D1BE8A8F1168666796EEDC
74DA7DA2A0BCB5B7D11754BD9B1882B58A303E61D6B5230B374A3A5E1886A370
257B7BCD40FAF25FDB060531F095177EE96EF285F1DF1C8D59761CD25D2A2A57
8F2ECEC926D8F19879B79A6B0FCB4531C7161AE57C083F36B49EC037F3C5306B
5BD88322CEB9D78691A2C12B8A9998A0A2DFB4956F5F1898BB62785A65D789CC
460C99F264BA35D275C3CB609421CFE9947E43A783FC0DE228CBA53803AED768
7DA6F71014DC28B95EAFA48506B28BE8C631932CCC0076D6C5A05C0A51228817
F081C9B20B36EB557AAD353E379096A882A85B74043F75A6754FF58F756A743A
19F09249215DA72E513E9A6F7BE9C4E7A1098F9220D2CA2353A44A76C284742F
882FC03FF3E1A4D406648B4630DCCC67D57EEC01B4A8B226D05F142726B5CBDF
928A4786F1CC70A79E4500990FCE58AE8139E3C1116FDC81421390C0CF46AFA5
C92BE4F995F6089CD64EF9F1A0D2ACDEE51C15339ED490C5DCD5E29AA49CB2E2
32B9B27D74529544E2B07CD01ED8EEE69ED7A80C45BF60469FB03EBBC31B2A9D
98E429CBBC706AFB3F62B888BD65635D63F3BF8F6A2DDD6A7B9313B6A85B320E
BC4B96E948BE3916153AF59D32378EB3E8FE6785D442910BD7C74B765967DAF5
16603F79E76F9C772B50BBF88619347F2D6B08C24968173E92944117A4F98AC7
DE95E3224275A9884D543ED1AD37E94B15992AB313D04E8C66B2637725191809
200107DAB3C2169E28BA1163766D9B2E5C3861C21F9FF8A47936F11A240E68B5
A16C98902E1A35F568231B8CBC8F099B173225C0074B1F5C21A4FD2D8C6AF372
F5E7B6D442E6E0C980544226B714DB029911B8590D621B22508B753A63A02072
36EFC25FE73579CE6262C4FDFBAF404E6A5E7963E4E66711A90F9615B0C7CD96
F06320F5D1CA10990983372FE4C2E9E034E1B6BF47AA687F3E1BE4D912F1EF6F
0E7F3C9E570D38399EE49CECA5D298B2846E71804D318607179AADD6624C1BE9
BB77F56CCDD0F0655F5F28BC7E81896E5C0EC056C07D338F23F7FF3BD97E6E32
B39817EB4FF22AE9A13117DB52168CD11D71E69225DDE58752069F7FE50A2BC8
09EECC9FB0D77351841D05DD9243EE346A22F67D145C255D864709493316E3D2
9C9848B68BA547AA0CD45CFA5F1B1CF00C5F99EB79ADDE45FFDB95A7E19B9DF5
619FFDDDC72BDC58B0CC8C3F503D8B326F3154F019D3A1CA9925F45B220EC196
0DD4EE119BBD9E8E518B62243160599B597EB135C73DBEB3E49A83EDA27078DE
A7FD9BB1BA82210C796A96471CB393CDC7F53F55698C47EB7D333205BE506D1F
741DCA02BAAD70B4915171D808E9BB08EBFC211FE2848DE0FCD732ACFEDAE262
1A75EAB93487D073D03BBAC2821B87D01734EEE147B93C22F656FA8A0A14C195
4F664F9CAB8FC260F9508A66E23C12F8F26014E8CEFBF9F85538B158FB865F5D
C2CB2958EDA8FD0D0172FC1395AF697B5E4CF8245D9576736FC6D979CEE2AA32
74070D0550AA73F65987742EEE2757615862D0162BB2FC9011B257430ADB2015
2C3E4AA7D8197B6619C8AAE806C82303CF2E2EEF86A339080A2702F22D489E92
2C96CA9EC0C0E6C563FF2F28C67BF60E58DC553F9017B589D2700ECF7BA8A237
E544402060249545D24A64E14EB955AF853995F9C356C7294A56B7560FF25568
17BDB7D4551C5899FA92B59106466493A15A2035E511E73533503801E4CEEF6D
56EE99A4A7A5603DC85F6065AED702B6C44191F5E3F766D3EFF7DDCED3F7FCA3
3932838EE85389A9F4EA7B98B9847F46D9E00FD312C33ECD1169DD1C687AE86D
216F40D99F72ADC2A0A335C829E08EC361265E4172B2D18F392D18DF6DEB43F2
B8735636B7F5107DA9039223CAE76F8B0098766AF3ED5B41147A380E78DBC6D1
38DE4CEC6306364A12BB44DE6BDCCC056ABD9453995D83F3877C3804B0E73FEB
69B8198AE439DD6F923B1C0EFC4E210667E4ACDDE6F6A75D0110D7CEF7BBDBC8
6A34E064B254E52CA40007FDD75582597D656110E1EF6522638C25237DAE7642
4F375275DAFABDC25723D3828B75929E7B6E297BF76EF7958A6202E08616A893
86F546EEE8787CC6AE5C11D7E09720720776E03D01794C755A8E17FE5FF5BEA7
CC349EA8F7E24154ACA7C7FB773046FEB70AF0BE40987453A6033471C55969AB
F0C3A9FC961C10F459E8B811ABB5CC3C35597659680F06946BB1A855F925A384
C26CC1BE935CD06E3B6E445D0FDE4FF95CABEA02CA25B264389ADE8BD73F635C
462FCF3ACE3144F75C8105296F6017F1ED2348BEEA03F1C44010212886F174BE
535D01957E128E531CA6A295A7E3C90EA95CDD898B7F7D6BCC5756A36A77C3F7
FD4CFA066C8C1B74ABE67CD924DF82E1DDB3E2E7E376974CEBA91E009203DC06
CA9A64603B308F617E94E2809D8A63F20BC595D2861E91B9C9F8472527E652A9
DD406B34E9D1B656FD2A644D9F4C4D94992E0F402186C37F751436FDD02E623E
9427E551E697B5F173788FFE83CF40FA2DD17CEF87F733C3BDCE08D4DF22CF8C
5C0505FC066E59E5453EC6A753D15BA510F67CED0B38B7169521A392DB1EAF4E
5BDC6B737D25AFF34EF7E0F8187C807078264CEBCECD6C516F0B03ECBF4A09E7
98D0CFE57F1F6149F3C58004C16337E58A6D9AAD6A29F3288B0CA43D4C867855
C562FF4C9B25274F9EB2DCBD617F14DD47BF07BA992754ABB35EA0680D40D48A
A6F87C209473B1D3C9818FFC51488617CC49824240848DC9A7E62CF9DFC350BD
C230A76B131CC5DE586369B32E01C1E797F3BFC189DD4B79132F2FD38948905F
7F5917A7FF561BD9290C9CAB07780681F7C15BC09A2F8226146F265A18F81DEF
0F52D4487F07B0154DD8846FED570678C7805D5783BB0E4B800AAEB8EDD2E276
2290D5949CF280422F8D45B9CEF34F29EDE64A03A620EBD4D412E48F38D6A59E
CE5F8603B106C95E12FA0F70940DF9283BC0683265A025D921CC9CA7ED492235
05ED9F41954FFB65B25511B7F0B86CEF48773EF2C7557FE8262E8AA37BB8D442
2FDB23A7F0EA31306BAB4E66DDD37BB08F8CEA2D10B89FE045C5EBDC4FBF75CB
3C1A2B8F4B07A3A01577EB2DF50496EE58E19590C94BF1DAF1180C53F73F5A5C
EC7F3BE420DD2433F3B8B482BC3204D6F4E6788DCD341EC23A8C7628F64CCF7B
8F922C7A539EF5769A080C7269A718AE5786015569A6656A94F75D3795AEAD09
7D091B57524CE5083CC45A3CA13403B870DAA71BB5BA0344B3044EE75B0AAD40
740DF7349524497C586410F56D13300949A634615EA9B2EE7E7707D93D3B87A0
5E9095A51D61BAE1DBB6DD1A522803655B1430B6F4D35D8771073A72B3E7274C
B9352DDFAA0614719F68A8464D301B90648DCB2616C1DAD42F8A80FB2272E825
18D0D5770FD76D07846A5C777D35A00520D24D2126AAB8F10C5CEF193E3BD1FA
6C5DD3C2F92C17799A5E15E4E69A3C1385385BBAB8DA34D2E7615E408ACE4286
3C3F587EC201301CF8EAF6E4EBAE3B38F20CF28F4FA3C5BFA7A51B557891B9E1
B1A51EC84EEF00A7C15AF6F3D26B8C9E5CBA31A562253A5BC7DA23CB7B35627A
317B3FAFB31EA3D4AAF69B15880BC8F1AFB5293851DF7513F25FA75DFA7F43B2
91B76530C11A71E4A6A309989C8255A1AF246D927BA0CEBE4E2C4F97C1819638
C05406423DBC55587F56F5A6D571F9F7F2924D3E4CF821C86EE63B525515D80C
793FD22583BDF45659339A293C75A3F43F0CDB5EDCBE9D45664CE6992AF53A8C
102C08450B16815D8E31AAD0CDF8DD8F0F44E989A662457F8BC2DE6DBD244CAB
E9754171E939E335C1A425BF098483F79D814E16DD365B58EAFE864FC879F04C
11E8F0C2BB42D0473A7BD1DA8F1BDAA598F0104B3EA1BF600203715F48B2D4AF
7AF6C58F1F4E4541C43A0F401D2F93C4EF5FEE09421170D0D50FBB4C049FF4B3
DF0CBF68A3696E3C56DD48191F5EF150FA8E5B463910228A5FD30D0D40269782
1BB88FAFB9D8673BBC5556A5DCA64D44D2B13F9B74518C4B63010ABD9A38BC45
0DE2BCB4287D1FFDBF77C23F7C822CDF7E837067C16CF92A08636345D4FFAA1F
7429244ED0FE20DBBC54259B669A1B7831F738750C018751E4467FF3D67315C1
F48D5E99F4A9A08E7E5C071841210FC3AD407F3E069B0E5AB6269BE89F4A4E46
8634F52E3221DCF34D790467B9BDE908B6168EB0F18FBBE31C099160A3D9789E
063D1DE528FA488BBD0654B8F24A92166C2E0712D930892571E74F5D7B10FEDF
195C072F76901D2F8161319585693E544D28CBB450BB874AAE92FDA2E87DD78B
CAE11B953D2A87E60943BC64E1C1A0CB5CBF53DEFF71339D65862A230FD2CBBD
E00FAA3FD5CD8B7AA605139E64BC8A852911DB48EAE13F2CA76CBE527BDBCB81
E0352DCD5418A4F08AB70010CA12515DCB9AA5B570A4CC1D143AA6ECAA4BE530
CEFEB9C8A8BAACF5FB17F010A617B23D252E11FB9EA069B573F8BA38CB762E44
0CD9A3552C40A04D7C0A219B1125A8A768EEB3769C6451D97FB886370B13D083
11A75D31E16E261BC7F8F9013DD79E93EC3EC45F4E24348A021A13B742D4B9C3
113BDEB685F1EF3FDFCAB3845AB255A8A422A4B9971BD073CA88E055C5C56A91
5889A543770D01492F37A0CE93CA01A6484A7FD9D72B289A03C555FDCCF4B99A
AAB13A1D2F505EEFA21F4D1FFB42BD676EFB38272EC459474099C37A7707088E
A4E696A39347DE6117B33BF8D0EB7EF5AA9AC84C56A9053CF3518AC8A0A16CB4
AE36CB90364AAFD7A0A29CB3368E7ABC319C8C69B55DE28503046A1EC675C052
5288D0703C13784421A21D32019F94B4D75ED3EF88843BCD7156B0DA307F7185
44EFEA5CEA1994954E63FBB60FA123ED2C7BBF66A56E83B606FB8942094157DE
67DE179BF73E0A1153FECAAA06B977093C73B4D4D128980E27FFAE84C0878FD2
36B7CB1AB35ACCBA159E3F26133D117EAF4A0953CB3BB191B1645EC50B297159
EAD20E4870D6853B1B55395D929AF4F1EA3D1EFA499523E4FED9F81950CCC7DC
E32EA3DBCF1B7DB7AB2A00CB0B5805E7999523CCE37042D5246549AB8C1BD8F2
AAE2B777DFAAE5E6490A86BD48DCB87DACAC4FD5FE452E59C329189C8F387C36
30FA620F90C0E796AAE5142C2BF676F9F04C07309C3785CA771BC94150EE8653
0F44F3895E19F295B8D81ADD4A0F6FBE07B588147A5F3DBCE619B47532E8DF87
F45A42BCCBEFC8AEA521D57A5920A0CA45C8A5D5F1F0E9DBBC41EC50E75CC685
3433CF8882AF818D11199F14ED4863D11F2EC4AD3473F7D275E391B0FB0F7B5F
009844309D719B5963C99BEAE75A11C29AA76CD715274B4E16AB7CE61FCD941A
9B088D13F290BC7004B3C0326C67C2FFB7C44A038E21077870B38FBBA3EF26D8
69E7974EF6D352658ADCAF9DD7731396E4E809463A8E3B963B9EC2BE30830B11
33FE2F3032A5351838154B9DB7BEDDD12D926F2FD97E7250E0F49F3C80E98315
4718EA1C5E23E02FE7A632B76BC2D62B01A8F6413761FA4E8EF7F9D5E13046C6
6FB030E13E14C61E18969EEE74CEDB6289116EA1FDB4FF1764DA08791902822C
8DF114D09157B235B0B8D2BDE8D45AAB91662FBEAB262BC90037FAFE5844698F
7AC79FA64EB21762AE9DB4C75562C16C253671502457979BD49AFD8E8645DC05
C1CDB79E987D00C8D6AF67C53D8445B22C837A2E21BCA610EB1CD68EC835449D
22FCC4A55C046352FEB7E84A85779E7346AE35DE87AF5ADA05E162F5DCD42EA4
70F8E12A4D3AE97F3C9BCCBFCDF1DCCDF388DCFEE472608D6154B6A25CF23F7A
DA7ED62B1FD25903113193ADB4664E0E0A6AB44D71AC0BE5AFDED2E899FD4010
BA5F988F2C0C0278421E2767FA96A99A14A50048F8BDA3916F03B53F23C24B74
0B6EBDA265F701E5B6DA84EBBDBB607A8536A8DA83E893903048C31ABA98BEE3
A8049EF48433EED5D7E08C28A2D09B5E446B84C1782196252BDFAEB1E43104E2
D50FB59B4864ED2DADBF00450653F2EA086D3DBA56A7F03714F59CDAA5796902
0A81E4B125FB2D45E49BF05FE2BD8BB449AA5DA92A62AF7755A624DDE528A55C
EAFC5DB35D42F98CBC582FF9241FC0BF5BCA7CB3626BD5EFD109E1BC3C84039E
E094A5C1AA7F7A5A5712EE654F91C7F8ABA4E96890380EA51491A966A4889538
719576E0BD9046D833C998AFCBC25CE0DA15220F44739453A7810C224E1A45E0
0E7B3834D80572D05BA22DB999EA389B3BFB665CE6BADAD471970C3DAFAE152B
D4CBEB73DF927C17B988DA43B655A41D35B3D6137BEACCE81BB4F506D0C5867D
94360DE9F4AA031A7097AB93CC83FB699282C0AE20472BCDE7F78F433B215B5E
CB4D68BD60C0F5B9AB75C2CDF1B9ACAFC4C7B044A7AF6A45774E86857D04BD70
48B8BBA8F22514F98867EAF64A8398CE65251B5F6614BC42563AA1FFA456E617
C6E64A17B763ADABFD00B54591B15064F3E6CFD20E2F46D4D96E63A01156F160
BAA0FE23ED51AEF946C4DB1AA910AFF0D4AF8C3DCBC1AE0A766D0D727C9AB796
A660B64F25964F96ED0A028DD1A56E10DEC86FDF360C5B45D832706AA23CB476
F13AB2AEBAA5801303DEE6BF1E6B1DBAEFA14DEFB620F3AFFE81516733F2274F
B098B12CDC9AC5AFE60D09F667BF68D656B46948518287A9CBF50041DC7AE8E6
FEB358BE1E9BB469886C0CE0294F61E718F0A8278DBDD3B0F6E44604BFF2A019
9528F44105D41E2D4516E6BD722AF33EC6F655FAB3C521A86D67F476CFF4AB0D
239A3F19EA431F523BD0E6CEB1AA2AB49BAC6C1E1B43A67E03670517692BCEBD
D71ED811CD7EDEA6D254711CDA9041F1C0391B2FDFD0F91B6BC8FEE878BEDDA0
A61F0857B056717C29C5266E23DDD3FE3A833B915A2BCC043E2A6F3AD045F7B0
D43154AF9A3F4D2F19F3154DD57AEDCF45E12468974925B41BD7ED7F30E72812
5F687FB7565CF6BAD7565E8A92F2CD2C3F45C51E78CE6D73C36BCF1A9EE610E5
40112B21C66277F8908D15E7884550AC7BC6D4C68BE19110CC8064D37B1DC81C
3B483E5D2763E36BCE3EE978233D352D57E665F325CC8144536E2C82561A1631
FB889D9E6C7115F823AA9172D945D2CDA92C539C609261C26CE7548FD144F33B
3B313F83D9B44B44CAB27C1DAF7D6A4A432D5C5479F12D286E4CC27B3E84AF31
7D74EE04B910A59D859D9222E602D6651360456E66B9EF71623FE70D66316F6B
EBA2E3C92918B5A9C29E175AB8524DB5FB883A3106832869BC77C511F5987ADB
487CFA05A1B456545978ED84A804428FDA1360730B0FEC7804B4A4204DA974B3
B0678DE6526ACA413CDFBF726FA3EF6E69BF3E79972E354458B18C9CEF9BD11E
347D6B641825BB5E22BE72027937F1FD74EE4741A562A4050C8071AD2E700B0D
5436330D9DC58D36C9C4921D415C7856CA131C80D9D6B11E302558CB0C921D83
17C8A1741BED86E6AB9FA1BD9FBB0F114C17032C359393D5CA484A3A3CE04B13
ABE322F332EAE824715B31EAD2A03C708C48481473D7E60A6AFC1EADD6F5E24A
EC480344973EEF8938449B6A6BC85A6E351DD803D41B4008DD28DE2A8138DA66
9D0900EDF6C9A872742B9FCD907714FEE19B9056A69EDEBDACC2C1303BD11585
78F9CDD9D3D8F425F2DD6D31684701AA2B4BE74B029E38EA7D5C6E23939A2848
A3470AB67110B8BF6F3876C37C55B793882A7E40A348F9AEC19534F5C5A738BC
7B9CC9097CAD5B1F1D0BCF75017A07CAD07E0B2DF5E9C3F1032CF85763474E86
12BA82A78354A4E4CF25C69070A0E5D04D94C1A1CE7031E2778BD16C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFBX1440
%!FontType1-1.0: SFBX1440 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx1440, tcbx1440, labx1440, lbbx1440, lcbx1440, rxbx1440.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX1440 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-218 -316 1652 915}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA16EADB32842B6D00C76EFC613FE56C
378A7118B0589B3EE5425457AE310AFB3829876138A59F58D965843B709A0F4F
D1AD54875BBADFC803A755669491D9E98262991B9634084E8E2BE46EF805B219
D18DE35ADE9A8DBAB7AB761864BFB6A27E5B421C32CEE4569624D9308A32B426
FCFA5CEB883444393CD7A58F9CD522BA73E17492DDABB7E00B2F6BE47F585EB7
FDDBFF33F1B5E5465287717D1580105BF3929C09EC621CEE9606EC49D7051A00
11935EE728A2FD47BFCCF00C93EE54910F77C1CB8622B9CA129D466746BFE1B0
594A9F0C785F6CA67161EA1480AD4EC6781B9CAE9536F5D3AC6D447F16821F77
AE2705279CF3DF4E1E9AED81A0CBEFBD61808E2D59AD970264A5B66D1F399DA2
55BA0AAC8EF1A1E16FD8240D577F5E00E0040EEBCC193F074FEC48DF30882551
E23D64EF84283F9640AC5F60EB1F26CDB79078AB0C0D97D1D6297D092380D4B6
6A2099F06A513A78A3C3B82A6DBD985A0DCED7150B19FA42991A3D408FF95978
15D309AACEA8C5C0AE812F50330CCBF47B4759C550D49173127DECF05D783DB0
978A366ABD3CA7D9BBB6652459A5E19F9630CE75C2BC7BDFBFE0EA3D8098CBB1
98CBE02F196C0A0C5E976DECE72778358CF8D0A79A8B5629A6322716CBFBDEE4
934E8782E716185235712845BBD03896BAAC6A8D34B401B6640437CFC4AA0549
F63554ADEA6722C5BA6E735EEA99141D41B111BE76EC06E71C4352EBF9531132
BA9B1691B43518BC2CD729782B8F3C96ABD1F238BD9CD383A2088633BF2258C8
0CA614D989E393DA2ACD160FBC1E78683911C2F6784E57D47A89929306EA03A5
B5B8A32559077220E39BEDB251F465A8A7F6EFAE206818C7BCC1532ED7CB27A0
85BA2FCD1B26C54D2E45D20FC44F8D27F0257163E38FF1E99D5CD7F8FD64F111
8B62049798A7440207EC9D35F32422B52E7741204FD93AAC08F961676204A8E9
FBECA814889852ACE42427B6BA92129B71295D0F02753A2401D49B76AD3F388B
2FFC563024205C9F1796FCC3A742F71DF496203987018C30EDF91C09CBCB3004
F5E43D8344D989BCAEC8647D059B71760B60699103C02B591D94085953AA427F
2F88AFD887B22532E893365A5DA56EF8A06F9C98D380F11A63AEF0F5F7739EBB
F62B2836E1944222C1D6BA5AA4FAA3B9BF4DC0053FB78EE1409470CF73E1B9EA
80DF701E6064C6850F19456E253C117C8DF93ADA9D54DF5BF9912A9833C02C79
7491CA4AC0FA3EAC58EA3CD547B097347022B082A46E0B4ECD8D4C9FB046132D
F4297497A9A961D5669DFBB1A8BFD8B8824011FE1CE0B3C7A89D0F341A1FF657
90FFA9579729FC99474A2B299F4157B453EE4D694987D9A8FFE3F3CB3D71CBB8
66A80D47938837DF75D2A83943A8BF68ADE3EB55DB14D5999DFB2F63B9C93187
261F5151AFCED1D207DDD88194409C9107A29D15A7CE24DD0C1715E3234052F3
014F9B6E2732EBC81F6CF471FC1B80589515CA27290AC88D73F310DF1AC75EF7
0DCC9FD9B1F3E105BBE0EA6A46F3E5C4489992EE1A42C19DA52F0907FFB1B5B1
FCC94F9921E06B4A2EDACDDE814B5859328180086F32282A9E52E19C63F338A3
7DA3DE886C3AA6D9B5953180A228469E6EF98913D940B5B7DAD5BEA5C9F9B9E3
6C5B1F99101E1C975A8ECE514E9070A1618C7C49D42EBDD432F590D40A7C22F7
7A499B68FB92C6E63D1B0838A6D0F96BB81512FB73170B7EF67F30AF109ACA1C
43F367FE67279A477BC201B7984F18C81BBE3FBF1A53CB338FE6461EEA5F19ED
EC6FA671B0FDF9B94F0C041EFCC25AAAF3F7A11D5553F3C5C3BE5144CEC2AA1C
D2823D9C0B0D233256F519E4EE30D7ECD2B178AED921A46D8180CB4F788724AB
4F8E511D0E4B9C2EDEB5BC591BB36E9DA1187B9B5D4A33135AD1575AD2C50C8B
4D0F436249F4B8A39D447D8E546E97A0B7F329370C4679B0963CB8591A3267B1
335BA15AD2502BDB72A4C27DF34CB09E310FD1644CE582EB7FB04F000164D053
409ED44A232B3192CFE4CCFACE7C7F381777E4EBC7FE7488B9136DBB2C0A46E4
211725382A28319378A6C2E3329DFDC3DEF48C103BDF468C457AFC1E7C7240C3
FEB61D52F5F0DF3BEEA62D1457FC2C28B175A3C2C68747915A3A5A392283A083
ECE851AED6B9B7931376C9ACE23E946F6907604A4AE4955F7612B5614014F2B5
8F413058DD1E8BE9F6E60D417AA2C31AB16048BAA97EB497CFB636D219A66E4A
1F2215F531651A4B1EFB2CC9909EE450DEA6347D6FBE690A67801933373072F9
75D7E809E9A6A9F68CABC841D1FA8AD4FFA47B01ADD904DE6BB773622E19104B
8C9C295586F4932783C07D725DF415E182EC5DCA8670240CACCC14FEFA1ABE01
4695DF86EE890025CF7AAB2A7C63CA9BAE1A9B31BE82236C7C3DB751394C2BA4
39C4D7364996474D99E57993DA3B42F8B404028E03377F7D1E8D4615793E1891
DE1925EB8D81AC0169766CF325D2AC4098AC454C2DACFDE349DD187344DC7F5D
3526AEB9951C726032A8167F66C926BB6CBFDA512188B6CEC6B288C6EBAACA33
6C378E1C5DC3B29A1E3EF8957D20F4464AC49E4B8E3821635D84B7620CD8FAB4
C5018F5D8DDD07C6D4AB3A78C3F38938DDB124C54B17CA4177064CC7B861325A
9758F70935D55B1F77C28A164DCFD2DDFF0A83F38D5CB26E31BBC3A16D3277C0
11BFD362CEA734E43C2D227D19765BAFD457E9174BCEA5CD545DEB8EDA3E3D9F
D637C98BA46A6161F9A5B39787639A1BCD39A8B77A80127C683CBD165BB74619
7024694C64C8DDA0974697361EDA9FFAA4F94A60B091FF098A829E5B54AC89A0
6067B37516886C28EF30DC67B3D3312638879F4A10EBF89944EEDCA432703037
321B332CA9C483A41C4EDDEA523D0D446EBC550B5FD71A55FCAC59CDE1AA1646
FA00A2A1ACA0475A6553477D763626A7494944DBC6BD6B8F8DDA5106F6C77FB5
58D0AAF789A8805F8D7366A67DAF2476A28AC1D042030FFD1FEAB98D407DDA77
0F069CFA8AF730878A978AB67E67E2395FB8D69CE96AFE1471D485F5162561D8
1ED49253D2935C676165F558F66269A550A40DA90AB5C4007CFEEEB699048721
F9E9A0C65B29FB256F0D7AD9C42307E9F0745EDBAED37CD11608A5E06E4F7ADD
AE50DED5403C4C5AF522389ADB619D0DF87E5AE87806E2296B8A82233F708F96
7186E21558A0F03ADC8F33BD1A9CB33254A1DECD3C482243128A17FA37115F9D
3DF5ED49D572D379CBDC056EDAE16884CD13FA687EA3E12509900B86C49073A1
F6B1B9CA71D375C705A42ABC57F8601D0C9AD652E67D314778622B61453FFF5A
FC65829CEE27DEB404CB7C464E2489291A7D5C1A1EE4B989D3A78C7B7DB5A1BD
9DB81BC806F4206253C2DF5B4B41866B0093A78475FA18A11C8FE5D405B78715
20582B40F2E8516290DD4760DE6AE0AD0AAC6F1B527131E7274EEEAA28E27544
7187048ABD8C42B329EAC163090F32BE371B5DEB8869224B6813BB2C0883CB5E
34F8957D20F4464AC49E4B8E3821635D8DF4EC52A40D1B334269669101C639A2
5CD6923BF142CC9C0DB259868EEA52E4F9C7D559B57C1A79399593D71AEEEEAB
C20A070CC349A0F7AE66099CFFC7248F4AD38D6923DA6FDEE0439EA954766C4C
14F8F9B826732A711FA2B81AE01A9AF35BB0C43821F047EF17DB2DEE1D224BB5
AC76835D94E3FE7A98C25D37FF1C96F47B840E5B9E736C67753A428C7203ECC0
22C0120A16DD84FD33E2C16DE4DD0E382FD468D8E48FFE92F26FEAEAF056A939
5F60479CCDA45423AEBB503706555006EBBA3AF7681F89E41AE813CFC6DC9150
90B391755F8F6DCCF1D50321133C0B7A4C41EA1754A222802E54162EED9741D1
2AD5B006309540076A997218EB1A6ACA2C0CD206CFB809F4FDCD35C29E479B09
0E1470EC6B850198848DDD0D5648CBE820C1ED09CD211E940090B78B9ABC7684
724C6672A2B41F7608C1AC7D63DE6FD2822C03F85953B2D68A170EA2494C6306
635F9B5BE548F6E393318AC9F32D30C245DEBA1EEAB8080ADA3F12AA5547FF50
71BBBD6D42C75FBD2BBC1AE64F1B085677383ECD7E725382A8BFEECC5A3C5EE5
5797D55FA6D2DE2B234FBCB5D8FF066C543000657FB68AAA09D5E3DBB92B55DE
E274A3BEEC8A716507690C6D4D803EAA84D8B5EA4675B669723240EF44CF2E48
BCB385791FC9EF32222FCCFECD3CC759CA120094BF10839C82DF83FDE3D2CAB0
4DA8CBD6D483A53F645372B2196514250BDD3158A163E2E0753A66DCE85044D5
A69FDEA6C8711685934690F9B8DA5DE01179A06050335EE3B76239128E786995
0B2580F28D17C685E49DA887A4FF26D3263B0E4818D48ED571BB338AAFD9A3CE
D45628AFB89219F39812EAFC0951F619BBCCF098E24AAEA1DB1F0F58116E052A
766636F5424E6201809440D2631E0F71EF0386A643B9018D53D5DB273F229478
4A3E76CE357DDFE4E797FC5FFECB34911D895F050F420D81E9DCE30909488440
4A8BA75212F29EC4BB71F3AFCD0020FFD3FBE4EC8FA718D977F90CECFA2CD239
10B38098CFD1568C4B2107EBC1EBECBA9FA07AD35BEA54BC1AE4D4254298EF3D
AA7BE47741F7240D52145DF4603715EE10735BBA4D7398F96553720C98D0D9E5
C25FDBADCECBE719D8674DFFE102DB08E344A747E3F7FF9B3FC935C17762B43E
6F1E9B8953C99A8F75821E43E481DF6360B8816810568B505F8FD5A8C4F6D0D7
FA8A243950BDCC492A24A9BC12C952BDD61FF283B92A5D2ACE5902EBE49E918E
2730C558421C353204010339CD7657417FE127C21585D0BEEB6F42369D3D5350
009CD7AEE826D25D5A2CF377922CFD095012F32CE21205CCC608F630B2E9785C
E304B9DAE508C15C00B48E5487F904A1126D83D2A49064FDE9129772A729C4EA
FC2F760DAF84AEA8C227375D62FC992C52B688E51E221F5830772933904F836D
E7A317F1FD1CADB828028E263211888C6CD39B5C3A0E3D76B433987B22953C50
AC9428E88173DBEA327228CF763A6A03E37A5B6AD6B0C147B1B36F7335FDFC54
96A7F256197AD8EE1F44A32C81C2F455F34CD9E7F0A245759BE1FB6B4CE66638
DFA395B1FF3918E6F23C7D57F379E9BE619F524AC0F9A2E61F9BD44C03668456
F7004A912149E9FA0FE557779402C184A4941811EEE7E680014A1E8807AEC73A
95FA437CA48639E245DA25A3A605322D08EF50C9B12A339E49B81EF1079B667C
86D9B96239829EA1304FFEA19FA70956992E2DC8702A0376BFBBB4C4A6C01F93
17BC4C9F63938E88CA3256ADF95E7E78AFD1B7373AF534CB8E4EEFF47CCC7FD6
D67BFC8B239F46DD76961F400C3E3D9F996263736D79A3C2B91C78AB276476ED
15459D627A9E65A1323BA915C10CE56B803632CEF2F8B2F2138E7F06D46E1543
03AE2831F9B1B8EEF3DF08B8792776E730744DEC36C39A00E79A4F868BF0E582
CE59DD828F4377FFC20B03CEDA4C842ACF78FD68F4EC148184BA941F87B05B04
A4463610AEB3F1D52392951B81CC79F4ABDD8F935B366D4EDCD2820D4F3891F2
62C0C5D6FEFAA4277EEAA9284966E210822420A9A4C7655BC4EEE667C9416EA4
FB87B4A4D21B797F8CC137929BC8332375C90737CE43B159398C5DC88B9D4627
C0C1C47ABC36A6AB34E1A3BA5ED1F4A1494AB80390E2A67D5E1BC4456098D9EC
779487CC6917023CE9CEA9482C7C38FF0224CDDCC3983756CE0D57AB326F1A24
B0B5B2D81046B82A418690D008F38214769310D38B8C0B82852C0E40A45E82D8
93F90256A590CAB05272F27B03AF9384B6B0576FF87B56195E0156ED0C13A960
973A0CD9B17F2F4397976A72E90E3B9DD8A124787F32D062500248D94FB243BC
6C66691B099DC010BED9D23814BD30EB76410ECCA51171D67C102BBC2A346F26
50B1FAC2C63A314B253D543F81DD5D5A7340F0C1768AFE895500FA51579F5F0D
88CD5439E4D026283CAD4140145C03B42EB816557B3145753770E18BB42FEB86
54D3607348DAA1C40BA6CEDE663827A5F25BA96256A53561874ED25EF4F760E3
12A1C78972B31491F9B800144EC0051F70FA13C410FAFAC56DCBE065AEF0EE4D
26E27D57B9970705FF8A83B7B4CE6AEEC6128A29EEBE373DDA7B54BE6CD705B0
7E70CAED2262C8D914AD834729538CEBAC2E727754189AF4EC871967BD941D8F
7EEAB4EE2D502C4E0E4FB09B4CD634C5E6F4EB5BE82B36CC5546526918E11E7A
A81F5F04BED16FFBF4243F8DE58E8097DE610F15B761168009FD6214A6BA9FE7
F42F59D159967370A7D562EB02A302BA4A00DF71292C202B676BEF8AD91EDEBC
CCB2990203492727E45FA87477C089BD5495A5A98EAB24D42039CE379BBDCF53
2F13010889FE59E50851DFCDDA6EBCD68F2B177AF767B83C90948BDB82ECEA94
395D64C166797ABD092C0B8A7E776E58C6B20E84CA30ECC8B014414AF95B04A2
21533C6BD0BE33353764348231C0824A275DDB6A89D89F5081F1FE0C10EDC3DE
C832CD24AF945BBCA871A2411CEF1BBCE4900C957D7FC66A801D6CFEB3517691
260FD436684182C9B8FD83A99CED31AF908C354D5FE8946BE2BEC59D67858007
3AB238315FC594A3F3DD4BFBCFA2CC9AF57F3F67D96AF82BEF4DD1F86726A6D4
518F3068D9C8F38D87FC29214611C32D2AE1AFE2C9A7CFEBF5854429F683EFDC
BD00F3FF4B5E3C82060040611396581F1A77DBFF8FE4041366A8A106ABFAB960
C63167197E6BECBE01971F293CF8FB11761D1070FEA8792D56A6858E19DE76F6
F7CD966237C791B7D6F365C8CC17A2884DAD18E0EB09FFF0035003C809DBE560
FE041B084FA23261C8E621DD610E0F68F85FA61A4A98EAEB075F267FE886135C
D0DC32DFEDE301EF9FF989C86F97911BBF5B906E95D61B5348789BE20BB629F0
876B03D446EBA8C68A1C76B8A0EDE1A3383B5BF598FF605ED4761F86D4546EB2
FCE9A3CC455AA3BF9AC2D35638A2E81600EA4C95F3F1DEB3A0F432DDB9B00355
5AAD1BC2AACAF34C727330FD4F460F8E24F928A4F19BC54EE197A6D96505DBB3
04B08E960DB9D33D6AD3777D15E08308220151C98268B72066E69622F5FE701E
68DA4F39836A37FCA0604E225B4B53009ED1980C4CB0D911B481BC86FEADDE55
07E1D03D9328B2F8C878A8C1D239AD11EBF80D988B018FD7A1BEBE4CAC809746
1684D14FE0ADF32F5E0F9CA5CEB8950D60E0108AA71FC346A14852C693F64A38
BEB5B24777F81CB8BB33703D4C52F2D5209525947CFBD1D90A82EEFFF8FDC074
490FFB3EF443165E8853C55485E1DF9B7423E732584E8F50FD61EFD84E2890B6
222AE4AF9E2AA3A52709BA37237B9D1D10BE9FB1CF4AEF4F86E52CADD6114791
A4C6D52F763A923535CC35763C2B61D2B1E6D048D564C8D315AEB1EC2805E1C5
6025CD6BF8A6A22855AF937CA5F3ADE54C2F3665F149788BE8F7D30D168CD79A
A7CAF3D7727CE95AB51E299D8D269904F072B85E8D95DD1DDB021C299FD644AD
1CFE6EB8A940A342B69A87062DE8E561E50D63580B9DCE1ADC3A94ABD8C5C4B8
CA4323981338327D633A38E57BAAA57A721CD5260E54AC351397C72508A070B7
7B336E8249BE13904D8F6C7B2BC39C21D0DAC017324C261B59B85A764A7797DF
2E3C076475AC946C9E0ED107EEBE2A7267DAFA80728411956761169D96518C4B
E4801F49E97A57EEAAC0FBDCEC1FFE3E179E1F9C4B07C9A9ADC3F860632FDC2B
01235E2F3EF72A59F1FF0441EF2F23E14563985F0A52B32BD3D4DC6FD3667910
6008AA8FAB2F587C4B26252957EAA9071AFD7E40645BD34CBE7F2C345012FCE3
DB7EF70FE4AB62AEE36712F85072C69C8D84107B3BE8A5214D31AE37B75DE2D0
CFB8AA39A32ACA53345A9279C832BD43555041C9F9159AE8DDBDA8B72B33DD37
3248E30F6EDA6B2EC2E8E6B52C90F40A651EB58CD9A51EC815F3B4BD4BECAACB
AC55AE86A97EC6F6BB356476E639F272B80F589980D2293B26FF71482CF10067
5634D4F94DB4D82AC08870B85EC01122D18B276BA8E8B4B8D4460964BDCCE277
4A10345548608A0360F9E92CE5A90DD050DE539213F78438F7C5A6B6186C2372
2DFBEE44919FE6E8FA877A8A828775F72D8796B3461BF5BEDF78334906C1EFF9
F30C21D88DF40F5A972DE89ED911D3F64F58CFB1CB9BB3D33A8CD74C506506ED
E0ADE7510EBC3886D0F75EDEB96045B16131155B0BD330B89A5085D62FF9877B
6EEE93808B3A1731A3132949665568DF45E747C966E52FCA8AAEB267F221C6CF
77260EF06A36554B362BBE9F6864EC7978F14D1AEFB4EA6930498983A7C93144
3862F1AA886B0625EA39A85C03D7D0BD146203B9316153F99C64AC44A525B94D
D367872E8ED121C9F6D17EDD30D917346C201C334E81128DA210F54900CED774
1E535F15C1AE39464539C71F622655D8D3B063CC1D242A501B1BBFA603E6F124
3DA02EDEBCCA49A4BCEDA32E8C1474730FD83A69378FB5974FF7B24720FD01C5
D64FDD900BD8C39AC821B1B553C41877F96633EB1DE8BCBFE2D67F9DA4FF1392
F76983284256E76545589149E1D61A1EF51C33544ED0385218DF0AB5250B8DC6
77057C85B337C9ACF326028B67DA69B10DABAE948FC2E7933316B55FAFAB1D57
800457D49EB04B0C4F45030EEABACE29995D5C68F3E7C7CCA209E3EE4FD459E6
F729E7E3BC021E1140AB19923A496E1D5AE0F672BEC53E2FB0A7BC894B5D381C
F175BF4A02A4E4BC0B86725417CEF963256D20AEC80007ED25003A5A7C0D8E2A
0870049D7AD9E5748DCE850B806B1C7992AD1878F274A2ABC159B62205045BC0
7CB787C65E68672DBD3DDC3E04E2346352ABBC0B9AF153F5875F8F4AF373302D
06D056DD4D243D4B23575DA9A1A1446F1E9821878BB5D9C1206128E3277C19FC
980A807C8A43022B9DC8F2534E57EDEA764DEE6DE41EB59CDF30087D62B042DC
479AAD1947C8187FDDC20019E76A7776F3E22374D750219DE16ACA00CA1DAD55
8C1E773C6254A09349DF9D70DB7987C808BF0C30DC35FF17DCD7B8E9C4685E4D
9172E11415676A900ED0A44CEF60ADA5A18E98E979021AD4F36E015D9023145C
4817CBC33E62ECE9B0EBE6B76E576780C1621225A259A7CD8F1F3E3A25A9CBA3
A0F8E5789F7B233EF668556FCC77757E2DB63D7F52001F9FE6342F5FDEE8F138
9C3B0C915B4735481E2E60F662CBD3B859E8F144AACDA57D2501D7F342FB70DD
8196DE1FE3218835C4F50F6C8774E0E6C83BDE72FF385D523E5A083C3C23C33E
5DE59E8B8118329ADFA510A2F1841B063320504287EC58C2D85930BE230E0770
73A5D02C1058CA7EC8E66A557359E8A9F16B89AA0C3AF728A6E1C161EB20D1D6
F38430E6CFA55A18C0387DA9BA9ACAC69EE7B5544A755053175638ADDE775257
A3A195F358B50362E940030879C263F53833C5768376F415339A2A90E2DED1B2
4FFD726EAAE7DFD30A7D0644DA444266426ED9FA29140DE0A9FCDABD706BBE5A
33C6003F232928E0D27CC8629586EAA470CE3ADE6D0B9202E8376E7953E36945
4F04F9928D160218A9711E2BDAB17C31C4CE7A17C95C439EE695D6ABF22560A5
6BA1D8874F38BA2148B768F0E2D30347BF6D8E4333B9C9CFB1946D4B10F94D80
968032536580C04714BFFE5DD501DA55A002424E7842EE90C939A9173875A6D3
8555035AEC3BE79DA8BD45AF96FB8DE6FA575174D0F6B73A66A4D997BA5C7B78
DEA50B9C7D8AB11816B17AFBFE1DA14660090D574E7E9D13EF09E70A0A1A82ED
C3B251621F71723D8E8FA66C847D03ADBB9E1FE8ACE827EB02838810BE2AAD3C
07E45A7240AF9EFD1C3A9AF10B5A102BA8A11EE7DB35499814AC154AB3F532F1
16A69CE12762E86432CCB7C6882C8D3CBA8646E00976B911A5E528F1FEB29551
BD89557FB4E93ABE920F92498A96B28CADA964221F5BDFDC230FDEB1AEB1AB66
8F3A6F176FCD69192ABE77947068E41075785846ACF378E3BF2E5B73B5FEDA0F
520257508F4ECE7FAA8E0396ECE093F28EA29E949C9637F965219C6624ECAA60
2125D91904894944BF936734B1F575D552A1D270340B2DA6E3FA3B012398F3CE
625582BC712F2F4092522739D920F7E123F4C8F14CC69C8279B1B71728E12C22
588E5E558BB4CDD3A5B56704E1675EC90CFDC88CAB7C3C8011BAA755B29ADB99
2C57D0735F6158AA307582DEEDE2E5476B68B436B94FF62A90114E68ACC86F56
DE0C04E64822F0DEAD7B3B6259B7BE4E636934DDF13028C10F1F16D4416D20AF
9EBE0034536588825828383B05B6120717744B58D2A96BA16CAEBC62BC1421DD
7E62FBDEE63C22CE00D734B00AA9C31D0C429ADA2D26C28668CF19B51E071BE6
F0B820D54433588CADED93BD27AC1D03953F8E722186EEC417AA6A4D23A3CDB3
5E8E468A1B62C8929FFC1FEA0F32DD22DF01E879C476EAF566B2EE653CDA10A8
F0015B108CAB1676C03EB1B58E4D41A95E1BEAEEE90F03C877658B6071E12DA5
6800A1FA35EB6EF89BC5CF74403C5DCEF99FC132BDB4AD30FAD9BC7939833E86
5A50893055DBD622A355352AC2C05DC692FDE5D0669B6B435161B697A7696722
D1D5639F45F891DCD5EF68BF83F866BFF88665D4D362B3A95E9F4C9372189AC1
96CD2A105371822F4AE433DD05B025D05F603410FDA8B9BB8900C9B291F35CC9
0861F3ECFEFC53F1D8A3D35CCD5D7DFBE2A2965098DFEEF73B4081A79D94AE1D
27F6F365B4F6C108FD985199CC1E723F77A273D993297126CF61173C927FB731
987373524C6C9D55EA2F15EB0B9B05A6DE969ED9E668B9B8CD11630983A5DDF5
267C65C42E4A4AA6F21C2007FD650FB2D648987310CB2BE9438B984F89C185C6
B50A9AF48D16743B62FA49FDC3FC07960695A91CE0C560AA562C3671F3EF3CAA
87921928426ED342745BF0159A2BF7C29419927FC4339AEEDF0029F90170C853
A048174364222FF1551B3AF40AF4B7C1255669198B4706A9269CCDC96DC4D8E6
9A431EC595D3BA0E786476FC46C023D47AA35F2C610D17D4A75952D839982C75
7FE3C5EA03DAC57F5954F44E96AA825FAB803A8FAFADE48986A52DD066146F78
A374E87A4FD2D4B9E30A8766169DD6384A8847165B54B22DB4B508E0CA366397
5A389F9DAE4690C97EAA728A4A471A393D9B4DC082B4737FB505701D45A2E801
AB13267DC1CCF398BE747E70849E45802252F3C8DC6E613126DE8E70492596A8
63820A52C4B60D6122E3675A55B566204B13EA5C3296353E91B8D6D27F30EB39
56BA6C85C0AB1AFCF72FAF2C1CF74CA0A88538DB6A5AB18267C1CE4ABC9B4E6D
35FA0D54B1A59ADE06FC635D6C0762AA36483404759D48BA1C74EFE01F62BE81
D608D0949F555636F5EB3D4A64746CE236732A6A884A48C89F988481789DE67A
A1B8D9DBDFE8E3A3D6642590B050E8BBECF9D678D523A6B80CA05BD89FA62120
896081454B487FC6CC81B8E827D14B6D6C1990C24F23610AD4D6377744BCA112
64ADAF5AE1B00B9D0410B7898CD62707039D5696E26AD3732FD95276E2DFDF68
8E8AC0F29C3F1F24930F29AAF7F113B9B586BACD32EF4C969570354E5202922F
78EC8EE071F3BF8490C708B0C3DA8D3EC41E2A8F4C10A0040146FF66130A482A
E595A9060B183995E957ED3F936519511BA2FBD12E5E22FC3869E509A27CF3AE
8881EAC0AC64E72B2A6619C4152C584FF2FE063D281F4B561947BF4E1D1C86D3
6B892C8D1C50D241CBDB764E888C41181BBF2D6F3D04186D01FBD8F6B189892F
D0854FCE1D90947AA2B61BE4051BA79CEE2937762E827C06796D5906C2368C70
0AC13CB6CD183D5D10EF6942D1E6983A520CE086E8646D662D9FBD96527076D5
1884D59C848C07426184EFC6D6EB2291D3BBC10D6E6EA9D29BFD6BE53F4E330D
CEB75D553DD714C2D855EC209F1403C349E09A08CCEFF3C993F645ADD597A557
92019FE72EBC4D66BCF18F0D046CDB04CC87815D5C991B21F39B5085ABF9BBB2
5F45621A415D7AE6B6085930360E85B76F1A8801652E6730EA1D27EDB079FE43
07F80FED0C0EFC3F9EA18DFD36D19AF6A4740EACDEA3ED12B533847F503360B0
77B5D0E72B5CF6DEBE74DBF5590C5165656FEBC33FE179B745811AF3C38BB610
181B5B2E2294BF077F1B9EFD95F5B53B49329EAA56F0EF2CE49384B65C9E239D
E1AEF9AD9CB1E424DCAC0FCEC6ED005594D9184527D1CBC4C14849B373EC493F
87D9B466C7E08A5895591AE56F0EDAC664C67E280123C2EB1D61F704F8CA7EE0
19159F2D8E6A5782295A9710FB33CF9FE3791A788C804A08C5708EC8E345EB98
178081077BBA3F72D5294EF5EA673C675721428F767CB883264A238E91693E7F
80CADDACF61BB2A4D8DED571DF7946EA8F2D286CDA83AD3224064B312F9D60A8
3C933482B763EC2156180167115F3E61DB8998C4543463D51C70EC1B9BDE4481
CD5D1FD3715921F8450A744590143EEA2031E2C0E304313302CB02A1ED56894E
963B5C5134E784AF57726F5FD7C1A4F2DDA8F44B4EEEF3CF0083C0AA4CDAC3C8
5FC598502E902E0D13FC9D2DF9C1906C9058C941E06357AE6E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM2074
%!FontType1-1.0: SFRM2074 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm2074, tcrm2074, larm2074, lbrm2074, lcrm2074, rxrm2074.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM2074 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-170 -318 1322 952}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA27F17EF728D907CD5850828C1C55C5AD4037669
198CEE3AC1734B07F3433998208DD3A27CE29A6720CEE5EF66E55493DBE448ED
4F99940D9162F2E9FFEC633D5497757C2125CE0A30E7CBDC12033414C4EC1A70
B47FAC9EED41587D88B6A027A3E1E8C9B08309E7ECCAD00C560447BEFDB76F5E
7FB24430C5DB1832A3F063230C193C642D3150C44564B544B77B86FAEDB809B4
E2BBEB234B2C495F5532CB1E888FF631030541DA9012A2365330BEF9B4BFF21A
F8D983748419860DE37858A729EABDF1C517F2CE123529BC3A7A39957A3E8585
E40B5E3102A03D8CC9139157B3C8C0A40C8CFECA9DA7BC8323F7A029EFABC472
6D8540FADC75A1E92854DD0D67C0E775AF45F9CBE54E37E5D4736BD3D86067AB
D271667F64FCC73AE886F161E980733A74048ACCB5E35F6C71DFE41E625BA9C8
6BB79D74B02B06A31B67D93D7EBE78B38E3F7399BD0AACC49517D670CABF25AC
FC2610D973E6566CDF5170D42C834B26AB883D301F001C5FBF2026865D2A4F8E
2631831EE06E782623FCC0EF350D463C3CC4F17115E5078CEE62260330FF9ED7
076F3CDE0FE4DD8490F95DEE035D5332EDA53218CDB17AA0809463E556B6D824
D1651A993262616D4220761FA13A93409D79F84AD9CC63442261D4E39F08AFC2
A004F2CC9B8E6D3744EB642EBDCF1E0310118912A0BDA615D8AA6406ED2DDEDE
3072C7E43E80610F9FD73764240EC57F5FFCFC05F53B4C4069749766A4A3165A
06A51197F0363061CA3938E6FCAC99188D8EAC513F00DBE0299E0CA30648778B
2E2DCCC007660D60FE40DA24AD8B1C890B582C702A53FF0FEC7F2F66F99FE903
C160F9508ABF3FBF5769918BA18B0799054BAFB9A41F708E9E60F5222BFFB935
23D9F14DD01459FD1BEE59BDDBA38FB775EA73A89A446696282ED7780D167813
7BAED6B0EFCD800BDEB77768F3349D2B3D6E3AA6A3DD52017F412E6D07B7877B
352D5C29DDEFAFC5893F59C340E2EF78EB9C2D99B6C2BE6916DC44E4C467BBE3
05FB1B11FF8CD5959B0375E34D3FBDC43AA615569CDD4CDD36BD08DB493723C2
EC0E0BC71B1D648F013F0A06284218CFAF1B03149E5CB51922A4E687D8340171
E06B8DD8DF8F206F730F24E1D56627354C1D5E7D7881588D9FC1E2C25A228E6A
C46A6B3062E00204AF7959BF2D966705D80FBF09F9641A70AC1C6414CCEEC78F
2EB8D6178375EEB1DF59CDAC54CAD5EFF289A9B13CBAA9ED10CA008619187874
775B6F2A95D5653645F56AA97EBC23452DF54E541B76401EF65079DD13F42BE0
07D82B24FEA19ABCD1A44D0B881A7F8CE68790E460D1E0999B1F85974F00EEA1
7CF4A93A7594985474592C41A319AD02698EC031CD266788E2DEC93FDCF70BC0
C43B5D49E892998AE060FB641C7CA7BE430CF34B9F5ACA5EE3BCD51584855FEE
93D8A533D88EC5EEE1780A78C587F31B62E3BE199B2DABA1B65484A8BF808F6C
9677B9FCC33780D24D38B47DD1A3A02E734151BDAA7A9A187596A570C834BA1F
C040AF055382DB6271A358CD2B0A603D6AD584EFC5B3B32AB853B08422AA52EB
3D0DDBD757D7416E4B4AD34A4A945166FB6E723EE1B2237006A74CE9A205C985
387B05096ACE0216DBD12B0822E313180FCF1524227C6E42371E898D8D6FE65C
93925D9FC5EF0496A9358BDE5A2EF242DF0F81E34BDAFA6110993BDA1DFB2F24
F7BC44E5B8F1AD68AB7DC106CE0E631D16D7B35FA442EF50730A103B89A15259
6DD03EC3D1ACFA54ECFF92C579806085F994AE36DF71018123551C2754F02807
6CF4C4A0159F8F4960AFB153CC2CFBD73BC06D82549395CED7A72EDD3BC0CEC5
B24B93A725AA62AFC7B41F77E0F15FD8FA44B8F39A9807460B62F4744C5843B6
9E00A74DB06B11A43CFD64DFFDF223A07FFBB714666732C21AC9283B65C14836
1530BFB558B14987313FA25A5E44B5B6105D8765FF9F7618150D4801A7C80B30
70A8741C9B0ADAB5213B4F0F359C59A019B99960DAD6E8FF30B192EC0552A31A
46FD5F28005BDA7CD493582A43AAC254CEBCF49C2FF5ECC66C5FD2C667ABD792
2E56CD832E91998BC4B57B323ABE4EA4BD6E305E85B1A188A0D352CA017191B3
63F99E45CE1E6FFF8B5A1ED99E4D0F88651114E7FBE48A083C201002DC9CF7E5
E5521E246B5550F4F7A1482EE312B5F73CDC433694942ADA8A22C5505B8BE855
ABFA3AD225EB02A2CBA9A3C7DC0C8492E7A448BE9200A08AEEBB11546ECCA776
83212C8AA7C1AE87AD2494AFCC62C3D0E698D82405D42D0090715A76DBF57784
BCD075E5457B23B0B779A2C9DBD4A906A01B06F17434E7C2FA0DD7D0445C0CA5
03DCE481FB78B960298D1627E5DD2BE89CA0037205C72FDA7553F4D1117C45BC
F8734654AA0949F71BF683A2C5C30320B1B6AF51F2EC05A791232B5141DBC4B3
50822CAF147344DC7F5D3526AEB9951C726032A76E9AC50B5D8EF292B31A171E
129FD3DE106AA1AE1080442A2AB2C858B9FFC4778D73976F6C3CB4AD1351E0AB
C6418B8B05C323373439B59A6634289DAD8D7AF74BC65CA405E5DFBDC0F22D5D
CAB19AFC8B7CD800D7970F64225CEF0A74E770397EC63C0150E2FA92D2804108
E9FBEA78FAE206B1444D605A33C1EF29D69BD301B5B9C890F9D6568BC43C2828
36EE37A4453537E2DEC9BDDF72E5684B7899AB67F9346B2E8D10F423C761F4B5
C25B1670ECE8E06340C482F53260BF63AE7848EFE1FE77B679EFB4D934BCE500
F78A2FEC6E092E2BCDA0DC9722927DA6D3B92D380E1E800ED4EF7FC5D7EC59DA
3B35143D995E046C9457D9AB7D81B729ACE0D91465975363F9DE2BEC39E49ECC
E5CCF73D66E3C83CD03865CD49DD86CCB04FCC6F3861F1FAFB109260E0FE5C1E
489A871D0A39ABEDE3172FA0A2127751E76C14E7C6BF4438FD851F400B499E55
A8D7895E6D6675951C06D9D06F3DD650A680B57AB1597065A98F2C88977249C8
01BF4124D5F9BB1FA1B13C567FB7EF2CEBD4695BD0ED514DCEC1C0B3C7D589B1
C2FF59D8F91531FCE23245071CF2D0CABCCB68924CB7E84EEE93E95B049B3933
13814A255EE65DD2585CB5BA09DBECFE5A994968E998761C6C9A1442486D41A0
CA896924DC14A2B6CAA8AA5CFF5A751E3F95B9158CEEFC8268ABF028FDD8ECF8
0C851E4D571D2897300F80626BE37279FE73A703DB7B15D822FFBC70785584A9
0091AC7B5638873B807F4B66672FA0912C0763E52E57AF48D677528F0726EF13
FB88A0AD16BBC6FC1C6C18BECAB4A4CFA5EEDE0FB0FBBF7D2C5DE7830F5C84EE
7265C2594D51AD9144F3A40001AFD1DAA9F471A0E0CA7D0B08F6DD1C223BFE03
7679E1AAB7228A32C872E222247560DC38FDDE61F9698342F72A0232D1BAFAE1
E1736DDFC73ABE08A2533DDCFAF43193198A5E22564CE6F97449F8EC14DE67DC
D136489D9D320F6DC3AB63C739E4F675D2E980B2FBADD4A13BB564018575CD56
BE0A9301504FF8176C4B7BEDC38A9CB92C962368CA42261AC39A38778C937980
087C603273F65A6B26026854C07D282BEA32F31C59449DEE9875A6D6F55DF2EE
5C29D55D9FA52AA9E902E4A602987610F7CA0A8F1E998F6CC3DB037F24BEC0CF
7097D19716BD25943250911A1FC153949301713E7E7DE13DDCDF43EC635AE0A3
C17C821AFFD4047BC3147B91A14CB9B98A404BE2B515F1F3750B8A5DA5D12444
14F16EC2885C063A9861C89A26DCF82D92892F8130A9819A5D4AE61083666188
0243156AC4B03DA5A7EB2CFAC9DF6D09229F525241381F8DFF1913DB07C21862
FAFF3F4296DFF77444F752EA9759D337A847B196AB2AB3048E6CB84D58140C2C
DB1F4754589B50B0A236F5CA2BD13A3B9C6AE281C5695693D9E27470F889C56E
41279AC499C92E4AF35442B0E0652B44E449388FB0381BDB2C6C44BB9E355537
DEA1DB2820B53CD15D6A7CE8BE5F379D4F36BB1C76735F38EC83E388D5464E81
3269C56915536946E751EABD590642E6A0B74EB6143DB7A1CA18D77998214B11
11C7164E46ABA3D3737DEA21C2D317D17A9F1EA7D6553494EDAC81DA60586397
75B8E3EBDA38CBB136548C4B06945B8626B6830867AA0A9B02B10BCD4A293C7F
638E3FE0F57EFE45F4BCB0B429D4ABD96171718A5ED56557E4A6C4D68E47B39D
5A0C89D6E7D8DDD6F17BCCD3407F0506862D3A5702776B4EFD3BBCB53D9163DE
8491755EA4F7162D0305F93B5470843F85B06B64491A97D932FB94D9C5E8A65F
BE05FB111D80C483A5444C0C0E04E917384FD78ADFB59784AB7D637241BD2C22
5EAF9E7326282BDF4E127C55862C5C7B089968DD4A6A3614AC0771657F8B47F1
41E32C494C6AAA8ECBCD63C4A8A6E52A5AA8471D287F1C04B1D1309B73D6051C
1F12A6F5ABCB55D2BF54554B6F1FC77CC6EECA794099F102CDFFE6F5A2565163
FA4381471E7EB4BC88FA818D3E617630E6572880520562680130D78B5E4A61F9
7988E5FA97105607AB6EA76235A8DBB25DAEFB06846162A2A86378485C37D65F
FBA2578E432EFDD81D819FAA8BA46CB9954E593E15CA50E062CB329E8B023894
BA9BC19929F34995728F4B225616FC555EBAAE330045767D5FFCD4D8A702BF5F
DE5FA5566A31B06D51B447E7F215BF69090B768F175593DBBA2B34349870A5E6
96419DD3E735182DAA7E5F6CD18BE115536F59F383B83A0364D5A0B9CD8807EE
808BF33DBF1B738D966F7897F5314981BF3EB429768912CE3D6911F3288CEC83
CC64406DE5D90A0D14F800C621509B9F1AEC8F6AC22DD822E1A281F0D541AAF4
C5B549435AABF3E7053A607ED7270BF56182CB9450FEFBBFEF27CB01CE211C4B
7D15FF49B028CCAA91FEA4EC29F1DC2BB6A5F2456430F6FB142380C6AB2B397E
D444F76FDFCA784B6F8C9E0B72B12D3DE97CA9643D7EEE4365D5C807298D66C8
969F7390C3BA0B0B1D2CB3B1E317DD205219DF1F04FF1F7D94F130E5394BBBFE
694377BCEAD013AA353EFCE9942F03F06D94A25F5305E5D9D60D9561B288AA0F
F61ED49658850B364C0B6A43D2978B96EA13CEBF5C8D781A7C4A23B476955454
6B1D3C5FCED13D4BDB155E282F16C0D10B3D25692D2955C5C0962425B7B796B1
5035F3CDE94D93A3BD3AD2E2A68EF8D1C1218D4CAD6021093CD3A6E9C3DC9A3F
34376273321DC5FF5850D80DAD9B54FE5D214FCA3A0EA4A03A7CA7BA7BF11606
A8A4E33E10F6F851C5E21A41529CE983FDC436929075DF11778D9DE216FF1F59
2C3F727B5D756E04CC485B2C679D0E3C62E30B3F0EC2683ECDF423D6EDAB2D94
E437DA62F7E7BB4805034C8869677779F595DDF2F7A380C52070C05FA7599948
EEC18AD40E4A31CE9FD88EACAA5B048E4BDD272291681AFB56C08D0058ECC4E2
43C94BCF8490828A95123B87DAC7272B77E36AFD5CEBC6A9A99442BAE784AB84
45DC7B15A2DA2E427CAC70826D4F596978138ED9B77B87E377490CB2ECF9F16E
3C80DC2BD05714F749CB78B73AF61111C7D202AABA714836215C6213269C87F7
00D7A0EC53913CED87714584E49D3D5CA81BDA0AF460C5467E368629BA0EDEFF
E32C141353E9B1AF632876249941C1B1A2E9F0C252818F856FFD8670C9072220
360EEB4FD6D51A4B3291F21C9585EBF012919B59848BF5BFDA43B3996B7DE23A
C8F7234B6C380BFF89B5F824FBB97CF7F1886E5249B2C8F50E6B8D236BD379D6
7266BF07B849BC9953F0291B0F002A09D7596ACD05F0492374ECC30BD782DBA0
EB2FAF6A8C15724B4029F92E166269AB6A4A6B1DDBFF5D7F868BB458B8734B63
3C98207801E35FF643E7BFE8302FF2BD47F2484695B53AB4B5171BE481A96E16
FDDB3374776114F42E4C713D963466FE67F4977F3147CD0D080814407B86993F
273B04A19E77E1BEE3CE377C2C5263F85D216DF3697FF038C486A17C9DB6991F
69B23DCE13ABD5A533B6A01016AA9C2C134045C1F2905FE1E072741735DC55BF
C76826BE1AC3AAE071B00D456BC29FDC3D07EB1A5628B5E80FBDF211BF1634E3
06C9577DD41F1BCB58B87ECB444A88E18F47386DA5CB8F74B0F8CC6425C341B2
75FB1591E435AD79E4FE085053AC0B41D9427F9E2EA800B90875440D18A5F187
CFEADADA16A397424948CDDA4D789E367BACB51ED1539D077B08384853B4B7F6
85727219B9E616AF236DEBA03FA8BEA26BEBECE7091D31120724D07CC224DFEF
5DFA13F902D6A8F1697B4F4B5763E628A466731CE5C5FEEA9D9BF92A475EA074
50F9C7257D002B8F6354ED03FCC0328200ACC65EE792DB6378F80FB3B1BBA0FB
4E5A756E1995D3B80AC6A761AEFC508C3342715E1E52C7D8333324CB17814FC8
6ED4C3ED0E24B9304C217EBA5F5A0F74C012DBE8B604E9DE6CF33A68AAE4CD22
654772084A062917CF1B3F60E539A79CF0C5819A9A8CDCF4CD8882D55E04F734
9C73D488960C66055E2C7E90D9FCF1B035511344BCF62E63ED7F2E8DCB74439F
7BEF9D4B5AD6241D50BF2E8505934C92D1570C3A264DE126FB6449DFB3A6A4F4
64186FBD7EDA45FE0335B6EF780BD59AF9052D63E8CA67A3EE8941349C5E7DAB
444162C3C25CADA4142870FF39410E18561EB03F212665535B6399552A92B7D9
2D3BE4E77F773FC2D90A8746784F5AF4837021895B02E78AA0B6CC908186CD3E
C427864CD1D0B2F2E38922F749F972377DFE7D88F87E5E1AEC49E164A67B93CB
69ECC1C3F5056BDA9508A3EE9A9373EF934E4C61DED60F0FB055781DBE3B70E6
EB5C316F658DDA516D47B4CCEA6A18E8C57D7005CC92B836A8F7E7C2AEB4CC3F
F51DC302D4A39CD8E1B14126205558304C2950E90E84C0A3967D8DDA377A0140
8630A197E3928C065A6FE954E0D7B3A5BFA988C7DB98B78D74C2B0E7DF81E696
201F0A54E59A4347F5DE7D508B5D2E4B9C5254C8AB3AA18648F59055C0255C80
F2EA4D4FB059F41628221032EF9665AADA2FE23818792467BA5EBAEA363B1161
74B746953DDB0A9B7A7A70AD50986F403EF0142254981919A80AB91B1827579C
220BFD6F9FF2E1D5AD0771D60753C5CCFC7EB064FA0A0A00DED8234E1BC69AD3
0D3A037DB040BCE0B83135B53A18412A376398A46621EE521BAE330E2B86F635
4EED1D3422E9C6092E964B55E31F47CC671E0CEEFDD2C398A27804EF95CEC855
1088F3EAF472E6EDD840B30D103E3144B1FAD607873BDBB88D68D27203BC1D79
F5D3AAC7BC4C4095C0B0A118F409EF915F4736333A8D509CFD7519C05FD3961F
A0AC32DE20EAEC387193E4B4866CCD65AA35AF1409D054E553DBAAA0F90F572D
460668FD5E7CFC60AB747342D7714172F78E8C2F5C610FB2D6483D01F9E29D6F
1DE7DB6D70AF0ED9DF8903E38F103A3673AF8F56AA92C19623C0FA613B236459
B55B0365B6C22C6DB47832022631F4B19235CF735AF3EFED4680285D41E7CCBF
CC7E82E9C5CE660E05AB475302F6D555E6B5FE1945FBDC9BC2B11F60D3260FAB
FE7593E11940EFF64CDD6FA27893114CE3A474124A5B324CD5B775FD1D04A436
EA550775D30B3C92679831A9D0A794780F058017C29881B54E0DBE125D6D51C0
F50799E226E88FBAD27A85825E80186493CAA0667D6EA67095F7E64231EECB24
0CC1CDDBEFB58C017E21EEF186188C1162F3249E687BD56C933380E1281C37BF
4208DB4BDBCB3211C35B0674D00F0E54CA7444BA87AB6270FFC419FE1B820E7D
29CCBC311451C92BCE380A42797CCC2FAE2B169B9C9A8E3053484E7E252307C4
24DDBBFE583920514DACBE8BCAEBAD20570B3C52B34404BF8A03397DB6A8DF13
117655035BA160C17C5F6DF2AAE16F577F0062FE9DBB4F24B0E36B8A7C3E7574
D949072C7029C08B2674C876DEB7907CFA8F08D9034D0823F001EC19AB83A600
977D8D216F972080D9DD4F224CEDB716962E44EFB348C5A0E024A9C53BF9A17D
D0248CE95F03BD83B701F2F470A4E895CB4F64FBA2B1FA9A1FA64E517F69B9BC
1ED0D1787939E81B1CD168D60FD3586BE0A9E381B10D1A048E7EA4DE356AEE02
D6DFED33CBE6B81FA722A7032E5F26D2DE6C2185F4A95922F60861D99911E334
47D85724F5D3ADC5EE3D294E91B637868345ACD1D75149D114A9DCD972E677EC
B3172F55EAA030D0B1DFAB45FD4EA900194FF7CDEBAE9B9D3D1FFA9F1752D766
27603543947DAB0208DD6F87910BD9440EEE7D67DC835DB39CEE3501304599CF
59EF67FAAFB12FEAE2D7C48777394B687C781BC3A90F49453B9BC3B9473D54D8
A3D0C9FB55FFE818E62D96F2EE3B5072E86AF49C5041CF69F1BAA6CEA05E5585
CEEF4463EC7CD2CACB01FE55175A3602F45084E3802E063CF5DE53F83F629587
9B191B2F9F239D53E6DE2135CD1C89F2B6FB727C5CDF680FDC4F279E2442CCEB
8403860D795EA56FC4C0F3024E4BFAB0758A0C527C3E02689A186C9F3CC6B826
49FD0C5EBA76C0FA195AE6C3987AD991623645C9909467A992F2ECDBD150F926
A72A8A74DF46E176D631EA91B56881402F07562905FC6E939440807A9AC2FA24
EE9944678A9B463ED788D475D51E04C0350A6FCD1A9EDCD174992350415AA2AF
DCD8F04364633EDC41FBCB1971AA49CBB1D32FEA0179E57EEE7815E0212719FF
CB3B29A76152A553E90C85A7684D760AEC9D937F510757C374B0F3967E293931
4769109C49542D5A1A3CE5CF1EC250A05FFB6B177D37103CF3F5D386645653C0
F13C150EF82E3FE619FB7EE65395F82CB398EB53706C8EE07835D4A69FE06471
A066217C9C4DD6FDCC15D7D6D786059271064AAF9D81DF82909FE635AABB7D3A
3EDBE1B23CC9C06E133407613AF58800443F32CEB1DB7BBF124DCD505020A6A8
6E554A2C8183C45CDA7BF3D23E4F9C070F3684CC2E3DDDD4433F228FEFF0FA22
F2D6A48279097792F844E197522E88C941526C7811B7A8396E8C1D1BF67F1262
2FB2A85FB38FB2C151384F2E97C6ACEDC3CDFA8675CC72516F8AF275103E9F48
80E89C2F604D2967CB7BFE03E00219C674DE9C5F596DACE11622D5BC75DC03CC
D2550A18839A1D143BA01D7D08E9A9F225D3B0CA628010FA55F83392CE86D3C7
AE9A6686C25DEC372375AD6D546AA11CFAF6A1324476F6552F22BCE8B8A67D38
4D902F113513F5154B2AF9D4759E5B655AE38D720B6FECB3E471F7A6340C8365
AF4F7A48976C7180525DD889C4BB064779C78D04B484E206CE9AE2276903D872
87C87208046069BABBF01ECE942567F8B7E599354D14A801315AEE157B1D1388
7E2BDC5A51A03991FC41680B65512359C85D0FEB7FD43B1953F8A723BF8D4BFA
C3E2F33DD42F91232A972CB31693B3E6F480459AEA993B1A890F6F8D66925062
6AF858F9A1959288FFB446F667E05D7DBF00534F6F3B9C6D4683C78A8B67132B
A3AAFC641B980A2FEC7C78C7921B1CBCE2EA64C3B05B1B3AC68A0B8A898D8A59
ECE0750C22DF52A02585BBD1019D2C7EA9CAADDD8CE0AA7ACB4B101230BA9A8B
BA3644AD45C939308C5510808480E6965488EF46898DE50AFA5717C2CBC99AC0
981550D5DB9A0A1E27240F3994E0396A0BE57957DCC973E9361460D672AB5387
1FBA3B8EA2B2C5E790EB3F7D565A27CBA95D01009CE04D6F1EAC284AFD4B4930
44E28E2991EB62CF7C1CDDA077DC936BE934C223F5AA93DBA91A9ABEDFB5E9C5
012633CC89B941F2B679059DCCED73E95A1A1F8DF9E1C1AC8BEE35E306BA1163
4B947AAF21CBD08A2C5AC535ED02AAB2BDD7C204C033E27BAACB455D9FE444E1
48ADE719F41785B7918E747710AC0828D5228C229565AC57D38A894B7A129BCE
86AAD8C09488F146266867598286C268CB8231EF68C27010067A52E1E24B62E6
4382AF206B779FE8724B5C2B2BF986EAA433B243B0496AF659E7F7731A353F93
AA22C39B1F984FAF2F894A1A6578FA0C8EFA542913BDBC1A3E21DE66D0B05A9F
13D860D43A976371ED103CC1FF63B0105CACD5AA787C2F55DD94C356CD14A8E9
A887E9C00A3EA9BE301F7D3CF8385E796A7C9CC1F6DA103A22836D454D9B36B6
D210E2B4D770A63C179E1F9C4B07C9A9ADC3F860632FDDD92B31E04FCBB58A99
3DAB700E9FA4FE36A06C924A4062D79CEAEB076BF271B4E43FB16743BC07BB91
00B1992D407177ABD602725B196B54691321B2165E7253A9C41F5289747B31CA
9C0FE906B8C1024D6F0F00ED51196F28847A0F75683A559384F7D9EE80F92FB5
2DDCF0ADADC0492E94840A2977DCFE7E0874F11E6E78EB0CF235DD2DC448E177
FA3E6B9A88C7746A3EE43DB0D731057B66D0AE611C8C37C8898C8615CD75A524
281F130571B85C41E6A7A9BB7E8B5AD928F13375201DBF5848EAD023DCCB9EA4
74CD32BF8E2CE817B1DD2B7CC9C8DF9A51A71C46A92E91C796E4038B9DAB42E3
2C9BC59415CE4860CA539ABA4B651FDC7752052A37B4F874335CD31E78608FC8
9554FE3839140BEBD82EEE74800B2F2774ED6DB52920B3C62A88CA6B5D4A3FB6
442EAF79DA4F38D9112AC85597C1C01730B7F13FD79155F70528B586E6B92A15
69DD064CD9D8DC8440B839EDB579E5E738F2812B84CF4CA190FE3DB8CEA78AD8
2FAAB21D5F6F262644814C77526AF5E20C88575A7D49F5D918920B74E535680D
BC737866A781B705852AFDA4C91A34DC6076655FC51DBBE9C36701AA700BBAC6
BDE576578437E6A8A75246882A971AD14817045CD9A41A45326FCCA412806F77
B603FF9C384A0899734E06AC009D3DD5924508A494EFD41D37CBCB315ED94586
92B3404F5D41CFACE00F4A5D5D257AE383137B750EDF4CA281F0224DCA8B92F5
37E1031709625BB015B93B1630AEC9D60DCC6C2B69D1C14174E5E14F734186D3
B47BC95C44EE6820F4497362B116AE0CD49F4CB654283A2C9ED3C818B50B434A
D75BB38B1015DF3A0AD2989BF9605235C96A1D4143DC71A924866242CACB8CE2
B51D61251DE0846083C44FDE1DAD24EEE06250518D240B2C6D0D2C33A5387100
C4FFB54D619775ACD1F2092C74668F357931080798BD93DEE84EB0DC6BE5310C
9F6845388810B65284652E6B4F3F2C41041831EAE43066B9D694D6906F9BADC4
8DB948F97CB81E1231209B9A8C01CAFA449A5F930F4EB495B1177C83F3933EED
06CC91A996C77CC8211C9E23F99C08DC967305D52FB91DDE8A996030C80D0C84
FC2C62377F2CCA631F7C9E76D2A22DCB5ACA4A96B9773F1DFD7D588CBF2C6041
E598F7C02630CE1C9C9EA0467182440A2B284F60E198B67FC0F3C19D71FEA536
F19F780606913B52ABDAE8F3D7B0F79CBDB66EBFFC67C6C9974DFB1D134DBD73
E24958394F14186A45A57263388A6361C1838D8411991FF26B65B61F231C8BC9
92638F7BF65C36153F37FCC460A25EE5839D2F8E050B8DF80687F6CED9570A6C
0BD870731991D97151CD6ADBE175035D414C3D4AAF864909E44A50E23621A998
B15104337C36106589A5D12C9250F5FB4D3843E73C4C86291399BDDE8568E903
D0A2382BCD74FBD3520977A95D08DD6CDB23B43C3950735ADB4EFA98AF2E21BC
06032C05E5FFE5D32A4497B46D2BF6D3AE6B2A60E4AFE15981F5EBF15C8AC18F
F7B878B8962D27A84F4DCA4A51FC755D3E6596475EA6CC22CD579D1D76246AA9
DA4297F14962EBA60FB1001F91E858AC8BEA61D130D0812B0ABDA02666B2EDE6
82473755D911D6DCCBF036490961E4E637584F5A67B68AAB6AF0936EC64BE166
0F323614C47D2DA45A907CB472ED6B0D9B64DD148289B8B7BB25CBBC69A71177
39D6DBC729F7ECF79B1A55D3C40AE0A8A80EB437DB841A13D134E1688DF4C94B
AF27214DE7BFED404AA35EA34BCB4C70061133F5BE19B8AA8404A9BAFA143582
A66A408B76CA0CFE83CF83830C46065FBCCCCB1D221F0967E5705574D9E5CC04
EC12E11D62DE49B1E5D3B201B34F87ABAB6DF7AD7B2537C9D2C41C05CD7FEBCE
5C8FCB39859F30D69D641EAA9EBE3DA8C65A4D09681F11BBDD51BA5939574957
B91B5E639DC348629BAE710D71A65BAEBE74BA5C8DC267D96CDCC45266E2869E
8FD869E0E6D02E8807BA45FFE2D62F51B4C55A8570A4B6793AB7B3112F2FB8EF
1BAA312711ADFBC222E2A496A46D4C9DB358E2A5BB9E14C8F6B2921C253670A9
3B50CB5069FBF1CDD1778621F0837640EAAFE4DF039D4C402B94E5196BBFE0BB
6E86B02A43DAA0381C56F3F959C902620A9C6DC955E53C69E46ADEAA54E82354
FE5CC67F272EAB32BC0BC21F2F495B4D5900FCEFC6E40C023D76D9B4A2DEEC3C
4D1F4441F71B236CE268938CD4653C431C55DF7FB85DB57D7FD3CA379D5432DA
C99042ABB1C35F364644A4B2015C7742A28C1A5A445446E289ECB05DA47589BE
F49B0B74B736B8AD1B464A0A7D1D8B835AE1FB458F340FB480A05A849C1CA14D
45085391D72AB8EF16F706544F8FA81A4F932F5E3BCC1021A55A8D9F1AF0967F
BF0CE10197034F037C0DCDF66430EC27FB72C58F481352993833AB11DE02D224
DD657FCDF26B4E334F9D91F1633FA93D20815A22708138A87C99CCC3C9B1F943
D8A6AE9F320829772D241FFB16F5B520A77B5397B2B6D7AC32DBAFDB8833BC78
DF852C82E3A189AE1AD0BF519E9EB84C5F4927A0D012ECE4FEADAE052C5C2171
F4B801C50828F458A0CCA89839961FBDD261A1D7B45CECD457C3A7761DA8BC5A
DF07BFF3E95E343F599DEB87240D75756F0D254F495DB2C9BC3C150B71896677
B77DF93B0F918459823E021E4B36252F176F4C83AB2C31C0FD4468C17594B2CF
9BDDE6AB114286A748A14CBCE7A61DFAA11615B5E05A9D509ED2EC5D7B3192A7
149FB6345F99C16E496C111877DCB92D1B373AD2BD8A88535D63E6A20D2E8AE1
28E624F6BB6AB3FD75435E10DB3C5C2DDC413A57E0B2BC63E20F814A6C35CE2F
9699633BEBF9CEEF402E0CC7CB90BD1C8DDC26A882EFE88D915BDB7161C5435B
E073F975C5F47C46E2B9DE20146CD38AB70CD44BBDF0E5C745C94BBA41118AAC
A152231420CBDD52036A4866957B84DBAB026F9F4261A6643640BEF74AB1731B
45475AD4C7A33AE7BD471600E49333A932D2F3DAFFECCE93AFD8F6BE0BD16209
2DFBEFA0BED59493499A9ED2177789CDE8E8874F1BA50CEDC2C058E6878A17CA
2610E64BCC9608944D43043124DF342CA09EB715CACA352AC45E903C011ECA19
0B5FE723627949A1EC0187B626EE77DE036066C408E3F8C7C63BD931A2EA1193
ACD92A9C26B4DAEBCE9ACB424D52EAB99E6EF588C3712BD375682B735437C5CC
EA70A9595BEA46E534FB6390EDF3D15B276713530DB1577BC41FBCADD6184ED5
B0CFB963C34FDF49824CB84218B7ECEFA9733493947ECF2DA2935BA4F33F951B
1F2C0C0940F8CAC4BBC4C0169B6F0480C63AC5CE2C33786010FE9CFBCB8D48C8
D5C131A1B22B0A7972DA18870EE84FEC9088E6B0CB624E7A4EDF65C785F8B87A
3D86E25D0636EE6801ED9EB9194C90A435EE8B13F7E142FF535FC02AE6F0FA67
4233CC030BC4344EA38B1A57183B03E99FAFAE0E5BE43D770F3821B908EC65FA
B8B61930234812F4574C0851C6BDA84557DBA826E869FC0993705F83C8697E14
08F2BE6AF4D46840010379E5016032E52C74DC9D09D1158693BDEDB9382B4994
0757D0FF70402C17C9F9ACAABEC35750A0F0E753A3C7BE3A65574542A0DFB149
00A40402B1097025592DF7663528BCFC54B9F74464DDBF73FC0CAAFA42FA4145
8979608E22FA6F477A2A31A4FC9A7438C4A0C2271522AE6EB5E5DBAD50427D8F
53EA8C58F8F8DD88DD2086E8F576C1CE3429FE40805D51754809439BEFBFF22C
D59DA1AE626AFB72B4048C78BE0B3BD090E8EAC83A2E61EE9D6A7CED0E390745
26B7AC6EFDEB6CAD7004E6BF3FBB5EC190CED45E9CBDA1E06E12D0A12C05CD64
0D347BE6250A6F9E7EE46FE3296FD20DEFC4C3133284DF4BA5D2EC5ED1E2E1C0
DFD4FD12991929F36019B7667C1C1545EB32C591AB8B742450E34F56DD661583
CDF934D6238BB819E92E82FE00A11CDF234146D0CBC87947BF5B33C8F00D151B
B497B40A7F985784E49C144B966205379B393F5A328E0DA6571A47214C041319
104A35DA950B72B6700D9DDAAE66842054BF177605F683C56855BEC09D2396AC
5BDED51296859B9C9456C0887A6D773763F8845A67704D1936A99F624135C631
5818602EAE681ADB14E993AFFD532D65FBBEA5945D046EB28378F96AC0EB8996
4476458A65432A22F1461A099857A9F6E49C6FDF35C88C4E878AD493D9F8883C
CF731A3D8AF7EAD5AAB597FADAE190DE63D42E5C64FCC4E2862031D3D021DC6C
37A6C917F5C9862FA7F12C2468B9E659B4C90C9FDEC35F65B0BDE683C5552A92
83AD084C06C2F9ADC43BF45B77E053C30D426F4EACC68DB059E650C293102B98
0CCF13BA6BFD8621B2A748063000132D787A38864AF68608FBC91C5CDAFED9DF
693250982728DE63BFDB7D880AD9F6BA72D2176DAC8220BC540C24678DF879CF
909FD4690E1A8916195BEF1E7CC4E126AAF54D3824CD8028C1C29FE6A09CDD54
05385ED8DA6B7D2C87C9C0ACF7C1D10216B82BC82965FC2266C83A800573C198
37D499E2998B218BF22A45FBB81323932C328E66AF50B3BC7F75C2C7157C9643
1EABBE09ABF565B85EB1E5E0C163F1A2252C8C9C40FFF906C6C08F2E2626A822
4D686B1D17D8371E6F9B28552B32B1754A29FBE5D82E01CD024DB1AAAF369942
50FB4FA48946973C0F4E86BE18F76F54C8E460C9716F94571426852E5742D546
C9B89D5B01AB37A9730C059571B55DF2EAE55EFA94DB288836B997B56D6DBAD0
CDC8A615E0EC005F8AC1719349F360AE31934D369057E598EC97F5B74DBB1757
4C4909F2362950EAF96A1F356FF62DA2979CDE9F3F66F0AE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFBX2488
%!FontType1-1.0: SFBX2488 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx2488, tcbx2488, labx2488, lbbx2488, lcbx2488, rxbx2488.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX2488 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-205 -316 1564 922}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA30E93C19889DE21E60D1FDB2BFE19ABFEF06059
8A659CCB607015182EC681AF73ADDE4533A86C8A88DDFD99E33AB4637931057E
AC7D9DF42B614C752A4175AB95C7E0AB2A036E2E0B49EA8205ECFC2290E6E927
E0CDC62A1742FC8E59EA1532BF2721235ECE5FBE40A9DE5411F785DD21009E4F
1E0974563ADC9CF62D37819E39ED65120FB9C870C1823C3F96198B4A88435968
73AD99EF27B2E0BD2FEAC130296DEC42786C23651F4199AF1251DF159B7DCBE2
4E2A7B6A7765F10DB0707FC84D49B021D432A4B6DDF145E8C9604BCD081997D8
5FE2A113308C11753DDB0301F572C3790B7FDBE0DA142487D27CBBB1228B7FF4
5990EFE9A1AD38B9FCBAACC2C3FE78B05D3C597476DD1BD6BE76B78BD875A91D
E61C79D2049588978FFEE57606CE37B4CC639447FBDA179E5D657AE76C1350A9
3E4EFC7D003366F550F2399536AD7722B1C17AC3C973B097153F3F1FF6DF7CF9
8AF85C0631FEBB48E1C783A623F53F382BD88C41ED9A1F44FA77F70816BD99FD
28A71AF42CFB86401E2D85B555E493A4D4923D3E6DBA45893785426343E1E646
925DCCD302343D6ADEE9FDB3D9C91835C7F94F8904D69AA567B8E7538C486958
DE83E2EA48EB8BE7F57664E0011ABC707B5A54E833D8DB9266AD753ACF844536
CF63146D84D930F5D8F7A409CF367D69590ABA77601F2E8C22C6A79A2DB1FEB2
8568C5637E1E91BDF2EF0FEA3FE2F37A709564274E37B455E86D8B0C4597CB41
884C0AF02F597C8D4B0C88F326DBE0EECCFE9F09F993CB7462632EB6A8AEC59A
3F41E294D7347DA871E2B5399574ED5F87C668A7D5F20D67339765E539AFBE1D
488E5BEABB9327D8B0187CC87BF8DB9AE77AA6458C2FB8A3CA9CF5CE758C036C
5ED6740D79C03800693DF0FD0C4873C7773771BDD7D8134E7A8F2A67A66FC827
06705826819B52AAAD0B3D9586319FECF8BC689973815A3AA97B5692E964AAFE
F97D79AC910C6EC8950E99433037931943FED17A1E3AB5F5AB0FF96297D52AA1
5DB4381C7EB591FC6D332619A2CAC913B1337BE62034552666D6A7FD4F91EB43
E2AA79E0E516A9016738E38F34C9BF4A27C680A3E8112B67C5D283A316228629
C941EDACC38EFAE4126DC52CC757EEC498FB0DE0D1A395E7BA2F0925C667F3DE
B249E79E79C5755890D5A3D10E4716AF17BB14422C329AE0BA42C9EEF888D3C6
DB49B71ED83A216241DA1211F42E4327DA0FBA34901D53F6E6B5B55E65BD79BD
C69C348FC2524EED6E4A6C35CCB6AFFEFDCE8C18E42E05C376C8D56281F6F7F3
B4657562ECFA247153812D465D0DFEF3B82108456EAE0FF8E22A15B60790BC0E
D7D1C565BD5A2DFAB27BFFAF5770DCC8A33C8645359114E9D71C32B13902C43F
52ADECA5CE3DE6B2E2BA1BA849DAE119E0C4A26369448FAC91D930CBFDBDE00D
B899E344D699C2FD288FDAB3E6A84840206504E661BE6D41EC37F32F16F4E2CA
734380757049AA7B8524CDC15E7A6185B329C8F686D75A9D8F3D48F1C25CC713
1F5E3D67F1E40330D662435CF302E03489954A2BBFCAE08D8229B2D93C5A400C
2CDB4241177353670633FE7A3E0156A5DD95C2C1DE2684115E92B4019222FE50
8BA4BAFE39A5A2B5ECB604725409441D769AF83045591EDF98D15D746AD9D57D
8BB11D01FACE7CBA94041CEAFEBDE6D1D60558389731756044BD4149B388CEC2
1C76608177CD51634BA21A6C4726516B03B6867286EED3003DFF85B65AA64D0A
0F1FF41447CFEDDFEB24C2A5FB67502C05B884A151C05113E4DE238C2E292602
DBFF74A8EDC509992BB69A6A8B12EC64C77C15E7EBBFD886BCF391AEA28E1CA5
C44272B7BA365964A1271E8F4BC3E0A6FFD4378703652A6AA45487EDC424FCDB
6CBA9E00A76705E81705E612F96A32A8F9350EB34E79BE368D7EE03517240270
FC5B54417DB4B3BE25BD81E0C4792B026C25EDB6B4F9F0BEB9F757FD2E3A3BCF
AF16270609F10267CD6E227C6C0B6D71BF6B9721DDE2FA03948E8D6D27820FEE
FBE23328E6C0D35AE05A523311E5B6EE262F03198E0B8F82D796E0870FA38042
BF9AD232D663BE4CEC99589CB70941A1BC17C4151BBA9910455BEFEEF3C9F795
D5695958AD9EBF63D76FC6F84AE523A10B01EBA34E1CE1CEF3D5F6B40F57F3C8
5743260BDD241E10AD2617005A2CEE9627DD4DCA3BB78B7DC14DE8A6EDBF727B
DCC88440674CA5960FB48FFDD3A7D8C74987A7F140E0A0A26F95B798E25FABBD
89A2C17EB7A3AE81F799FEB3130321B658D01D4F691D128061C674E87FB07BE7
B67BC9C461BB0E2F6D9483EA956455F62EE57D13B6485B96819F17175679FD90
54DF1C605092F60F1C373B05B911B89D67CFDCBE86161B4BD1FD82E5FF4FC5F1
99827EC49370893222868A242034EB1D5B55C9225BC5ECBFE098DA8008401C6C
03A9DBD97DC4971A485BB922F9CB20F6D3D1C9F40D9E991753E4850AD8308B4B
5BF03944AA5506DE6A20A1EFF00F316B9337EC2889DBFA423356B0D93BE40A72
92789867D1C64F9C1F18FCB04FC879A6461BF85A440B9864E74CAC82C6F9B862
736D867D927772803D9C50A1ED8249B91D2C8DDE8808DC922FB772A36CB09FCB
96470F81292E4437C8ADAFFCF365B4485E96A9C9C4E50BC74E4E542DB1915577
6D311C47FF72D385A5F23302DABB2D6127CE2F4EED77BA4069ED1BCD83B56391
99A68B3D7575BD954666765F81B282635610ADE5DB5F0A6A1A916167307D4016
20C503DEA5D79632DA32FE2A6EBCC9D94E0787D5F083F990F2162DFD355D4C34
FCE76F7960EA4FE44E368B0822DFFCD57DB107E0D5E728CA78145EAA2B396686
DD5FC5386098A7CC2A6AE8A7778C1D27AC5EC62364DA6E0C5ECC9B3B85C0C672
D65ADA70104826CC10B15F69D1F139689335EAB32E5BFA7BFD90209DEA860D77
F7ADBDBF3D8D348873FD52F8C48F9601372F5D0E95D7FDF91A111734FD20D280
8840C00A026BD1B23D75690578661B1E9E62B48838A442E796E1104D031A837F
F15A6CD3401A04093C37D119B7777F3F729F352BE940B4B329FB463D8E696CE7
BCD92563CBCA6C2C6B50905C922ACCC30FEC7B1820C42A1078409AD56FE7119D
B5E7737DF4D0CAF7AA3D1C010A40A2D67FA2AE0B2C9F9D2011B5B83876B8DC19
F1B02F9F23433255B6F8AF17DBBF27066BF3214E1B06294C66DCC4D12B83677F
886644AF9E79DE4347ABB15EC3C23600BC5A557FFBB7F3E75689AECBA26D6AA3
4CF8BB86F4B93CDCB0023E98BCA1954246490A01F560120437FDDF454E7C7956
5507AB1C2EF74DFA2A3CDD84DA84200884D5F63C4253C69BC1212CCE4DECA894
C6AC618011E948916F6A9356A285C62D2D3E0E5E776B6A4EE93F10A25B6CC281
9FF6F26221A016066AFD35FA973198BA54FCD94646F6BFD96E5F3353893B819C
F769EC2C322580AFFD41A9EE233A726B2315FA4BAC8A9ACEF50FAE0EB699C330
6C52D5C7E67FC8E6E3573DB6FB5CFDE38FE2E9BF8207894A24EEDC4F35968EC6
B6036E9D65A26EEB2A08F0000765FEC6495933C20BA435EF6A458C976DA92D7C
19D24B905549CECBDF7BDFC6FA4F7B74BEE20210A0FE7B0C2F5FA4150713F6FF
5A943CEC7C4B8805F37335669160CADB900DC43E618C06E4E83D61F68D73A373
4B8EC9D803D0D9676062563712167DA00C6CECC8759003780009677DC944FE3E
3C35D16612B3EACE32EFBAB707C50FF6708F4AB5B05C531CBCF1D1DC101A75E7
B55F34AAB89FE4BB8470C253483DE7EB353611BED8E37D7BE8E857688514794C
5F9EDC04D387A9BF8738B6AB670B3EB9A3E85B312B331EA44FA926093CEAE64E
4D8E58EC3D281ACDB7645ECC5F4CE6A04140CA516D7793BD1F976840A4D7AF01
6449FD58506FFBC9507DDD77014C2920F71012BFEED7585F55B995DCC55499B6
46AD565CF7FE85966D6F8C3EED0AC734005F7CA45C483BDE5670997B72CBA3AC
1C1F7625B600BAA5D77705218DDD134AAD7C32A332D3BEC24D3A8B2ED7401F24
29C9661A9AB602EEB99A28941BAFE16CAEEC0DE8C53851903C4122E9FEB527C8
4AC1DE8DF646DCBDCD3033763D93EF23CAC1C44ACA65EFDAE7A15DA273DCCD84
2275C8FBB6003E4166DC27459483ED6A04D1DAEE7D239604B5D1DCDBD3BA0304
8A200E359C0C635B437AEC88D81FF347EBA6C417DF5F8C2BC3A5CAAD652F44D4
32004DA354352C5F6503160BDCF924E38905EC11852227A06BDC84ABC8F799B6
38CF6C497D0D1E75DA0DD648A764B9DDC33F19C7EFCB31A980B6A05B63D75B86
33225FC05F132544B831255B96FBB30E83372BE711DA7B17E5A874BF14E532D8
88A7904C72FC1ABC392D62B3240677F64889D700B15F5E18C430D828A7C16A81
002AE7A15CB4353D94C752CC52FEFC1238F36B24B5F5BCB5DCBBD3211FF07D69
E21FB4794954043098CB4DE8AC3CC9FCB3772DFF8130652B71CA5ADD2266A3E3
3FF41FFA11EFC866594DC34C88198806820C640EACA609E4C5EE59F5934BE6E2
D0D45246935E2DFDC56C87343972D071B660741B4094ED90D38FC4C93BD51468
208072BD861CA3EA8185BCF9FA4892D3050E94603C1C42DE0C535B229630AB9A
215C8FC1470D926D6E7D4C105DB759E6AB82D300511B05C15FC42AC1EEB4EB41
3944D0775BAEF808D2FEA2BEF33383AEDBEE076C3D5C68F7783E4092B409383C
CFCB416BF435E7274DFCC80D58B99A15CD40590B9B68B378E88E66FE3EA0DD53
827939541BCFDDB01997CD5DF4AF124740AE853231A58BEE28AE0207200A0CA8
5F553B69EA1DAB2827A6B65957CD2CEE8EB4510782749971A800C03E0409D8C5
6211C6D2880423B437527AFD3B8AD3FE05A8DFD048A6FB52403D4C642F210E02
A3AE9284B599C63F2C36EB602C9656760F2DA467C6325B8C959BE75432396878
00B071E8288F1AF5732A5FC9579E3D1E967CF4711285D38B3AEFB1083D837140
AF8FB5606B66927E37AC81F9D77E461C6511F9FF2CD09DBFE40ADB929E04919C
95D57BCF0A2667F5D3D0DC69628214BAD6EC0B5AACBF5E14D7202282F119071E
6C4F7C4C0001735EC02EBAE844A143C63491A0BA2F10874A306A94C0AF48A292
01593045978BDF715A0647DB52992DE617DE4BC0004259E1D4BD53E263A88783
78F1C62A848011C8C079A3EB39A63B93F359409B9D2BFBEBF88AAFA6E681A7A7
987EC1FFAEBA3D18DA336C39F09225CCD8B85C5DB458FEEE8BEE21A7784A6B13
422B5EF70FB8DAD131F0F6038F07FC10D735BA9AA1317F148C15F4AF867E4292
F7ABC48A9F9FFED6FB35F504F1EA911595464747883CBB183FEF6DE22619D0D5
E959FA0B553B3535E17C8887DEE96EB9B4FD20E4F550C55621D03FAEE368A160
6E7C5BFE5FA418CDB5998A9FF519339A07AD9F1B487D67B89C20DD38D71B7AD8
4A001FFA908C9158FB4DB6DA9143D4422F29DBF36979804DDF61F36C5BD8BA61
B92E35F1F782778CB029CABD1D3E0053747046ED2FD3B8D257373A3F45BD25A5
D100A123A95ADE38E1160368778A557ED09C2D369B74532E6ACF671DE0A0DD0F
D3856029CF661A65599B46B798F75ACBFDEE0097F82C032F7B71782EC9664CC9
2595CF6457CF08F33D1780D6366F4B8D1FD520C8FEAE3B21B790709FE9A19ADF
6BFA5526F6D8AD95971585ADE72D806EA35079B648CB4193904F609C2FFFA828
A43AE0EB5B07B48DE067F29A643656837FD042FF53D2453BED9574E1A120A09B
3E8973D747BBB7C389C9D5F0083D522B9B84A6479C6819C90D6918118720DECD
373E9632DDC32A116396E2A7FE57C02F92CB971160685193845F6AD316123620
8ACA6C88585D746C0BD2F8664253B09D56764E690C790C0FB5FA652C6CB6D67E
A840AE96BAF641E2469EB036A248DFFBC68DFB6CC9550F530ECEF0FE9E9A05CB
50300FC4F2D6A7C53C15C4145C4F68D392DF1D68478EA93DD150735524FBB355
183066983F1FBC52B6634E8EA3C0579D9536A29293C513AEEA52D3993D6DA86B
8DD207C10202637F5F390506DFA91E59D21FC5F4D5016AAF1EC28B781D42934D
97EB6FD416180CCA3182A1AC285BA404191251E6650A6823BF8235C7146C46A5
DD890534331EF694E7568C1EC621A6DD5371DE9A17C93C1493975ECB1F4D1BB0
92A16569B0835C0A3FB1CAD0893106502256B8FBA503E9492741F45BC90AA548
8F44F571531B0E96542F6F89E913D021172A8E3293F92739ACA880762566AC99
50B866E8CC5EE30FEF149E35637257BFB4D97BD9929CC4D58B29EF3FA42BFDDE
098D69AC022876725CA929E9427C185ABE396DAAB6357A1A7B66CF6FF78A4B21
FD7F5958DD7851D6336EB49D654B456E636D325E79F6F5BCDDF55F0712FEFDB9
65955A3AC5F7C0753E39AE54AD926DE16BE14837C8E010C89024D95EC449154C
53C4403A91FA09AD6FBEA9505AE5B78C031C9119C83F809B9A721F8351D54CA8
491AFD467B4557357A5191BE5CA1D916A19EC19623C0FA613B236459B55B0365
B6CEFF8E0F11508584BAA0510BE406066F0245D786FE17DD515FE0CB61A4A575
AEB7D5BFB60E7697D41ED3A847160EB87FE3614C536E9D79D26E799F1D26CDA5
6B940E651D090AE0FE1E618E4BFB44561128E0AB55B741637462A2B111D2ED33
DFB65E79B96931F045DA2DEE53F301BA889B2ABD919C5BE1C04B91266178B2AD
C607D752495F20DFBE60B8899D997CCDE74826BB97485FEE2F178EB199DDA2E7
5496C16E498B6FF324C0FA310C9B3D60F656B561B93730132CB709EA0A1054B2
A560A5BD31249CA1D662D1A896926C7C49C6438A48267435901C7E8272CB34B8
D8734E6574C83CE619CEBAA0367ADBB8FBD0049909230ACD622DDA627133EC6C
C0A8516E4DC86EAF6586D371B1AE3D44CAC4008F498CDE2290BCC435C4D792FA
E793421A5A45C29872C8CDF6F0FC69B0F51A459C739E6B6A7E15FD01219849B6
497FA6DF9C8EE095B8695FD0435E3D66D8ED27FA13C6A2715BBD86FE60139743
6DF6CD99E6C494D954449218636C01A0DA635F17CB0308E490F1640E1E4BDF9F
7250D90FBD295196A8FF74FFD2356EBF7641727AFF8DF1AFCF1D98BD5A141D4C
466C114743B853D7F77AF0F59F7AD455093C45B93895FB27C9B1720357FC30AE
252CD70E47A5AEACC54237FDD07089A316348091BAFDA514BC0986AB3B9D72AA
88C6F74BAA162A67A8127BCDC22EA3797DB5A1BD9DB81BC806F4206253C2DCC8
A40E93C1814D8ABB906E8B3217B1B6F7AE010686AF267A3C899BB19AA4AAFB14
01E6CCB19D9090F253F180F55C89355A821C70D9B318C2B02094A90E24E4C47A
EE28242D033D8CF53621656272B2D64975DC69CF280EF29095C409B980D358DB
A51227EA00A1BBC475BA8BC06943D37B24BE29C2C1679F3D3C0EEA04FD6D4CB8
0758EDB8556D0048827140AF8FB5606B66927E37AC81F9D4E27C42F2C78F42D3
E40247E7619B8C69F7BA47B270C4073D8747F3BED6E631D300A32DA3CB7A2718
9824DF510F5722B50C788D7F4E102F3409AF0E16C54BE328F1F84E51E491C64E
0AF729DB9A387C4D23A7A4F543E83FEBB7A566B441D4D0EFEC7D6505E4768B4F
CAE923D009D2B8B4F5A62024FE72EB87CCF204946097D6971616F961E9C9893E
8D7753E0B1BA466C3B8E7D98A8EB4181F21941BA88611DA6204768664BF14767
F037339B53DCC6B1F182556DE91614CCC4AB634C8B36092F79420A3BDA2A1021
4F0A6CBFB1ED239F92DE2647ED61904A7ED4D48EB9D5CB36C34709E5223CEEA0
A86C9C89D9BAD27D764ACD56B6D724F4A403284E859625569EDA1A174ECD0112
ECDCBEC86456F4E3E2DD05B0A64742140716E3D1A202580A24E0E39C67AFC5ED
94692DF12A7CC63B5B7757E0A16BAE50167B1DC5AA95B6DAF079B8696338DED7
88554CA7351753B9E8A4E7898EA970CC7288E1032DF92C9DDE43B62C043D3183
D52109069BDEF56A2536722E95FF1C3999433888A3FFD76EF7C273DB1BE1C470
5E416FB37F78DF6E349BE5593DC6B1BC11033930DD6DD104E18B803AB78AFC74
6DA967FF97F3F7A2A4BE18D5761EADA629C2931415003A9021F3DA02B1A57073
53F509BBF168DCA42CEE0631ABB01C8ED262075F6D35F90CFA34AA413033CE7E
801178FB479077ED48C29F014A51A5F3C55327ECCF5BA5355C776E2E75BB1F82
B42FC8A95F789A603A1ACC69E996737C23FC740605CCC9187171289055E53B24
FEED2888C0FCDCEFFE3151643A2EF56BB692F6094A8A71F70C8DA8C76B769CFD
71F3B73213FB0E63790DCCB77E809E2FE040F07021D7F914209AE12DC5B1D35B
0BC65A886B44D0B6836AAAC07CFAE1F79A4080ABDC6FB84FDC636EE6CEAE5B5A
D0F3BE11A407B503EC5CF8ECA2B28105862123EEFC996C4740E4A9DEE1596B6E
5C78B0699250AD3E136F1FDEAA34823394454DF98A13F16FDE736A8004F9EFA7
49669C3BB3BA9385F5977EF91EFA95258B6F35D0B70585F95A552C4318EF0BFB
01B0A773652ED3AA65CA9A528A932AF59C7299AF28999667F5B865621CC5FFB1
FDF088978B90D9940C46EF20FFEBB58FDCF13104AD66885015B6D67AE8B86308
2FDC66486CB43C152610B0C7204F5999679E6B4B810591C8457AC02B4DAD3AD1
2EA9CFC3BFA8702148576276BCEF0DB00846FA13F2E7AF696EF5B8B146317980
4D774C5B97D0130E60971302F53C986B94EDCF4C5878A7B31AA85083B6553F66
4AA7FB021A950FC75C3F0FBEA6C4011F18662539BD1275C7003CEA2AAD91F505
113F17918DCD399C09D0247C1E88859CB02BE8128D8630107499F345E2AAFEA5
8275BC5DCAD93FD818D2D5B9071ACAB3D2F843343F1EA73AE2A08CFF2F4F59F7
5D70571710D8FC3486F54B9E4460809E7A40E279C107369CFB807306BB5E7513
D0156A9C9350C0F66BB492E08D4FEB6F83D2CEC824322A5D9AD29CDB1E64E737
AF47A894E9E942EC5D6B38770C8DA5DA6C2C6D8FDE6FE36B199AA273FE563730
6EAEE39CA3E37FCD954FB6B261C41F445F7742CAB2E88D2158586DDE97A987F7
15808DC253D1562654987C3BD50D619956564DF7746AC013D8B98245CB7924C8
89595242BFCDD1896E3E2CDCAFF64EEF97C9FF727F08F2BFC328DB02CC280D3C
AA87D634BC255F89CAF1DABBA08E6298F006A4F2913A200B22FBAC78768C4EC3
29C561C03D189245ACF30EB64479F2673C9AEFC509BDA8400A5A1F19EC6C599E
253D9868B5F75F00A3AF76306F1EEFB66EB0F194B11C9F8EAAEB1C01FA9C2B9E
0A6B480EBB29CFF35076683AA718EE09AF09D203E5441D2D5CC52E0A96ADD64F
49F46B2D4BD4ED6411ABD75C981CCCABA1EBF44D78755D586BC1BFF58D72226A
9ABE08037B56450F07FE30B28F6DCF8C1900D6497B38B585520C687ED3DD0DFA
5548C0891B14D99644BA13F85B329936F10E6B07A6F8DB91EA57ACE77BF5B24A
44F45F43A20BDB91831CD7DBC455FD33FB4E7F6110695C665F456F9F600BA076
684B2CAF8F33877635AD15264B0F96B2D0E493473D4F22D36BE45455AC0A0B62
46065D3E0B217CBFC1EE153B96BD3F77002F2694C151DE9D68E5FA8B3C8F4CB7
633686130167772FCABCA42B6F41EAFFB351C627F02BD6A72DD939D4C162357C
5D5FC6A13F2754E7DD3BB8C7FD5EBC64404E8C69C4D29579B6B21F8791701050
A1DB9A1BB941231E9AC42E0A23C064543291A490B1CBB2F7C891FD5FDBFFB499
4ECF216FF82C96857610208F39FD775A2397E6D2ECFDB7212FAD24715881787E
D6F633DD7BC5B61358A1EDCF0CDF39CA406FDF46DBBA605CD8195A16765A2EDB
99C4EA62A0B19CE443E4372321B6F692850AC62C48E1367FA202F6CE5D54ABA5
531343BC4AB9E331D0A01D58D35788FA6F01BF27B5A8590223348E5A9F2E1DCD
5B03C5D1BFA746AE8F304FB73A0292AD1A4AAE908B49EF25EF48E7E56CA7A0B9
4452DE5094942EFBFB0995DF003B757A1D5046199F3D5A6770348B73332A47C5
38847BFD3B95EA262945710FE2D708B726A7FDA2284643AC878A542DEBA73263
0023D22A4D4A643821692E2C7FE44C832B9BF24D8CB87D678E5195A01CC142FC
81D1F4CA3362A1B0D86C00A49816C19375BA41440C7EB666C8CB334D0824C5E8
3AD1B8F73F38321D43197297F1792E47F312DCADE1D98BBA56CF9BBD35E7FBBD
5A32BA13F01AD5ABE43232D46C7142AA126E34882206C9671003FDEB27E9876B
16F44C81D5C2470207BC6B0BB9D2BC965832803E347A3E9F093BC0C0888E046E
85CACE4898BC9404D7B6FAABBD811B96E542C3FC6E8D2172916AF4B382E5B7C4
A24522EE41ADBB96EB357CCE1C5794FAC96F6037D5841BA442BBEF0F94299F5C
9953A8D5C02D475B59AC3E77CB55E9F2B7B36A2CDB5593442E597DEF3773A4EE
F31122582DA62FAFBA32DE771F12D0E27729E4417BCE42B826FD369235C3DBA0
C32A429BDC8AA2528A30CE814C83807C646EF68E3E6E506DE58BA4EB4D1F2A6D
3B427F4487A41D2EC264508546BBCA7634C5C6EE1D6F36DBC0CC230403B4FC36
1D6F27A1E8CAF52701F7AB6C76DC0AA4B57B0B458A60BF921AF287B3755EB614
AC773703C10D2D7DA432A21EAB7C6A1017A36DAF78D2644F55334C50A1EB9370
44B66A2AADB12A22D8FD17DC0BE61AF14964F072447E929EEE0B6B8B9A6608B0
EDAA470FE82008B3EFDEA17EC7C2BAA02E25E15A52995AA62A79DC59BCA3AE55
6AC65ED8BAE17D2632B53F475504F09E2D66B42D52E9C3FE4333B7AF65CD8F96
D26E0E2A6AC10B4CE5D1C4026527F006DFEB90155DD58ABA4E39E1E369201369
B9AFC18ECAAE343741508DECEF2D75B83BFE0488E1F5F74B2A53F64958543FD8
2C7AB4437A3459527E85B459D174E497E3CC565907F2C602BD0F7CA63B4D030F
AAE6CDA44801BC8F611C25276050BFC1834DE084ACFCF03721334B1E70AE960B
372A0537E6BC6FF03FE366B640CBB7034D44CB0E492C69776057424619EF96CC
C6263EA571E4228DFA9B109CE61EB72B40C141386ADADA5241507EA996CA0CED
7378B6D71BA8545243526FA33CAD08ED462014FACC23BF301D1F234B18B43CF9
8AF85478B18C735F19937641A7C293DA9CD5B77D0A481585B5F7E9D8CA683766
23EDB8A7CDA60AC9B374F59DBB6DD51143A004A9F80DC13DDC277B068ACDDECB
23AEB03E4F102D896723E84E145935B008348808C59386DE6BF35937785D98C4
2E46DE5997F4773EFC2776172BBF30BB69B554EACCF5DF70E8BBB6A3F5BF6782
CFB04B54E54C2DF213B204B57C3F3FDCC85C053A4DE003672061D5CF0E24BF83
400BFCCBFF96CBC2042EAFBAE33155528B56C9B9E648A145ACE1412650DD9D4F
847E1FA74B5CCB8807EB7862CA52C62FF4AACF3163A4A1385C6B367EA611C8C2
BAFB0302CB498C79D4CAE7DC7FBA27735C6DB9DF492A8D442138AF59DAADD461
3CBA9492A1353A91AF2DC330F30101B2463B6AF04A75C7A8B6391CE1C902280C
15EF6F3AD01506DDCE1B08C6E938744C6FB0A2DE3908BD266B5FFBD75F532893
D47CB05F11E96F623CA3723B9040BCC7A0CCE6721BA548120AB812C6245DB89C
10ADCB3B79A07E4160678937A4C09BE1CBCCABE548DA3CB724F4846576F89C59
9D26EA1C64608EEDBD9400328FD267BF368036C464E37B977E7ABDB900A6597B
C1526ACD364F19C3CA91B7721EB4E08D246B80DC5EF4BAA09E5EC53EA6E0776E
E32C018DAB4FDE1E93650F93451C1DC0FC8054D04B39DCDA01ABD335080EC7B6
3967043AA42E57B49153D86F87473393D821AEED292C8BD174F5C674343527A0
3AFF0C46B55642563362A898A2E10AEC7FF120302B582DBC20D31F789B9F94CC
6F945ABE0BC706E7A90C2549D2829B933CBD0B7FBA6C0AC5728E04DFD15266BC
42FE0FAAC0F7D58A02A39EDBF1534FE1AC9EAE123EAC49F3EA67B1543B78CD8D
01D3B056367398E77F8CA5F09AC21FC388E1AFA6E6BD665222764A9F5431E7AC
5009553F673B8EE3156228015AA321E0CC95A670A52DE9DFDA054EC15285526D
05849E552B8505C9179AA7C037
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (Ex_complexite.dvi)
@start /Fa 200[45 45 45 45 45 1[45 45 48[{}7 90.9091
/CMR10 rf /Fb 138[46 2[31 3[46 72 3[21 46 2[40 1[40 3[70
95[{ T1Encoding ReEncodeFont }9 90.9091 /SFSS1095 rf
/Fc 22[40 40 30[61 79[48 48 1[48 50 35 36 35 48 50 45
50 75 25 1[28 25 50 45 28 40 50 40 50 45 12[65 1[67 70
61 70 2[56 6[61 69 65 64 68 1[43 4[25 45 1[45 1[45 1[45
45 45 45 1[25 30 25 2[35 35 25 10[50 53 27[{ T1Encoding ReEncodeFont }
54 90.9091 /SFRM1095 rf /Fd 135[55 2[58 2[43 2[52 58
87 3[29 58 2[47 58 46 58 50 13[58 78 27[52 52 52 52 52
52 7[40 41[{ T1Encoding ReEncodeFont }22 90.9091 /SFBX1095
rf /Fe 22[41 41 110[44 41 2[48 30 37 38 1[46 46 51 74
23 2[28 46 1[28 41 46 41 41 46 16[61 69 10[68 21[28 1[28
4[28 10[51 28[{ T1Encoding ReEncodeFont }28 90.9091 /SFTI1095
rf /Ff 135[69 5[53 8[37 3[60 1[58 29[86 18[66 66 49[{
 T1Encoding ReEncodeFont }8 119.552 /SFBX1440 rf /Fg
22[71 112[84 2[89 62 1[62 1[89 80 89 133 44 2[44 89 80
1[71 89 2[80 29[115 27[44 39[{ T1Encoding ReEncodeFont }18
172.188 /SFRM2074 rf /Fh 135[114 5[87 8[60 3[98 1[96
29[142 10[60 58[{ T1Encoding ReEncodeFont }7 206.559
/SFBX2488 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author ()/Keywords () /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -372 -561
a
SDict begin H.S end
 -372 -561 a -372 -561 a
SDict begin H.R end
 -372 -561 a -372 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -372
-561 a 0 TeXcolorgray Black 0 TeXcolorgray -364 -246
a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -364 -246 a -364 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -364 -246 a -364 -246 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -364
-246 a -364 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -364 -246 a -364 -246 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -364 -246
a -364 -246 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -364 -246 a -364 -246 a
SDict begin H.S end
 -364 -246 a -364
-246 a
SDict begin 13.6 H.A end
 -364 -246 a -364 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -364 -246 a -303 -103
a Fh(Exercice)71 b(:)181 b Fg(Complexit\351)52 b(d'un)g(algorithme)p
-364 10 4489 5 v -364 409 a
SDict begin H.S end
 -364 409 a -364 409 a
SDict begin 18 H.A end
 -364
409 a -364 409 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 -364 409 a Ff(Exercice)45 b(1)-223 612
y Fe(Dans)33 b(c)-5 b(et)34 b(exer)-5 b(cic)g(e,)36 b(on)d(c)-5
b(onsid\350r)g(e)34 b(des)g(table)-5 b(aux)35 b(de)f(nombr)-5
b(es)33 b(entiers.)g(On)g(n)-9 b('utilise)32 b(p)-5 b(as)33
b(les)g(fonctions)g(de)g(r)-5 b(e)g(cher)g(che)37 b(de)-364
725 y(maximum,)32 b(minimum)f(et)i(de)g(somme)f(pr)-5
b(\351)g(d\351\034nies)34 b(dans)e(Python.)-364 965 y
SDict begin H.S end

-364 965 a -364 965 a
SDict begin 13.6 H.A end
 -364 965 a -364 965 a
SDict begin [/View [/XYZ H.V]/Dest (section*.2) cvn /DEST pdfmark end
 -364 965
a Fd(Rec)m(herc)m(he)j(du)f(minim)m(um)-364 1008 y
SDict begin H.S end
 -364
1008 a -364 1008 a
SDict begin 13.6 H.A end
 -364 1008 a -364 1008 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -364 1008
a 0 TeXcolorgray -274 1136 a Fd(1\))p 0 TeXcolorgray
45 w Fc(\311crire)e(un)f(algorithme)g(qui)g(rec)m(herc)m(he)h(la)f(v)-5
b(aleur)31 b(minimale)g(d'un)g(tableau)h(non)e(tri\351)h(de)g(20)f(nom)
m(bres.)-364 1174 y
SDict begin H.S end
 -364 1174 a -364 1174 a
SDict begin 13.6 H.A end
 -364 1174
a -364 1174 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -364 1174 a 0 TeXcolorgray -274 1280 a
Fd(2\))p 0 TeXcolorgray 45 w Fc(D\351terminer)h(le)f(nom)m(bre)g
(d'it\351rations)h(n\351cessaires)e(p)s(our)h(trouv)m(er)g(le)f(minim)m
(um)j(d'un)d(tableau)i(con)m(tenan)m(t)g(20)f(nom)m(bres.)-364
1318 y
SDict begin H.S end
 -364 1318 a -364 1318 a
SDict begin 13.6 H.A end
 -364 1318 a -364 1318
a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -364 1318 a 0 TeXcolorgray -274 1424 a Fd(3\))p 0 TeXcolorgray
45 w Fc(\311crire,)g(en)f(Python,)g(la)f(fonction)h Fb
(recherche_minimum)h Fc(qui)e(prend)h(en)f(param\350tre)i(un)f(tableau)
g(de)g(nom)m(bres)g(et)g(ren)m(v)m(oie)-137 1537 y(la)i(v)-5
b(aleur)31 b(minimale)g(du)g(tableau)g(quelle)g(que)f(soit)h(sa)f
(dimension.)-364 1570 y
SDict begin H.S end
 -364 1570 a -364 1570 a
SDict begin 13.6 H.A end
 -364
1570 a -364 1570 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -364 1570 a 0 TeXcolorgray -274 1680
a Fd(4\))p 0 TeXcolorgray 45 w Fc(Quelle)i(est)e(la)g(complexit\351)i
(de)e(v)m(otre)h(algorithme.)-364 1920 y
SDict begin H.S end
 -364 1920 a
-364 1920 a
SDict begin 13.6 H.A end
 -364 1920 a -364 1920 a
SDict begin [/View [/XYZ H.V]/Dest (section*.3) cvn /DEST pdfmark end
 -364 1920 a Fd(Rec)m(herc)m(he)k
(du)f(maxim)m(um)-364 1964 y
SDict begin H.S end
 -364 1964 a -364 1964 a
SDict begin 13.6 H.A end

-364 1964 a -364 1964 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -364 1964 a 0 TeXcolorgray -274
2092 a Fd(1\))p 0 TeXcolorgray 45 w Fc(T)-8 b(ransformer)32
b(l'algorithme)g(pr\351c\351den)m(t)h(p)s(our)d(rec)m(herc)m(her)j(la)e
(v)-5 b(aleur)30 b(maximale)i(d'un)f(tableau.)-364 2130
y
SDict begin H.S end
 -364 2130 a -364 2130 a
SDict begin 13.6 H.A end
 -364 2130 a -364 2130 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -364
2130 a 0 TeXcolorgray -274 2236 a Fd(2\))p 0 TeXcolorgray
45 w Fc(Qu'en)h(est-il)e(de)h(la)f(complexit\351)i(de)e(l'algorithme)15
b(?)-364 2475 y
SDict begin H.S end
 -364 2475 a -364 2475 a
SDict begin 13.6 H.A end
 -364 2475 a -364
2475 a
SDict begin [/View [/XYZ H.V]/Dest (section*.4) cvn /DEST pdfmark end
 -364 2475 a Fd(Somme)-364 2519 y
SDict begin H.S end
 -364 2519 a -364
2519 a
SDict begin 13.6 H.A end
 -364 2519 a -364 2519 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 -364 2519 a 0 TeXcolorgray
-274 2647 a Fd(1\))p 0 TeXcolorgray 45 w Fc(\311crire)32
b(un)f(algorithme)g(qui)g(calcule)g(la)f(somme)h(des)f(v)-5
b(aleurs)31 b(d'un)g(tableau.)-364 2685 y
SDict begin H.S end
 -364 2685 a
-364 2685 a
SDict begin 13.6 H.A end
 -364 2685 a -364 2685 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 -364 2685 a 0 TeXcolorgray
-274 2791 a Fd(2\))p 0 TeXcolorgray 45 w Fc(Quelle)h(est)e(la)g
(complexit\351)i(de)e(v)m(otre)h(algorithme)15 b(?)-364
3077 y
SDict begin H.S end
 -364 3077 a -364 3077 a
SDict begin 18 H.A end
 -364 3077 a -364 3077
a
SDict begin [/View [/XYZ H.V]/Dest (section*.5) cvn /DEST pdfmark end
 -364 3077 a Ff(Exercice)45 b(2)-364 3152 y
SDict begin H.S end
 -364 3152
a -364 3152 a
SDict begin 13.6 H.A end
 -364 3152 a -364 3152 a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 -364 3152 a 0 TeXcolorgray
-274 3280 a Fd(1\))p 0 TeXcolorgray 45 w Fc(\311crire)25
b(un)e(algorithme)i(\(it\351ratif)f(ou)g(r\351cursif)7
b(\))23 b(qui)g(rec)m(herc)m(he)j(la)d(v)-5 b(aleur)24
b(minimale)h(dans)e(un)h(arbre)g(binaire)g(de)g(rec)m(herc)m(he.)-364
3318 y
SDict begin H.S end
 -364 3318 a -364 3318 a
SDict begin 13.6 H.A end
 -364 3318 a -364 3318
a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 -364 3318 a 0 TeXcolorgray -274 3424 a Fd(2\))p 0 TeXcolorgray
45 w Fc(\311crire)32 b(un)f(algorithme)g(qui)g(rec)m(herc)m(he)h(la)f
(v)-5 b(aleur)31 b(maximale)g(dans)f(un)h(arbre)g(binaire)g(de)g(rec)m
(herc)m(he.)-364 3462 y
SDict begin H.S end
 -364 3462 a -364 3462 a
SDict begin 13.6 H.A end
 -364
3462 a -364 3462 a
SDict begin [/View [/XYZ H.V]/Dest (Item.11) cvn /DEST pdfmark end
 -364 3462 a 0 TeXcolorgray -274 3567
a Fd(3\))p 0 TeXcolorgray 45 w Fc(On)g(donne)g(l'ABR)f(ci-dessous)g(:)p
0 TeXcolorgray 0 TeXcolorgray 1522 4648 a
tx@Dict begin { 56.90549 105.27505 } PutCoor PutBegin  end
 1522 4648 a
1477 4677 a
tx@Dict begin  tx@NodeDict begin { 10.88788  2 div 7.08139  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@A 11
{InitCnode } /NodeScale {} def NewNode end  end
 1477 4677 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    10.88788  2 div 7.08139
 0.0  add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
Fc(11)1522 4648 y
tx@Dict begin  PutEnd  end
 1522 4648 a 1522 4648 a
tx@Dict begin { 34.1432 76.82231 } PutCoor PutBegin  end
 1522 4648 a
1499 4677 a
tx@Dict begin  tx@NodeDict begin { 5.44394  2 div 7.08139  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@B 11
{InitCnode } /NodeScale {} def NewNode end  end
 1499 4677 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.44394  2 div 7.08139
 0.0  add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
Fc(7)1522 4648 y
tx@Dict begin  PutEnd  end
 1522 4648 a 1522 4648 a
tx@Dict begin { 19.91682 48.36957 } PutCoor PutBegin  end
 1522 4648 a
1499 4677 a
tx@Dict begin  tx@NodeDict begin { 5.44394  2 div 7.08139  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@D 11
{InitCnode } /NodeScale {} def NewNode end  end
 1499 4677 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.44394  2 div 7.08139
 0.0  add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
Fc(3)1522 4648 y
tx@Dict begin  PutEnd  end
 1522 4648 a 1522 4648 a
tx@Dict begin { 48.36957 48.36957 } PutCoor PutBegin  end
 1522 4648 a
1499 4677 a
tx@Dict begin  tx@NodeDict begin { 5.44394  2 div 7.08139  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@E 11
{InitCnode } /NodeScale {} def NewNode end  end
 1499 4677 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.44394  2 div 7.08139
 0.0  add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
Fc(9)1522 4648 y
tx@Dict begin  PutEnd  end
 1522 4648 a 1522 4648 a
tx@Dict begin { 79.66776 76.82231 } PutCoor PutBegin  end
 1522 4648 a
1477 4677 a
tx@Dict begin  tx@NodeDict begin { 10.88788  2 div 7.08139  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@C 11
{InitCnode } /NodeScale {} def NewNode end  end
 1477 4677 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    10.88788  2 div 7.08139
 0.0  add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
Fc(15)1522 4648 y
tx@Dict begin  PutEnd  end
 1522 4648 a 1522 4648 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@A /N@B InitNC { NCCoor tx@Dict begin ArrowA
CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1
gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
 grestore end
 1522 4648 a
1522 4648 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@A /N@C InitNC { NCCoor tx@Dict begin ArrowA
CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1
gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
 grestore end
 1522 4648 a 1522 4648 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@B /N@D InitNC { NCCoor tx@Dict begin ArrowA
CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1
gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
 grestore end
 1522 4648 a 1522
4648 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@B /N@E InitNC { NCCoor tx@Dict begin ArrowA
CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1
gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
 grestore end
 1522 4648 a -137 4865 a Fc(Com)m(bien)e(d'app)s(els)e
(r\351cursifs)g(ou)g(it\351rations)g(son)m(t)h(e\033ectu\351s)f(p)s
(our)g(obtenir)g(la)g(v)-5 b(aleur)27 b(minimale)15 b(?)26
b(la)g(v)-5 b(aleur)27 b(maximale)15 b(?)-364 4898 y
SDict begin H.S end

-364 4898 a -364 4898 a
SDict begin 13.6 H.A end
 -364 4898 a -364 4898 a
SDict begin [/View [/XYZ H.V]/Dest (Item.12) cvn /DEST pdfmark end
 -364
4898 a 0 TeXcolorgray -274 5009 a Fd(4\))p 0 TeXcolorgray
45 w Fc(Repr\351sen)m(ter)32 b(l'arbre)f(binaire)h(de)e(rec)m(herc)m
(he)j(con)m(tenan)m(t,)g(dans)d(cet)h(ordre,)g(les)f(v)-5
b(aleurs)31 b Fa(15)p Fc(,)g Fa(17)p Fc(,)g Fa(13)p Fc(,)g
Fa(10)p Fc(,)g Fa(11)g Fc(et)g Fa(16)p Fc(.)-364 5078
y
SDict begin H.S end
 -364 5078 a -364 5078 a
SDict begin 13.6 H.A end
 -364 5078 a -364 5078 a
SDict begin [/View [/XYZ H.V]/Dest (Item.13) cvn /DEST pdfmark end
 -364
5078 a 0 TeXcolorgray -73 5183 a Fd(a\))p 0 TeXcolorgray
46 w Fc(Com)m(bien)41 b(d'app)s(els)f(r\351cursifs)f(ou)g
(it\351rations)h(son)m(t)g(n\351cessaires)f(p)s(our)g(obtenir)i(la)e(v)
-5 b(aleur)39 b(minimale)15 b(?)41 b(la)e(v)-5 b(aleur)63
5296 y(maximale)15 b(?)-364 5312 y
SDict begin H.S end
 -364 5312 a -364 5312
a
SDict begin 13.6 H.A end
 -364 5312 a -364 5312 a
SDict begin [/View [/XYZ H.V]/Dest (Item.14) cvn /DEST pdfmark end
 -364 5312 a 0 TeXcolorgray
-80 5440 a Fd(b\))p 0 TeXcolorgray 45 w Fc(On)31 b(a)5
b(joute)31 b(la)f(v)-5 b(aleur)31 b Fa(14)p Fc(.)g(Est-ce)g(que)f(cela)
h(c)m(hange)h(le)e(nom)m(bre)i(d'app)s(els)f(r\351cursifs)15
b(?)-364 5478 y
SDict begin H.S end
 -364 5478 a -364 5478 a
SDict begin 13.6 H.A end
 -364 5478 a -364
5478 a
SDict begin [/View [/XYZ H.V]/Dest (Item.15) cvn /DEST pdfmark end
 -364 5478 a 0 TeXcolorgray -69 5584 a Fd(c\))p
0 TeXcolorgray 46 w Fc(On)31 b(a)5 b(joute)31 b(la)f(v)-5
b(aleur)31 b Fa(4)p Fc(.)g(Le)g(nom)m(bre)g(d'app)s(els)g(r\351cursifs)
f(est-il)h(mo)s(di\034\351.)-364 5653 y
SDict begin H.S end
 -364 5653 a -364
5653 a
SDict begin 13.6 H.A end
 -364 5653 a -364 5653 a
SDict begin [/View [/XYZ H.V]/Dest (Item.16) cvn /DEST pdfmark end
 -364 5653 a 0 TeXcolorgray
-274 5758 a Fd(5\))p 0 TeXcolorgray 45 w Fc(Quelle)h(est)e(la)g
(complexit\351)i(de)e(l'algorithme)j(de)d(rec)m(herc)m(he)j(de)d(la)h
(v)-5 b(aleur)31 b(minimale)15 b(?)31 b(v)-5 b(aleur)31
b(maximale)15 b(?)-364 5797 y
SDict begin H.S end
 -364 5797 a -364 5797 a
SDict begin 13.6 H.A end

-364 5797 a -364 5797 a
SDict begin [/View [/XYZ H.V]/Dest (Item.17) cvn /DEST pdfmark end
 -364 5797 a 0 TeXcolorgray -274
5902 a Fd(6\))p 0 TeXcolorgray 45 w Fc(Que)37 b(p)s(eut-on)f(dire)g(de)
g(la)f(complexit\351)i(de)f(l'algorithme)h(de)f(rec)m(herc)m(he)i(de)e
(la)g(v)-5 b(aleur)36 b(minimale)h(si)e(l'arbre)h(binaire)h(de)-137
6015 y(rec)m(herc)m(he)c(est)d(\351quilibr\351)15 b(?)p
0 TeXcolorgray 1858 6310 a(1)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
